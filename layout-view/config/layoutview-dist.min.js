(function(global) {

  var defined = {};

  // indexOf polyfill for IE8
  var indexOf = Array.prototype.indexOf || function(item) {
    for (var i = 0, l = this.length; i < l; i++)
      if (this[i] === item)
        return i;
    return -1;
  }

  function dedupe(deps) {
    var newDeps = [];
    for (var i = 0, l = deps.length; i < l; i++)
      if (indexOf.call(newDeps, deps[i]) == -1)
        newDeps.push(deps[i])
    return newDeps;
  }

  function register(name, deps, declare, execute) {
    if (typeof name != 'string')
      throw "System.register provided no module name";

    var entry;

    // dynamic
    if (typeof declare == 'boolean') {
      entry = {
        declarative: false,
        deps: deps,
        execute: execute,
        executingRequire: declare
      };
    }
    else {
      // ES6 declarative
      entry = {
        declarative: true,
        deps: deps,
        declare: declare
      };
    }

    entry.name = name;

    // we never overwrite an existing define
    if (!(name in defined))
      defined[name] = entry; 

    entry.deps = dedupe(entry.deps);

    // we have to normalize dependencies
    // (assume dependencies are normalized for now)
    // entry.normalizedDeps = entry.deps.map(normalize);
    entry.normalizedDeps = entry.deps;
  }

  function buildGroups(entry, groups) {
    groups[entry.groupIndex] = groups[entry.groupIndex] || [];

    if (indexOf.call(groups[entry.groupIndex], entry) != -1)
      return;

    groups[entry.groupIndex].push(entry);

    for (var i = 0, l = entry.normalizedDeps.length; i < l; i++) {
      var depName = entry.normalizedDeps[i];
      var depEntry = defined[depName];

      // not in the registry means already linked / ES6
      if (!depEntry || depEntry.evaluated)
        continue;

      // now we know the entry is in our unlinked linkage group
      var depGroupIndex = entry.groupIndex + (depEntry.declarative != entry.declarative);

      // the group index of an entry is always the maximum
      if (depEntry.groupIndex === undefined || depEntry.groupIndex < depGroupIndex) {

        // if already in a group, remove from the old group
        if (depEntry.groupIndex !== undefined) {
          groups[depEntry.groupIndex].splice(indexOf.call(groups[depEntry.groupIndex], depEntry), 1);

          // if the old group is empty, then we have a mixed depndency cycle
          if (groups[depEntry.groupIndex].length == 0)
            throw new TypeError("Mixed dependency cycle detected");
        }

        depEntry.groupIndex = depGroupIndex;
      }

      buildGroups(depEntry, groups);
    }
  }

  function link(name) {
    var startEntry = defined[name];

    startEntry.groupIndex = 0;

    var groups = [];

    buildGroups(startEntry, groups);

    var curGroupDeclarative = !!startEntry.declarative == groups.length % 2;
    for (var i = groups.length - 1; i >= 0; i--) {
      var group = groups[i];
      for (var j = 0; j < group.length; j++) {
        var entry = group[j];

        // link each group
        if (curGroupDeclarative)
          linkDeclarativeModule(entry);
        else
          linkDynamicModule(entry);
      }
      curGroupDeclarative = !curGroupDeclarative; 
    }
  }

  // module binding records
  var moduleRecords = {};
  function getOrCreateModuleRecord(name) {
    return moduleRecords[name] || (moduleRecords[name] = {
      name: name,
      dependencies: [],
      exports: {}, // start from an empty module and extend
      importers: []
    })
  }

  function linkDeclarativeModule(entry) {
    // only link if already not already started linking (stops at circular)
    if (entry.module)
      return;

    var module = entry.module = getOrCreateModuleRecord(entry.name);
    var exports = entry.module.exports;

    var declaration = entry.declare.call(global, function(name, value) {
      module.locked = true;
      exports[name] = value;

      for (var i = 0, l = module.importers.length; i < l; i++) {
        var importerModule = module.importers[i];
        if (!importerModule.locked) {
          var importerIndex = indexOf.call(importerModule.dependencies, module);
          importerModule.setters[importerIndex](exports);
        }
      }

      module.locked = false;
      return value;
    });

    module.setters = declaration.setters;
    module.execute = declaration.execute;

    if (!module.setters || !module.execute)
      throw new TypeError("Invalid System.register form for " + entry.name);

    // now link all the module dependencies
    for (var i = 0, l = entry.normalizedDeps.length; i < l; i++) {
      var depName = entry.normalizedDeps[i];
      var depEntry = defined[depName];
      var depModule = moduleRecords[depName];

      // work out how to set depExports based on scenarios...
      var depExports;

      if (depModule) {
        depExports = depModule.exports;
      }
      else if (depEntry && !depEntry.declarative) {
        if (depEntry.module.exports && depEntry.module.exports.__esModule)
          depExports = depEntry.module.exports;
        else
          depExports = { 'default': depEntry.module.exports, __useDefault: true };
      }
      // in the module registry
      else if (!depEntry) {
        depExports = load(depName);
      }
      // we have an entry -> link
      else {
        linkDeclarativeModule(depEntry);
        depModule = depEntry.module;
        depExports = depModule.exports;
      }

      // only declarative modules have dynamic bindings
      if (depModule && depModule.importers) {
        depModule.importers.push(module);
        module.dependencies.push(depModule);
      }
      else
        module.dependencies.push(null);

      // run the setter for this dependency
      if (module.setters[i])
        module.setters[i](depExports);
    }
  }

  // An analog to loader.get covering execution of all three layers (real declarative, simulated declarative, simulated dynamic)
  function getModule(name) {
    var exports;
    var entry = defined[name];

    if (!entry) {
      exports = load(name);
      if (!exports)
        throw new Error("Unable to load dependency " + name + ".");
    }

    else {
      if (entry.declarative)
        ensureEvaluated(name, []);

      else if (!entry.evaluated)
        linkDynamicModule(entry);

      exports = entry.module.exports;
    }

    if ((!entry || entry.declarative) && exports && exports.__useDefault)
      return exports['default'];

    return exports;
  }

  function linkDynamicModule(entry) {
    if (entry.module)
      return;

    var exports = {};

    var module = entry.module = { exports: exports, id: entry.name };

    // AMD requires execute the tree first
    if (!entry.executingRequire) {
      for (var i = 0, l = entry.normalizedDeps.length; i < l; i++) {
        var depName = entry.normalizedDeps[i];
        var depEntry = defined[depName];
        if (depEntry)
          linkDynamicModule(depEntry);
      }
    }

    // now execute
    entry.evaluated = true;
    var output = entry.execute.call(global, function(name) {
      for (var i = 0, l = entry.deps.length; i < l; i++) {
        if (entry.deps[i] != name)
          continue;
        return getModule(entry.normalizedDeps[i]);
      }
      throw new TypeError('Module ' + name + ' not declared as a dependency.');
    }, exports, module);

    if (output)
      module.exports = output;
  }

  /*
   * Given a module, and the list of modules for this current branch,
   *  ensure that each of the dependencies of this module is evaluated
   *  (unless one is a circular dependency already in the list of seen
   *  modules, in which case we execute it)
   *
   * Then we evaluate the module itself depth-first left to right 
   * execution to match ES6 modules
   */
  function ensureEvaluated(moduleName, seen) {
    var entry = defined[moduleName];

    // if already seen, that means it's an already-evaluated non circular dependency
    if (!entry || entry.evaluated || !entry.declarative)
      return;

    // this only applies to declarative modules which late-execute

    seen.push(moduleName);

    for (var i = 0, l = entry.normalizedDeps.length; i < l; i++) {
      var depName = entry.normalizedDeps[i];
      if (indexOf.call(seen, depName) == -1) {
        if (!defined[depName])
          load(depName);
        else
          ensureEvaluated(depName, seen);
      }
    }

    if (entry.evaluated)
      return;

    entry.evaluated = true;
    entry.module.execute.call(global);
  }

  // magical execution function
  var modules = {};
  function load(name) {
    if (modules[name])
      return modules[name];

    var entry = defined[name];

    // first we check if this module has already been defined in the registry
    if (!entry)
      throw "Module " + name + " not present.";

    // recursively ensure that the module and all its 
    // dependencies are linked (with dependency group handling)
    link(name);

    // now handle dependency execution in correct order
    ensureEvaluated(name, []);

    // remove from the registry
    defined[name] = undefined;

    var module = entry.module.exports;

    if (!module || !entry.declarative && module.__esModule !== true)
      module = { 'default': module, __useDefault: true };

    // return the defined module object
    return modules[name] = module;
  };

  return function(mains, declare) {

    var System;
    var System = {
      register: register, 
      get: load, 
      set: function(name, module) {
        modules[name] = module; 
      },
      newModule: function(module) {
        return module;
      },
      global: global 
    };
    System.set('@empty', {});

    declare(System);

    for (var i = 0; i < mains.length; i++)
      load(mains[i]);
  }

})(typeof window != 'undefined' ? window : global)
/* (['mainModule'], function(System) {
  System.register(...);
}); */

(['promo-manager/layout-view/main'], function(System) {


System.register("npm:core-js@0.9.18/library/modules/$.fw", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = function($) {
    $.FW = false;
    $.path = $.core;
    return $;
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:babel-runtime@5.8.24/helpers/class-call-check", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  "use strict";
  exports["default"] = function(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:gl-matrix@2.3.1/src/gl-matrix/common", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var glMatrix = {};
  glMatrix.EPSILON = 0.000001;
  glMatrix.ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;
  glMatrix.RANDOM = Math.random;
  glMatrix.setMatrixArrayType = function(type) {
    GLMAT_ARRAY_TYPE = type;
  };
  var degree = Math.PI / 180;
  glMatrix.toRadian = function(a) {
    return a * degree;
  };
  module.exports = glMatrix;
  global.define = __define;
  return module.exports;
});

System.register("npm:gl-matrix@2.3.1/src/gl-matrix/mat2", ["npm:gl-matrix@2.3.1/src/gl-matrix/common"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var glMatrix = require("npm:gl-matrix@2.3.1/src/gl-matrix/common");
  var mat2 = {};
  mat2.create = function() {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
  };
  mat2.clone = function(a) {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
  };
  mat2.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
  };
  mat2.identity = function(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
  };
  mat2.transpose = function(out, a) {
    if (out === a) {
      var a1 = a[1];
      out[1] = a[2];
      out[2] = a1;
    } else {
      out[0] = a[0];
      out[1] = a[2];
      out[2] = a[1];
      out[3] = a[3];
    }
    return out;
  };
  mat2.invert = function(out, a) {
    var a0 = a[0],
        a1 = a[1],
        a2 = a[2],
        a3 = a[3],
        det = a0 * a3 - a2 * a1;
    if (!det) {
      return null;
    }
    det = 1.0 / det;
    out[0] = a3 * det;
    out[1] = -a1 * det;
    out[2] = -a2 * det;
    out[3] = a0 * det;
    return out;
  };
  mat2.adjoint = function(out, a) {
    var a0 = a[0];
    out[0] = a[3];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] = a0;
    return out;
  };
  mat2.determinant = function(a) {
    return a[0] * a[3] - a[2] * a[1];
  };
  mat2.multiply = function(out, a, b) {
    var a0 = a[0],
        a1 = a[1],
        a2 = a[2],
        a3 = a[3];
    var b0 = b[0],
        b1 = b[1],
        b2 = b[2],
        b3 = b[3];
    out[0] = a0 * b0 + a2 * b1;
    out[1] = a1 * b0 + a3 * b1;
    out[2] = a0 * b2 + a2 * b3;
    out[3] = a1 * b2 + a3 * b3;
    return out;
  };
  mat2.mul = mat2.multiply;
  mat2.rotate = function(out, a, rad) {
    var a0 = a[0],
        a1 = a[1],
        a2 = a[2],
        a3 = a[3],
        s = Math.sin(rad),
        c = Math.cos(rad);
    out[0] = a0 * c + a2 * s;
    out[1] = a1 * c + a3 * s;
    out[2] = a0 * -s + a2 * c;
    out[3] = a1 * -s + a3 * c;
    return out;
  };
  mat2.scale = function(out, a, v) {
    var a0 = a[0],
        a1 = a[1],
        a2 = a[2],
        a3 = a[3],
        v0 = v[0],
        v1 = v[1];
    out[0] = a0 * v0;
    out[1] = a1 * v0;
    out[2] = a2 * v1;
    out[3] = a3 * v1;
    return out;
  };
  mat2.fromRotation = function(out, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad);
    out[0] = c;
    out[1] = s;
    out[2] = -s;
    out[3] = c;
    return out;
  };
  mat2.fromScaling = function(out, v) {
    out[0] = v[0];
    out[1] = 0;
    out[2] = 0;
    out[3] = v[1];
    return out;
  };
  mat2.str = function(a) {
    return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
  };
  mat2.frob = function(a) {
    return (Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2)));
  };
  mat2.LDU = function(L, D, U, a) {
    L[2] = a[2] / a[0];
    U[0] = a[0];
    U[1] = a[1];
    U[3] = a[3] - L[2] * U[1];
    return [L, D, U];
  };
  module.exports = mat2;
  global.define = __define;
  return module.exports;
});

System.register("npm:gl-matrix@2.3.1/src/gl-matrix/mat2d", ["npm:gl-matrix@2.3.1/src/gl-matrix/common"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var glMatrix = require("npm:gl-matrix@2.3.1/src/gl-matrix/common");
  var mat2d = {};
  mat2d.create = function() {
    var out = new glMatrix.ARRAY_TYPE(6);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    out[4] = 0;
    out[5] = 0;
    return out;
  };
  mat2d.clone = function(a) {
    var out = new glMatrix.ARRAY_TYPE(6);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    return out;
  };
  mat2d.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    return out;
  };
  mat2d.identity = function(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    out[4] = 0;
    out[5] = 0;
    return out;
  };
  mat2d.invert = function(out, a) {
    var aa = a[0],
        ab = a[1],
        ac = a[2],
        ad = a[3],
        atx = a[4],
        aty = a[5];
    var det = aa * ad - ab * ac;
    if (!det) {
      return null;
    }
    det = 1.0 / det;
    out[0] = ad * det;
    out[1] = -ab * det;
    out[2] = -ac * det;
    out[3] = aa * det;
    out[4] = (ac * aty - ad * atx) * det;
    out[5] = (ab * atx - aa * aty) * det;
    return out;
  };
  mat2d.determinant = function(a) {
    return a[0] * a[3] - a[1] * a[2];
  };
  mat2d.multiply = function(out, a, b) {
    var a0 = a[0],
        a1 = a[1],
        a2 = a[2],
        a3 = a[3],
        a4 = a[4],
        a5 = a[5],
        b0 = b[0],
        b1 = b[1],
        b2 = b[2],
        b3 = b[3],
        b4 = b[4],
        b5 = b[5];
    out[0] = a0 * b0 + a2 * b1;
    out[1] = a1 * b0 + a3 * b1;
    out[2] = a0 * b2 + a2 * b3;
    out[3] = a1 * b2 + a3 * b3;
    out[4] = a0 * b4 + a2 * b5 + a4;
    out[5] = a1 * b4 + a3 * b5 + a5;
    return out;
  };
  mat2d.mul = mat2d.multiply;
  mat2d.rotate = function(out, a, rad) {
    var a0 = a[0],
        a1 = a[1],
        a2 = a[2],
        a3 = a[3],
        a4 = a[4],
        a5 = a[5],
        s = Math.sin(rad),
        c = Math.cos(rad);
    out[0] = a0 * c + a2 * s;
    out[1] = a1 * c + a3 * s;
    out[2] = a0 * -s + a2 * c;
    out[3] = a1 * -s + a3 * c;
    out[4] = a4;
    out[5] = a5;
    return out;
  };
  mat2d.scale = function(out, a, v) {
    var a0 = a[0],
        a1 = a[1],
        a2 = a[2],
        a3 = a[3],
        a4 = a[4],
        a5 = a[5],
        v0 = v[0],
        v1 = v[1];
    out[0] = a0 * v0;
    out[1] = a1 * v0;
    out[2] = a2 * v1;
    out[3] = a3 * v1;
    out[4] = a4;
    out[5] = a5;
    return out;
  };
  mat2d.translate = function(out, a, v) {
    var a0 = a[0],
        a1 = a[1],
        a2 = a[2],
        a3 = a[3],
        a4 = a[4],
        a5 = a[5],
        v0 = v[0],
        v1 = v[1];
    out[0] = a0;
    out[1] = a1;
    out[2] = a2;
    out[3] = a3;
    out[4] = a0 * v0 + a2 * v1 + a4;
    out[5] = a1 * v0 + a3 * v1 + a5;
    return out;
  };
  mat2d.fromRotation = function(out, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad);
    out[0] = c;
    out[1] = s;
    out[2] = -s;
    out[3] = c;
    out[4] = 0;
    out[5] = 0;
    return out;
  };
  mat2d.fromScaling = function(out, v) {
    out[0] = v[0];
    out[1] = 0;
    out[2] = 0;
    out[3] = v[1];
    out[4] = 0;
    out[5] = 0;
    return out;
  };
  mat2d.fromTranslation = function(out, v) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    out[4] = v[0];
    out[5] = v[1];
    return out;
  };
  mat2d.str = function(a) {
    return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ')';
  };
  mat2d.frob = function(a) {
    return (Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1));
  };
  module.exports = mat2d;
  global.define = __define;
  return module.exports;
});

System.register("npm:gl-matrix@2.3.1/src/gl-matrix/mat3", ["npm:gl-matrix@2.3.1/src/gl-matrix/common"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var glMatrix = require("npm:gl-matrix@2.3.1/src/gl-matrix/common");
  var mat3 = {};
  mat3.create = function() {
    var out = new glMatrix.ARRAY_TYPE(9);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 1;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
  };
  mat3.fromMat4 = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[4];
    out[4] = a[5];
    out[5] = a[6];
    out[6] = a[8];
    out[7] = a[9];
    out[8] = a[10];
    return out;
  };
  mat3.clone = function(a) {
    var out = new glMatrix.ARRAY_TYPE(9);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    return out;
  };
  mat3.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    return out;
  };
  mat3.identity = function(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 1;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
  };
  mat3.transpose = function(out, a) {
    if (out === a) {
      var a01 = a[1],
          a02 = a[2],
          a12 = a[5];
      out[1] = a[3];
      out[2] = a[6];
      out[3] = a01;
      out[5] = a[7];
      out[6] = a02;
      out[7] = a12;
    } else {
      out[0] = a[0];
      out[1] = a[3];
      out[2] = a[6];
      out[3] = a[1];
      out[4] = a[4];
      out[5] = a[7];
      out[6] = a[2];
      out[7] = a[5];
      out[8] = a[8];
    }
    return out;
  };
  mat3.invert = function(out, a) {
    var a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a10 = a[3],
        a11 = a[4],
        a12 = a[5],
        a20 = a[6],
        a21 = a[7],
        a22 = a[8],
        b01 = a22 * a11 - a12 * a21,
        b11 = -a22 * a10 + a12 * a20,
        b21 = a21 * a10 - a11 * a20,
        det = a00 * b01 + a01 * b11 + a02 * b21;
    if (!det) {
      return null;
    }
    det = 1.0 / det;
    out[0] = b01 * det;
    out[1] = (-a22 * a01 + a02 * a21) * det;
    out[2] = (a12 * a01 - a02 * a11) * det;
    out[3] = b11 * det;
    out[4] = (a22 * a00 - a02 * a20) * det;
    out[5] = (-a12 * a00 + a02 * a10) * det;
    out[6] = b21 * det;
    out[7] = (-a21 * a00 + a01 * a20) * det;
    out[8] = (a11 * a00 - a01 * a10) * det;
    return out;
  };
  mat3.adjoint = function(out, a) {
    var a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a10 = a[3],
        a11 = a[4],
        a12 = a[5],
        a20 = a[6],
        a21 = a[7],
        a22 = a[8];
    out[0] = (a11 * a22 - a12 * a21);
    out[1] = (a02 * a21 - a01 * a22);
    out[2] = (a01 * a12 - a02 * a11);
    out[3] = (a12 * a20 - a10 * a22);
    out[4] = (a00 * a22 - a02 * a20);
    out[5] = (a02 * a10 - a00 * a12);
    out[6] = (a10 * a21 - a11 * a20);
    out[7] = (a01 * a20 - a00 * a21);
    out[8] = (a00 * a11 - a01 * a10);
    return out;
  };
  mat3.determinant = function(a) {
    var a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a10 = a[3],
        a11 = a[4],
        a12 = a[5],
        a20 = a[6],
        a21 = a[7],
        a22 = a[8];
    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
  };
  mat3.multiply = function(out, a, b) {
    var a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a10 = a[3],
        a11 = a[4],
        a12 = a[5],
        a20 = a[6],
        a21 = a[7],
        a22 = a[8],
        b00 = b[0],
        b01 = b[1],
        b02 = b[2],
        b10 = b[3],
        b11 = b[4],
        b12 = b[5],
        b20 = b[6],
        b21 = b[7],
        b22 = b[8];
    out[0] = b00 * a00 + b01 * a10 + b02 * a20;
    out[1] = b00 * a01 + b01 * a11 + b02 * a21;
    out[2] = b00 * a02 + b01 * a12 + b02 * a22;
    out[3] = b10 * a00 + b11 * a10 + b12 * a20;
    out[4] = b10 * a01 + b11 * a11 + b12 * a21;
    out[5] = b10 * a02 + b11 * a12 + b12 * a22;
    out[6] = b20 * a00 + b21 * a10 + b22 * a20;
    out[7] = b20 * a01 + b21 * a11 + b22 * a21;
    out[8] = b20 * a02 + b21 * a12 + b22 * a22;
    return out;
  };
  mat3.mul = mat3.multiply;
  mat3.translate = function(out, a, v) {
    var a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a10 = a[3],
        a11 = a[4],
        a12 = a[5],
        a20 = a[6],
        a21 = a[7],
        a22 = a[8],
        x = v[0],
        y = v[1];
    out[0] = a00;
    out[1] = a01;
    out[2] = a02;
    out[3] = a10;
    out[4] = a11;
    out[5] = a12;
    out[6] = x * a00 + y * a10 + a20;
    out[7] = x * a01 + y * a11 + a21;
    out[8] = x * a02 + y * a12 + a22;
    return out;
  };
  mat3.rotate = function(out, a, rad) {
    var a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a10 = a[3],
        a11 = a[4],
        a12 = a[5],
        a20 = a[6],
        a21 = a[7],
        a22 = a[8],
        s = Math.sin(rad),
        c = Math.cos(rad);
    out[0] = c * a00 + s * a10;
    out[1] = c * a01 + s * a11;
    out[2] = c * a02 + s * a12;
    out[3] = c * a10 - s * a00;
    out[4] = c * a11 - s * a01;
    out[5] = c * a12 - s * a02;
    out[6] = a20;
    out[7] = a21;
    out[8] = a22;
    return out;
  };
  mat3.scale = function(out, a, v) {
    var x = v[0],
        y = v[1];
    out[0] = x * a[0];
    out[1] = x * a[1];
    out[2] = x * a[2];
    out[3] = y * a[3];
    out[4] = y * a[4];
    out[5] = y * a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    return out;
  };
  mat3.fromTranslation = function(out, v) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 1;
    out[5] = 0;
    out[6] = v[0];
    out[7] = v[1];
    out[8] = 1;
    return out;
  };
  mat3.fromRotation = function(out, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad);
    out[0] = c;
    out[1] = s;
    out[2] = 0;
    out[3] = -s;
    out[4] = c;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
  };
  mat3.fromScaling = function(out, v) {
    out[0] = v[0];
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = v[1];
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
  };
  mat3.fromMat2d = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = 0;
    out[3] = a[2];
    out[4] = a[3];
    out[5] = 0;
    out[6] = a[4];
    out[7] = a[5];
    out[8] = 1;
    return out;
  };
  mat3.fromQuat = function(out, q) {
    var x = q[0],
        y = q[1],
        z = q[2],
        w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,
        xx = x * x2,
        yx = y * x2,
        yy = y * y2,
        zx = z * x2,
        zy = z * y2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2;
    out[0] = 1 - yy - zz;
    out[3] = yx - wz;
    out[6] = zx + wy;
    out[1] = yx + wz;
    out[4] = 1 - xx - zz;
    out[7] = zy - wx;
    out[2] = zx - wy;
    out[5] = zy + wx;
    out[8] = 1 - xx - yy;
    return out;
  };
  mat3.normalFromMat4 = function(out, a) {
    var a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11],
        a30 = a[12],
        a31 = a[13],
        a32 = a[14],
        a33 = a[15],
        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32,
        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
    if (!det) {
      return null;
    }
    det = 1.0 / det;
    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
    return out;
  };
  mat3.str = function(a) {
    return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';
  };
  mat3.frob = function(a) {
    return (Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)));
  };
  module.exports = mat3;
  global.define = __define;
  return module.exports;
});

System.register("npm:gl-matrix@2.3.1/src/gl-matrix/mat4", ["npm:gl-matrix@2.3.1/src/gl-matrix/common"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var glMatrix = require("npm:gl-matrix@2.3.1/src/gl-matrix/common");
  var mat4 = {};
  mat4.create = function() {
    var out = new glMatrix.ARRAY_TYPE(16);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  };
  mat4.clone = function(a) {
    var out = new glMatrix.ARRAY_TYPE(16);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
  };
  mat4.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
  };
  mat4.identity = function(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  };
  mat4.transpose = function(out, a) {
    if (out === a) {
      var a01 = a[1],
          a02 = a[2],
          a03 = a[3],
          a12 = a[6],
          a13 = a[7],
          a23 = a[11];
      out[1] = a[4];
      out[2] = a[8];
      out[3] = a[12];
      out[4] = a01;
      out[6] = a[9];
      out[7] = a[13];
      out[8] = a02;
      out[9] = a12;
      out[11] = a[14];
      out[12] = a03;
      out[13] = a13;
      out[14] = a23;
    } else {
      out[0] = a[0];
      out[1] = a[4];
      out[2] = a[8];
      out[3] = a[12];
      out[4] = a[1];
      out[5] = a[5];
      out[6] = a[9];
      out[7] = a[13];
      out[8] = a[2];
      out[9] = a[6];
      out[10] = a[10];
      out[11] = a[14];
      out[12] = a[3];
      out[13] = a[7];
      out[14] = a[11];
      out[15] = a[15];
    }
    return out;
  };
  mat4.invert = function(out, a) {
    var a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11],
        a30 = a[12],
        a31 = a[13],
        a32 = a[14],
        a33 = a[15],
        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32,
        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
    if (!det) {
      return null;
    }
    det = 1.0 / det;
    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
    return out;
  };
  mat4.adjoint = function(out, a) {
    var a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11],
        a30 = a[12],
        a31 = a[13],
        a32 = a[14],
        a33 = a[15];
    out[0] = (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));
    out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
    out[2] = (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));
    out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
    out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
    out[5] = (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));
    out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
    out[7] = (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));
    out[8] = (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));
    out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
    out[10] = (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));
    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
    out[13] = (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));
    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
    out[15] = (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));
    return out;
  };
  mat4.determinant = function(a) {
    var a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11],
        a30 = a[12],
        a31 = a[13],
        a32 = a[14],
        a33 = a[15],
        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32;
    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
  };
  mat4.multiply = function(out, a, b) {
    var a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11],
        a30 = a[12],
        a31 = a[13],
        a32 = a[14],
        a33 = a[15];
    var b0 = b[0],
        b1 = b[1],
        b2 = b[2],
        b3 = b[3];
    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    b0 = b[4];
    b1 = b[5];
    b2 = b[6];
    b3 = b[7];
    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    b0 = b[8];
    b1 = b[9];
    b2 = b[10];
    b3 = b[11];
    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    b0 = b[12];
    b1 = b[13];
    b2 = b[14];
    b3 = b[15];
    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    return out;
  };
  mat4.mul = mat4.multiply;
  mat4.translate = function(out, a, v) {
    var x = v[0],
        y = v[1],
        z = v[2],
        a00,
        a01,
        a02,
        a03,
        a10,
        a11,
        a12,
        a13,
        a20,
        a21,
        a22,
        a23;
    if (a === out) {
      out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
      out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
      out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
      out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
    } else {
      a00 = a[0];
      a01 = a[1];
      a02 = a[2];
      a03 = a[3];
      a10 = a[4];
      a11 = a[5];
      a12 = a[6];
      a13 = a[7];
      a20 = a[8];
      a21 = a[9];
      a22 = a[10];
      a23 = a[11];
      out[0] = a00;
      out[1] = a01;
      out[2] = a02;
      out[3] = a03;
      out[4] = a10;
      out[5] = a11;
      out[6] = a12;
      out[7] = a13;
      out[8] = a20;
      out[9] = a21;
      out[10] = a22;
      out[11] = a23;
      out[12] = a00 * x + a10 * y + a20 * z + a[12];
      out[13] = a01 * x + a11 * y + a21 * z + a[13];
      out[14] = a02 * x + a12 * y + a22 * z + a[14];
      out[15] = a03 * x + a13 * y + a23 * z + a[15];
    }
    return out;
  };
  mat4.scale = function(out, a, v) {
    var x = v[0],
        y = v[1],
        z = v[2];
    out[0] = a[0] * x;
    out[1] = a[1] * x;
    out[2] = a[2] * x;
    out[3] = a[3] * x;
    out[4] = a[4] * y;
    out[5] = a[5] * y;
    out[6] = a[6] * y;
    out[7] = a[7] * y;
    out[8] = a[8] * z;
    out[9] = a[9] * z;
    out[10] = a[10] * z;
    out[11] = a[11] * z;
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
  };
  mat4.rotate = function(out, a, rad, axis) {
    var x = axis[0],
        y = axis[1],
        z = axis[2],
        len = Math.sqrt(x * x + y * y + z * z),
        s,
        c,
        t,
        a00,
        a01,
        a02,
        a03,
        a10,
        a11,
        a12,
        a13,
        a20,
        a21,
        a22,
        a23,
        b00,
        b01,
        b02,
        b10,
        b11,
        b12,
        b20,
        b21,
        b22;
    if (Math.abs(len) < glMatrix.EPSILON) {
      return null;
    }
    len = 1 / len;
    x *= len;
    y *= len;
    z *= len;
    s = Math.sin(rad);
    c = Math.cos(rad);
    t = 1 - c;
    a00 = a[0];
    a01 = a[1];
    a02 = a[2];
    a03 = a[3];
    a10 = a[4];
    a11 = a[5];
    a12 = a[6];
    a13 = a[7];
    a20 = a[8];
    a21 = a[9];
    a22 = a[10];
    a23 = a[11];
    b00 = x * x * t + c;
    b01 = y * x * t + z * s;
    b02 = z * x * t - y * s;
    b10 = x * y * t - z * s;
    b11 = y * y * t + c;
    b12 = z * y * t + x * s;
    b20 = x * z * t + y * s;
    b21 = y * z * t - x * s;
    b22 = z * z * t + c;
    out[0] = a00 * b00 + a10 * b01 + a20 * b02;
    out[1] = a01 * b00 + a11 * b01 + a21 * b02;
    out[2] = a02 * b00 + a12 * b01 + a22 * b02;
    out[3] = a03 * b00 + a13 * b01 + a23 * b02;
    out[4] = a00 * b10 + a10 * b11 + a20 * b12;
    out[5] = a01 * b10 + a11 * b11 + a21 * b12;
    out[6] = a02 * b10 + a12 * b11 + a22 * b12;
    out[7] = a03 * b10 + a13 * b11 + a23 * b12;
    out[8] = a00 * b20 + a10 * b21 + a20 * b22;
    out[9] = a01 * b20 + a11 * b21 + a21 * b22;
    out[10] = a02 * b20 + a12 * b21 + a22 * b22;
    out[11] = a03 * b20 + a13 * b21 + a23 * b22;
    if (a !== out) {
      out[12] = a[12];
      out[13] = a[13];
      out[14] = a[14];
      out[15] = a[15];
    }
    return out;
  };
  mat4.rotateX = function(out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11];
    if (a !== out) {
      out[0] = a[0];
      out[1] = a[1];
      out[2] = a[2];
      out[3] = a[3];
      out[12] = a[12];
      out[13] = a[13];
      out[14] = a[14];
      out[15] = a[15];
    }
    out[4] = a10 * c + a20 * s;
    out[5] = a11 * c + a21 * s;
    out[6] = a12 * c + a22 * s;
    out[7] = a13 * c + a23 * s;
    out[8] = a20 * c - a10 * s;
    out[9] = a21 * c - a11 * s;
    out[10] = a22 * c - a12 * s;
    out[11] = a23 * c - a13 * s;
    return out;
  };
  mat4.rotateY = function(out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11];
    if (a !== out) {
      out[4] = a[4];
      out[5] = a[5];
      out[6] = a[6];
      out[7] = a[7];
      out[12] = a[12];
      out[13] = a[13];
      out[14] = a[14];
      out[15] = a[15];
    }
    out[0] = a00 * c - a20 * s;
    out[1] = a01 * c - a21 * s;
    out[2] = a02 * c - a22 * s;
    out[3] = a03 * c - a23 * s;
    out[8] = a00 * s + a20 * c;
    out[9] = a01 * s + a21 * c;
    out[10] = a02 * s + a22 * c;
    out[11] = a03 * s + a23 * c;
    return out;
  };
  mat4.rotateZ = function(out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7];
    if (a !== out) {
      out[8] = a[8];
      out[9] = a[9];
      out[10] = a[10];
      out[11] = a[11];
      out[12] = a[12];
      out[13] = a[13];
      out[14] = a[14];
      out[15] = a[15];
    }
    out[0] = a00 * c + a10 * s;
    out[1] = a01 * c + a11 * s;
    out[2] = a02 * c + a12 * s;
    out[3] = a03 * c + a13 * s;
    out[4] = a10 * c - a00 * s;
    out[5] = a11 * c - a01 * s;
    out[6] = a12 * c - a02 * s;
    out[7] = a13 * c - a03 * s;
    return out;
  };
  mat4.fromTranslation = function(out, v) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;
    return out;
  };
  mat4.fromScaling = function(out, v) {
    out[0] = v[0];
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = v[1];
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = v[2];
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  };
  mat4.fromRotation = function(out, rad, axis) {
    var x = axis[0],
        y = axis[1],
        z = axis[2],
        len = Math.sqrt(x * x + y * y + z * z),
        s,
        c,
        t;
    if (Math.abs(len) < glMatrix.EPSILON) {
      return null;
    }
    len = 1 / len;
    x *= len;
    y *= len;
    z *= len;
    s = Math.sin(rad);
    c = Math.cos(rad);
    t = 1 - c;
    out[0] = x * x * t + c;
    out[1] = y * x * t + z * s;
    out[2] = z * x * t - y * s;
    out[3] = 0;
    out[4] = x * y * t - z * s;
    out[5] = y * y * t + c;
    out[6] = z * y * t + x * s;
    out[7] = 0;
    out[8] = x * z * t + y * s;
    out[9] = y * z * t - x * s;
    out[10] = z * z * t + c;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  };
  mat4.fromXRotation = function(out, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = c;
    out[6] = s;
    out[7] = 0;
    out[8] = 0;
    out[9] = -s;
    out[10] = c;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  };
  mat4.fromYRotation = function(out, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad);
    out[0] = c;
    out[1] = 0;
    out[2] = -s;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = s;
    out[9] = 0;
    out[10] = c;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  };
  mat4.fromZRotation = function(out, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad);
    out[0] = c;
    out[1] = s;
    out[2] = 0;
    out[3] = 0;
    out[4] = -s;
    out[5] = c;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  };
  mat4.fromRotationTranslation = function(out, q, v) {
    var x = q[0],
        y = q[1],
        z = q[2],
        w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,
        xx = x * x2,
        xy = x * y2,
        xz = x * z2,
        yy = y * y2,
        yz = y * z2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2;
    out[0] = 1 - (yy + zz);
    out[1] = xy + wz;
    out[2] = xz - wy;
    out[3] = 0;
    out[4] = xy - wz;
    out[5] = 1 - (xx + zz);
    out[6] = yz + wx;
    out[7] = 0;
    out[8] = xz + wy;
    out[9] = yz - wx;
    out[10] = 1 - (xx + yy);
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;
    return out;
  };
  mat4.fromRotationTranslationScale = function(out, q, v, s) {
    var x = q[0],
        y = q[1],
        z = q[2],
        w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,
        xx = x * x2,
        xy = x * y2,
        xz = x * z2,
        yy = y * y2,
        yz = y * z2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2,
        sx = s[0],
        sy = s[1],
        sz = s[2];
    out[0] = (1 - (yy + zz)) * sx;
    out[1] = (xy + wz) * sx;
    out[2] = (xz - wy) * sx;
    out[3] = 0;
    out[4] = (xy - wz) * sy;
    out[5] = (1 - (xx + zz)) * sy;
    out[6] = (yz + wx) * sy;
    out[7] = 0;
    out[8] = (xz + wy) * sz;
    out[9] = (yz - wx) * sz;
    out[10] = (1 - (xx + yy)) * sz;
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;
    return out;
  };
  mat4.fromRotationTranslationScaleOrigin = function(out, q, v, s, o) {
    var x = q[0],
        y = q[1],
        z = q[2],
        w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,
        xx = x * x2,
        xy = x * y2,
        xz = x * z2,
        yy = y * y2,
        yz = y * z2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2,
        sx = s[0],
        sy = s[1],
        sz = s[2],
        ox = o[0],
        oy = o[1],
        oz = o[2];
    out[0] = (1 - (yy + zz)) * sx;
    out[1] = (xy + wz) * sx;
    out[2] = (xz - wy) * sx;
    out[3] = 0;
    out[4] = (xy - wz) * sy;
    out[5] = (1 - (xx + zz)) * sy;
    out[6] = (yz + wx) * sy;
    out[7] = 0;
    out[8] = (xz + wy) * sz;
    out[9] = (yz - wx) * sz;
    out[10] = (1 - (xx + yy)) * sz;
    out[11] = 0;
    out[12] = v[0] + ox - (out[0] * ox + out[4] * oy + out[8] * oz);
    out[13] = v[1] + oy - (out[1] * ox + out[5] * oy + out[9] * oz);
    out[14] = v[2] + oz - (out[2] * ox + out[6] * oy + out[10] * oz);
    out[15] = 1;
    return out;
  };
  mat4.fromQuat = function(out, q) {
    var x = q[0],
        y = q[1],
        z = q[2],
        w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,
        xx = x * x2,
        yx = y * x2,
        yy = y * y2,
        zx = z * x2,
        zy = z * y2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2;
    out[0] = 1 - yy - zz;
    out[1] = yx + wz;
    out[2] = zx - wy;
    out[3] = 0;
    out[4] = yx - wz;
    out[5] = 1 - xx - zz;
    out[6] = zy + wx;
    out[7] = 0;
    out[8] = zx + wy;
    out[9] = zy - wx;
    out[10] = 1 - xx - yy;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  };
  mat4.frustum = function(out, left, right, bottom, top, near, far) {
    var rl = 1 / (right - left),
        tb = 1 / (top - bottom),
        nf = 1 / (near - far);
    out[0] = (near * 2) * rl;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = (near * 2) * tb;
    out[6] = 0;
    out[7] = 0;
    out[8] = (right + left) * rl;
    out[9] = (top + bottom) * tb;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = (far * near * 2) * nf;
    out[15] = 0;
    return out;
  };
  mat4.perspective = function(out, fovy, aspect, near, far) {
    var f = 1.0 / Math.tan(fovy / 2),
        nf = 1 / (near - far);
    out[0] = f / aspect;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = f;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = (2 * far * near) * nf;
    out[15] = 0;
    return out;
  };
  mat4.perspectiveFromFieldOfView = function(out, fov, near, far) {
    var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0),
        downTan = Math.tan(fov.downDegrees * Math.PI / 180.0),
        leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0),
        rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0),
        xScale = 2.0 / (leftTan + rightTan),
        yScale = 2.0 / (upTan + downTan);
    out[0] = xScale;
    out[1] = 0.0;
    out[2] = 0.0;
    out[3] = 0.0;
    out[4] = 0.0;
    out[5] = yScale;
    out[6] = 0.0;
    out[7] = 0.0;
    out[8] = -((leftTan - rightTan) * xScale * 0.5);
    out[9] = ((upTan - downTan) * yScale * 0.5);
    out[10] = far / (near - far);
    out[11] = -1.0;
    out[12] = 0.0;
    out[13] = 0.0;
    out[14] = (far * near) / (near - far);
    out[15] = 0.0;
    return out;
  };
  mat4.ortho = function(out, left, right, bottom, top, near, far) {
    var lr = 1 / (left - right),
        bt = 1 / (bottom - top),
        nf = 1 / (near - far);
    out[0] = -2 * lr;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = -2 * bt;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 2 * nf;
    out[11] = 0;
    out[12] = (left + right) * lr;
    out[13] = (top + bottom) * bt;
    out[14] = (far + near) * nf;
    out[15] = 1;
    return out;
  };
  mat4.lookAt = function(out, eye, center, up) {
    var x0,
        x1,
        x2,
        y0,
        y1,
        y2,
        z0,
        z1,
        z2,
        len,
        eyex = eye[0],
        eyey = eye[1],
        eyez = eye[2],
        upx = up[0],
        upy = up[1],
        upz = up[2],
        centerx = center[0],
        centery = center[1],
        centerz = center[2];
    if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {
      return mat4.identity(out);
    }
    z0 = eyex - centerx;
    z1 = eyey - centery;
    z2 = eyez - centerz;
    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
    z0 *= len;
    z1 *= len;
    z2 *= len;
    x0 = upy * z2 - upz * z1;
    x1 = upz * z0 - upx * z2;
    x2 = upx * z1 - upy * z0;
    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
    if (!len) {
      x0 = 0;
      x1 = 0;
      x2 = 0;
    } else {
      len = 1 / len;
      x0 *= len;
      x1 *= len;
      x2 *= len;
    }
    y0 = z1 * x2 - z2 * x1;
    y1 = z2 * x0 - z0 * x2;
    y2 = z0 * x1 - z1 * x0;
    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
    if (!len) {
      y0 = 0;
      y1 = 0;
      y2 = 0;
    } else {
      len = 1 / len;
      y0 *= len;
      y1 *= len;
      y2 *= len;
    }
    out[0] = x0;
    out[1] = y0;
    out[2] = z0;
    out[3] = 0;
    out[4] = x1;
    out[5] = y1;
    out[6] = z1;
    out[7] = 0;
    out[8] = x2;
    out[9] = y2;
    out[10] = z2;
    out[11] = 0;
    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
    out[15] = 1;
    return out;
  };
  mat4.str = function(a) {
    return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';
  };
  mat4.frob = function(a) {
    return (Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2)));
  };
  module.exports = mat4;
  global.define = __define;
  return module.exports;
});

System.register("npm:gl-matrix@2.3.1/src/gl-matrix/vec3", ["npm:gl-matrix@2.3.1/src/gl-matrix/common"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var glMatrix = require("npm:gl-matrix@2.3.1/src/gl-matrix/common");
  var vec3 = {};
  vec3.create = function() {
    var out = new glMatrix.ARRAY_TYPE(3);
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    return out;
  };
  vec3.clone = function(a) {
    var out = new glMatrix.ARRAY_TYPE(3);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    return out;
  };
  vec3.fromValues = function(x, y, z) {
    var out = new glMatrix.ARRAY_TYPE(3);
    out[0] = x;
    out[1] = y;
    out[2] = z;
    return out;
  };
  vec3.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    return out;
  };
  vec3.set = function(out, x, y, z) {
    out[0] = x;
    out[1] = y;
    out[2] = z;
    return out;
  };
  vec3.add = function(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    return out;
  };
  vec3.subtract = function(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    return out;
  };
  vec3.sub = vec3.subtract;
  vec3.multiply = function(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    out[2] = a[2] * b[2];
    return out;
  };
  vec3.mul = vec3.multiply;
  vec3.divide = function(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    out[2] = a[2] / b[2];
    return out;
  };
  vec3.div = vec3.divide;
  vec3.min = function(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    out[2] = Math.min(a[2], b[2]);
    return out;
  };
  vec3.max = function(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    out[2] = Math.max(a[2], b[2]);
    return out;
  };
  vec3.scale = function(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    return out;
  };
  vec3.scaleAndAdd = function(out, a, b, scale) {
    out[0] = a[0] + (b[0] * scale);
    out[1] = a[1] + (b[1] * scale);
    out[2] = a[2] + (b[2] * scale);
    return out;
  };
  vec3.distance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1],
        z = b[2] - a[2];
    return Math.sqrt(x * x + y * y + z * z);
  };
  vec3.dist = vec3.distance;
  vec3.squaredDistance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1],
        z = b[2] - a[2];
    return x * x + y * y + z * z;
  };
  vec3.sqrDist = vec3.squaredDistance;
  vec3.length = function(a) {
    var x = a[0],
        y = a[1],
        z = a[2];
    return Math.sqrt(x * x + y * y + z * z);
  };
  vec3.len = vec3.length;
  vec3.squaredLength = function(a) {
    var x = a[0],
        y = a[1],
        z = a[2];
    return x * x + y * y + z * z;
  };
  vec3.sqrLen = vec3.squaredLength;
  vec3.negate = function(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    return out;
  };
  vec3.inverse = function(out, a) {
    out[0] = 1.0 / a[0];
    out[1] = 1.0 / a[1];
    out[2] = 1.0 / a[2];
    return out;
  };
  vec3.normalize = function(out, a) {
    var x = a[0],
        y = a[1],
        z = a[2];
    var len = x * x + y * y + z * z;
    if (len > 0) {
      len = 1 / Math.sqrt(len);
      out[0] = a[0] * len;
      out[1] = a[1] * len;
      out[2] = a[2] * len;
    }
    return out;
  };
  vec3.dot = function(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
  };
  vec3.cross = function(out, a, b) {
    var ax = a[0],
        ay = a[1],
        az = a[2],
        bx = b[0],
        by = b[1],
        bz = b[2];
    out[0] = ay * bz - az * by;
    out[1] = az * bx - ax * bz;
    out[2] = ax * by - ay * bx;
    return out;
  };
  vec3.lerp = function(out, a, b, t) {
    var ax = a[0],
        ay = a[1],
        az = a[2];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    out[2] = az + t * (b[2] - az);
    return out;
  };
  vec3.hermite = function(out, a, b, c, d, t) {
    var factorTimes2 = t * t,
        factor1 = factorTimes2 * (2 * t - 3) + 1,
        factor2 = factorTimes2 * (t - 2) + t,
        factor3 = factorTimes2 * (t - 1),
        factor4 = factorTimes2 * (3 - 2 * t);
    out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
    out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
    out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
    return out;
  };
  vec3.bezier = function(out, a, b, c, d, t) {
    var inverseFactor = 1 - t,
        inverseFactorTimesTwo = inverseFactor * inverseFactor,
        factorTimes2 = t * t,
        factor1 = inverseFactorTimesTwo * inverseFactor,
        factor2 = 3 * t * inverseFactorTimesTwo,
        factor3 = 3 * factorTimes2 * inverseFactor,
        factor4 = factorTimes2 * t;
    out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
    out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
    out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
    return out;
  };
  vec3.random = function(out, scale) {
    scale = scale || 1.0;
    var r = glMatrix.RANDOM() * 2.0 * Math.PI;
    var z = (glMatrix.RANDOM() * 2.0) - 1.0;
    var zScale = Math.sqrt(1.0 - z * z) * scale;
    out[0] = Math.cos(r) * zScale;
    out[1] = Math.sin(r) * zScale;
    out[2] = z * scale;
    return out;
  };
  vec3.transformMat4 = function(out, a, m) {
    var x = a[0],
        y = a[1],
        z = a[2],
        w = m[3] * x + m[7] * y + m[11] * z + m[15];
    w = w || 1.0;
    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
    return out;
  };
  vec3.transformMat3 = function(out, a, m) {
    var x = a[0],
        y = a[1],
        z = a[2];
    out[0] = x * m[0] + y * m[3] + z * m[6];
    out[1] = x * m[1] + y * m[4] + z * m[7];
    out[2] = x * m[2] + y * m[5] + z * m[8];
    return out;
  };
  vec3.transformQuat = function(out, a, q) {
    var x = a[0],
        y = a[1],
        z = a[2],
        qx = q[0],
        qy = q[1],
        qz = q[2],
        qw = q[3],
        ix = qw * x + qy * z - qz * y,
        iy = qw * y + qz * x - qx * z,
        iz = qw * z + qx * y - qy * x,
        iw = -qx * x - qy * y - qz * z;
    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
    return out;
  };
  vec3.rotateX = function(out, a, b, c) {
    var p = [],
        r = [];
    p[0] = a[0] - b[0];
    p[1] = a[1] - b[1];
    p[2] = a[2] - b[2];
    r[0] = p[0];
    r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);
    r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c);
    out[0] = r[0] + b[0];
    out[1] = r[1] + b[1];
    out[2] = r[2] + b[2];
    return out;
  };
  vec3.rotateY = function(out, a, b, c) {
    var p = [],
        r = [];
    p[0] = a[0] - b[0];
    p[1] = a[1] - b[1];
    p[2] = a[2] - b[2];
    r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);
    r[1] = p[1];
    r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c);
    out[0] = r[0] + b[0];
    out[1] = r[1] + b[1];
    out[2] = r[2] + b[2];
    return out;
  };
  vec3.rotateZ = function(out, a, b, c) {
    var p = [],
        r = [];
    p[0] = a[0] - b[0];
    p[1] = a[1] - b[1];
    p[2] = a[2] - b[2];
    r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);
    r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);
    r[2] = p[2];
    out[0] = r[0] + b[0];
    out[1] = r[1] + b[1];
    out[2] = r[2] + b[2];
    return out;
  };
  vec3.forEach = (function() {
    var vec = vec3.create();
    return function(a, stride, offset, count, fn, arg) {
      var i,
          l;
      if (!stride) {
        stride = 3;
      }
      if (!offset) {
        offset = 0;
      }
      if (count) {
        l = Math.min((count * stride) + offset, a.length);
      } else {
        l = a.length;
      }
      for (i = offset; i < l; i += stride) {
        vec[0] = a[i];
        vec[1] = a[i + 1];
        vec[2] = a[i + 2];
        fn(vec, vec, arg);
        a[i] = vec[0];
        a[i + 1] = vec[1];
        a[i + 2] = vec[2];
      }
      return a;
    };
  })();
  vec3.angle = function(a, b) {
    var tempA = vec3.fromValues(a[0], a[1], a[2]);
    var tempB = vec3.fromValues(b[0], b[1], b[2]);
    vec3.normalize(tempA, tempA);
    vec3.normalize(tempB, tempB);
    var cosine = vec3.dot(tempA, tempB);
    if (cosine > 1.0) {
      return 0;
    } else {
      return Math.acos(cosine);
    }
  };
  vec3.str = function(a) {
    return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';
  };
  module.exports = vec3;
  global.define = __define;
  return module.exports;
});

System.register("npm:gl-matrix@2.3.1/src/gl-matrix/vec4", ["npm:gl-matrix@2.3.1/src/gl-matrix/common"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var glMatrix = require("npm:gl-matrix@2.3.1/src/gl-matrix/common");
  var vec4 = {};
  vec4.create = function() {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    return out;
  };
  vec4.clone = function(a) {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
  };
  vec4.fromValues = function(x, y, z, w) {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = w;
    return out;
  };
  vec4.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
  };
  vec4.set = function(out, x, y, z, w) {
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = w;
    return out;
  };
  vec4.add = function(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    return out;
  };
  vec4.subtract = function(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    out[3] = a[3] - b[3];
    return out;
  };
  vec4.sub = vec4.subtract;
  vec4.multiply = function(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    out[2] = a[2] * b[2];
    out[3] = a[3] * b[3];
    return out;
  };
  vec4.mul = vec4.multiply;
  vec4.divide = function(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    out[2] = a[2] / b[2];
    out[3] = a[3] / b[3];
    return out;
  };
  vec4.div = vec4.divide;
  vec4.min = function(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    out[2] = Math.min(a[2], b[2]);
    out[3] = Math.min(a[3], b[3]);
    return out;
  };
  vec4.max = function(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    out[2] = Math.max(a[2], b[2]);
    out[3] = Math.max(a[3], b[3]);
    return out;
  };
  vec4.scale = function(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    return out;
  };
  vec4.scaleAndAdd = function(out, a, b, scale) {
    out[0] = a[0] + (b[0] * scale);
    out[1] = a[1] + (b[1] * scale);
    out[2] = a[2] + (b[2] * scale);
    out[3] = a[3] + (b[3] * scale);
    return out;
  };
  vec4.distance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1],
        z = b[2] - a[2],
        w = b[3] - a[3];
    return Math.sqrt(x * x + y * y + z * z + w * w);
  };
  vec4.dist = vec4.distance;
  vec4.squaredDistance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1],
        z = b[2] - a[2],
        w = b[3] - a[3];
    return x * x + y * y + z * z + w * w;
  };
  vec4.sqrDist = vec4.squaredDistance;
  vec4.length = function(a) {
    var x = a[0],
        y = a[1],
        z = a[2],
        w = a[3];
    return Math.sqrt(x * x + y * y + z * z + w * w);
  };
  vec4.len = vec4.length;
  vec4.squaredLength = function(a) {
    var x = a[0],
        y = a[1],
        z = a[2],
        w = a[3];
    return x * x + y * y + z * z + w * w;
  };
  vec4.sqrLen = vec4.squaredLength;
  vec4.negate = function(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] = -a[3];
    return out;
  };
  vec4.inverse = function(out, a) {
    out[0] = 1.0 / a[0];
    out[1] = 1.0 / a[1];
    out[2] = 1.0 / a[2];
    out[3] = 1.0 / a[3];
    return out;
  };
  vec4.normalize = function(out, a) {
    var x = a[0],
        y = a[1],
        z = a[2],
        w = a[3];
    var len = x * x + y * y + z * z + w * w;
    if (len > 0) {
      len = 1 / Math.sqrt(len);
      out[0] = x * len;
      out[1] = y * len;
      out[2] = z * len;
      out[3] = w * len;
    }
    return out;
  };
  vec4.dot = function(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
  };
  vec4.lerp = function(out, a, b, t) {
    var ax = a[0],
        ay = a[1],
        az = a[2],
        aw = a[3];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    out[2] = az + t * (b[2] - az);
    out[3] = aw + t * (b[3] - aw);
    return out;
  };
  vec4.random = function(out, scale) {
    scale = scale || 1.0;
    out[0] = glMatrix.RANDOM();
    out[1] = glMatrix.RANDOM();
    out[2] = glMatrix.RANDOM();
    out[3] = glMatrix.RANDOM();
    vec4.normalize(out, out);
    vec4.scale(out, out, scale);
    return out;
  };
  vec4.transformMat4 = function(out, a, m) {
    var x = a[0],
        y = a[1],
        z = a[2],
        w = a[3];
    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
    return out;
  };
  vec4.transformQuat = function(out, a, q) {
    var x = a[0],
        y = a[1],
        z = a[2],
        qx = q[0],
        qy = q[1],
        qz = q[2],
        qw = q[3],
        ix = qw * x + qy * z - qz * y,
        iy = qw * y + qz * x - qx * z,
        iz = qw * z + qx * y - qy * x,
        iw = -qx * x - qy * y - qz * z;
    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
    out[3] = a[3];
    return out;
  };
  vec4.forEach = (function() {
    var vec = vec4.create();
    return function(a, stride, offset, count, fn, arg) {
      var i,
          l;
      if (!stride) {
        stride = 4;
      }
      if (!offset) {
        offset = 0;
      }
      if (count) {
        l = Math.min((count * stride) + offset, a.length);
      } else {
        l = a.length;
      }
      for (i = offset; i < l; i += stride) {
        vec[0] = a[i];
        vec[1] = a[i + 1];
        vec[2] = a[i + 2];
        vec[3] = a[i + 3];
        fn(vec, vec, arg);
        a[i] = vec[0];
        a[i + 1] = vec[1];
        a[i + 2] = vec[2];
        a[i + 3] = vec[3];
      }
      return a;
    };
  })();
  vec4.str = function(a) {
    return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
  };
  module.exports = vec4;
  global.define = __define;
  return module.exports;
});

System.register("npm:gl-matrix@2.3.1/src/gl-matrix/vec2", ["npm:gl-matrix@2.3.1/src/gl-matrix/common"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var glMatrix = require("npm:gl-matrix@2.3.1/src/gl-matrix/common");
  var vec2 = {};
  vec2.create = function() {
    var out = new glMatrix.ARRAY_TYPE(2);
    out[0] = 0;
    out[1] = 0;
    return out;
  };
  vec2.clone = function(a) {
    var out = new glMatrix.ARRAY_TYPE(2);
    out[0] = a[0];
    out[1] = a[1];
    return out;
  };
  vec2.fromValues = function(x, y) {
    var out = new glMatrix.ARRAY_TYPE(2);
    out[0] = x;
    out[1] = y;
    return out;
  };
  vec2.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    return out;
  };
  vec2.set = function(out, x, y) {
    out[0] = x;
    out[1] = y;
    return out;
  };
  vec2.add = function(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    return out;
  };
  vec2.subtract = function(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    return out;
  };
  vec2.sub = vec2.subtract;
  vec2.multiply = function(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    return out;
  };
  vec2.mul = vec2.multiply;
  vec2.divide = function(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    return out;
  };
  vec2.div = vec2.divide;
  vec2.min = function(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    return out;
  };
  vec2.max = function(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    return out;
  };
  vec2.scale = function(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    return out;
  };
  vec2.scaleAndAdd = function(out, a, b, scale) {
    out[0] = a[0] + (b[0] * scale);
    out[1] = a[1] + (b[1] * scale);
    return out;
  };
  vec2.distance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1];
    return Math.sqrt(x * x + y * y);
  };
  vec2.dist = vec2.distance;
  vec2.squaredDistance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1];
    return x * x + y * y;
  };
  vec2.sqrDist = vec2.squaredDistance;
  vec2.length = function(a) {
    var x = a[0],
        y = a[1];
    return Math.sqrt(x * x + y * y);
  };
  vec2.len = vec2.length;
  vec2.squaredLength = function(a) {
    var x = a[0],
        y = a[1];
    return x * x + y * y;
  };
  vec2.sqrLen = vec2.squaredLength;
  vec2.negate = function(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    return out;
  };
  vec2.inverse = function(out, a) {
    out[0] = 1.0 / a[0];
    out[1] = 1.0 / a[1];
    return out;
  };
  vec2.normalize = function(out, a) {
    var x = a[0],
        y = a[1];
    var len = x * x + y * y;
    if (len > 0) {
      len = 1 / Math.sqrt(len);
      out[0] = a[0] * len;
      out[1] = a[1] * len;
    }
    return out;
  };
  vec2.dot = function(a, b) {
    return a[0] * b[0] + a[1] * b[1];
  };
  vec2.cross = function(out, a, b) {
    var z = a[0] * b[1] - a[1] * b[0];
    out[0] = out[1] = 0;
    out[2] = z;
    return out;
  };
  vec2.lerp = function(out, a, b, t) {
    var ax = a[0],
        ay = a[1];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    return out;
  };
  vec2.random = function(out, scale) {
    scale = scale || 1.0;
    var r = glMatrix.RANDOM() * 2.0 * Math.PI;
    out[0] = Math.cos(r) * scale;
    out[1] = Math.sin(r) * scale;
    return out;
  };
  vec2.transformMat2 = function(out, a, m) {
    var x = a[0],
        y = a[1];
    out[0] = m[0] * x + m[2] * y;
    out[1] = m[1] * x + m[3] * y;
    return out;
  };
  vec2.transformMat2d = function(out, a, m) {
    var x = a[0],
        y = a[1];
    out[0] = m[0] * x + m[2] * y + m[4];
    out[1] = m[1] * x + m[3] * y + m[5];
    return out;
  };
  vec2.transformMat3 = function(out, a, m) {
    var x = a[0],
        y = a[1];
    out[0] = m[0] * x + m[3] * y + m[6];
    out[1] = m[1] * x + m[4] * y + m[7];
    return out;
  };
  vec2.transformMat4 = function(out, a, m) {
    var x = a[0],
        y = a[1];
    out[0] = m[0] * x + m[4] * y + m[12];
    out[1] = m[1] * x + m[5] * y + m[13];
    return out;
  };
  vec2.forEach = (function() {
    var vec = vec2.create();
    return function(a, stride, offset, count, fn, arg) {
      var i,
          l;
      if (!stride) {
        stride = 2;
      }
      if (!offset) {
        offset = 0;
      }
      if (count) {
        l = Math.min((count * stride) + offset, a.length);
      } else {
        l = a.length;
      }
      for (i = offset; i < l; i += stride) {
        vec[0] = a[i];
        vec[1] = a[i + 1];
        fn(vec, vec, arg);
        a[i] = vec[0];
        a[i + 1] = vec[1];
      }
      return a;
    };
  })();
  vec2.str = function(a) {
    return 'vec2(' + a[0] + ', ' + a[1] + ')';
  };
  module.exports = vec2;
  global.define = __define;
  return module.exports;
});

(function() {
function define(){};  define.amd = {};
(function(root, factory) {
  'use strict';
  if (typeof define === 'function' && define.amd) {
    System.register("github:andris9/simpleStorage@0.1.3/simpleStorage", [], false, typeof factory == "function" ? factory : function() {
      return factory;
    });
  } else {
    root.simpleStorage = factory();
  }
}(this, function() {
  'use strict';
  var VERSION = '0.1.3',
      _storage = false,
      _storage_size = 0,
      _storage_available = false,
      _ttl_timeout = null;
  function _init() {
    window.localStorage.setItem('__simpleStorageInitTest', 'tmpval');
    window.localStorage.removeItem('__simpleStorageInitTest');
    _load_storage();
    _handleTTL();
    _setupUpdateObserver();
    if ('addEventListener' in window) {
      window.addEventListener('pageshow', function(event) {
        if (event.persisted) {
          _reloadData();
        }
      }, false);
    }
    _storage_available = true;
  }
  function _setupUpdateObserver() {
    if ('addEventListener' in window) {
      window.addEventListener('storage', _reloadData, false);
    } else {
      document.attachEvent('onstorage', _reloadData);
    }
  }
  function _reloadData() {
    try {
      _load_storage();
    } catch (E) {
      _storage_available = false;
      return ;
    }
    _handleTTL();
  }
  function _load_storage() {
    var source = localStorage.getItem('simpleStorage');
    try {
      _storage = JSON.parse(source) || {};
    } catch (E) {
      _storage = {};
    }
    _storage_size = _get_storage_size();
  }
  function _save() {
    try {
      localStorage.setItem('simpleStorage', JSON.stringify(_storage));
      _storage_size = _get_storage_size();
    } catch (E) {
      return E;
    }
    return true;
  }
  function _get_storage_size() {
    var source = localStorage.getItem('simpleStorage');
    return source ? String(source).length : 0;
  }
  function _handleTTL() {
    var curtime,
        i,
        len,
        expire,
        keys,
        nextExpire = Infinity,
        expiredKeysCount = 0;
    clearTimeout(_ttl_timeout);
    if (!_storage || !_storage.__simpleStorage_meta || !_storage.__simpleStorage_meta.TTL) {
      return ;
    }
    curtime = +new Date();
    keys = _storage.__simpleStorage_meta.TTL.keys || [];
    expire = _storage.__simpleStorage_meta.TTL.expire || {};
    for (i = 0, len = keys.length; i < len; i++) {
      if (expire[keys[i]] <= curtime) {
        expiredKeysCount++;
        delete _storage[keys[i]];
        delete expire[keys[i]];
      } else {
        if (expire[keys[i]] < nextExpire) {
          nextExpire = expire[keys[i]];
        }
        break;
      }
    }
    if (nextExpire != Infinity) {
      _ttl_timeout = setTimeout(_handleTTL, Math.min(nextExpire - curtime, 0x7FFFFFFF));
    }
    if (expiredKeysCount) {
      keys.splice(0, expiredKeysCount);
      _cleanMetaObject();
      _save();
    }
  }
  function _setTTL(key, ttl) {
    var curtime = +new Date(),
        i,
        len,
        added = false;
    ttl = Number(ttl) || 0;
    if (ttl !== 0) {
      if (_storage.hasOwnProperty(key)) {
        if (!_storage.__simpleStorage_meta) {
          _storage.__simpleStorage_meta = {};
        }
        if (!_storage.__simpleStorage_meta.TTL) {
          _storage.__simpleStorage_meta.TTL = {
            expire: {},
            keys: []
          };
        }
        _storage.__simpleStorage_meta.TTL.expire[key] = curtime + ttl;
        if (_storage.__simpleStorage_meta.TTL.expire.hasOwnProperty(key)) {
          for (i = 0, len = _storage.__simpleStorage_meta.TTL.keys.length; i < len; i++) {
            if (_storage.__simpleStorage_meta.TTL.keys[i] == key) {
              _storage.__simpleStorage_meta.TTL.keys.splice(i);
            }
          }
        }
        for (i = 0, len = _storage.__simpleStorage_meta.TTL.keys.length; i < len; i++) {
          if (_storage.__simpleStorage_meta.TTL.expire[_storage.__simpleStorage_meta.TTL.keys[i]] > (curtime + ttl)) {
            _storage.__simpleStorage_meta.TTL.keys.splice(i, 0, key);
            added = true;
            break;
          }
        }
        if (!added) {
          _storage.__simpleStorage_meta.TTL.keys.push(key);
        }
      } else {
        return false;
      }
    } else {
      if (_storage && _storage.__simpleStorage_meta && _storage.__simpleStorage_meta.TTL) {
        if (_storage.__simpleStorage_meta.TTL.expire.hasOwnProperty(key)) {
          delete _storage.__simpleStorage_meta.TTL.expire[key];
          for (i = 0, len = _storage.__simpleStorage_meta.TTL.keys.length; i < len; i++) {
            if (_storage.__simpleStorage_meta.TTL.keys[i] == key) {
              _storage.__simpleStorage_meta.TTL.keys.splice(i, 1);
              break;
            }
          }
        }
        _cleanMetaObject();
      }
    }
    clearTimeout(_ttl_timeout);
    if (_storage && _storage.__simpleStorage_meta && _storage.__simpleStorage_meta.TTL && _storage.__simpleStorage_meta.TTL.keys.length) {
      _ttl_timeout = setTimeout(_handleTTL, Math.min(Math.max(_storage.__simpleStorage_meta.TTL.expire[_storage.__simpleStorage_meta.TTL.keys[0]] - curtime, 0), 0x7FFFFFFF));
    }
    return true;
  }
  function _cleanMetaObject() {
    var updated = false,
        hasProperties = false,
        i;
    if (!_storage || !_storage.__simpleStorage_meta) {
      return updated;
    }
    if (_storage.__simpleStorage_meta.TTL && !_storage.__simpleStorage_meta.TTL.keys.length) {
      delete _storage.__simpleStorage_meta.TTL;
      updated = true;
    }
    for (i in _storage.__simpleStorage_meta) {
      if (_storage.__simpleStorage_meta.hasOwnProperty(i)) {
        hasProperties = true;
        break;
      }
    }
    if (!hasProperties) {
      delete _storage.__simpleStorage_meta;
      updated = true;
    }
    return updated;
  }
  try {
    _init();
  } catch (E) {}
  return {
    version: VERSION,
    canUse: function() {
      return !!_storage_available;
    },
    set: function(key, value, options) {
      if (key == '__simpleStorage_meta') {
        return false;
      }
      if (!_storage) {
        return false;
      }
      if (typeof value == 'undefined') {
        return this.deleteKey(key);
      }
      options = options || {};
      try {
        value = JSON.parse(JSON.stringify(value));
      } catch (E) {
        return E;
      }
      _storage[key] = value;
      _setTTL(key, options.TTL || 0);
      return _save();
    },
    get: function(key) {
      if (!_storage) {
        return false;
      }
      if (_storage.hasOwnProperty(key) && key != '__simpleStorage_meta') {
        if (this.getTTL(key)) {
          return _storage[key];
        }
      }
    },
    deleteKey: function(key) {
      if (!_storage) {
        return false;
      }
      if (key in _storage) {
        delete _storage[key];
        _setTTL(key, 0);
        return _save();
      }
      return false;
    },
    setTTL: function(key, ttl) {
      if (!_storage) {
        return false;
      }
      _setTTL(key, ttl);
      return _save();
    },
    getTTL: function(key) {
      var ttl;
      if (!_storage) {
        return false;
      }
      if (_storage.hasOwnProperty(key)) {
        if (_storage.__simpleStorage_meta && _storage.__simpleStorage_meta.TTL && _storage.__simpleStorage_meta.TTL.expire && _storage.__simpleStorage_meta.TTL.expire.hasOwnProperty(key)) {
          ttl = Math.max(_storage.__simpleStorage_meta.TTL.expire[key] - (+new Date()) || 0, 0);
          return ttl || false;
        } else {
          return Infinity;
        }
      }
      return false;
    },
    flush: function() {
      if (!_storage) {
        return false;
      }
      _storage = {};
      try {
        localStorage.removeItem('simpleStorage');
        return true;
      } catch (E) {
        return E;
      }
    },
    index: function() {
      if (!_storage) {
        return false;
      }
      var index = [],
          i;
      for (i in _storage) {
        if (_storage.hasOwnProperty(i) && i != '__simpleStorage_meta') {
          index.push(i);
        }
      }
      return index;
    },
    storageSize: function() {
      return _storage_size;
    }
  };
}));
})();
System.register("npm:core-js@0.9.18/library/modules/$.shared", ["npm:core-js@0.9.18/library/modules/$"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var $ = require("npm:core-js@0.9.18/library/modules/$"),
      SHARED = '__core-js_shared__',
      store = $.g[SHARED] || ($.g[SHARED] = {});
  module.exports = function(key) {
    return store[key] || (store[key] = {});
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.18/library/modules/$.uid", ["npm:core-js@0.9.18/library/modules/$"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var sid = 0;
  function uid(key) {
    return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++sid + Math.random()).toString(36));
  }
  uid.safe = require("npm:core-js@0.9.18/library/modules/$").g.Symbol || uid;
  module.exports = uid;
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.18/library/modules/$.redef", ["npm:core-js@0.9.18/library/modules/$"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = require("npm:core-js@0.9.18/library/modules/$").hide;
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.18/library/modules/$.string-at", ["npm:core-js@0.9.18/library/modules/$"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var $ = require("npm:core-js@0.9.18/library/modules/$");
  module.exports = function(TO_STRING) {
    return function(that, pos) {
      var s = String($.assertDefined(that)),
          i = $.toInteger(pos),
          l = s.length,
          a,
          b;
      if (i < 0 || i >= l)
        return TO_STRING ? '' : undefined;
      a = s.charCodeAt(i);
      return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
    };
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.18/library/modules/$.assert", ["npm:core-js@0.9.18/library/modules/$"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var $ = require("npm:core-js@0.9.18/library/modules/$");
  function assert(condition, msg1, msg2) {
    if (!condition)
      throw TypeError(msg2 ? msg1 + msg2 : msg1);
  }
  assert.def = $.assertDefined;
  assert.fn = function(it) {
    if (!$.isFunction(it))
      throw TypeError(it + ' is not a function!');
    return it;
  };
  assert.obj = function(it) {
    if (!$.isObject(it))
      throw TypeError(it + ' is not an object!');
    return it;
  };
  assert.inst = function(it, Constructor, name) {
    if (!(it instanceof Constructor))
      throw TypeError(name + ": use the 'new' operator!");
    return it;
  };
  module.exports = assert;
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.18/library/modules/$.def", ["npm:core-js@0.9.18/library/modules/$"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var $ = require("npm:core-js@0.9.18/library/modules/$"),
      global = $.g,
      core = $.core,
      isFunction = $.isFunction;
  function ctx(fn, that) {
    return function() {
      return fn.apply(that, arguments);
    };
  }
  $def.F = 1;
  $def.G = 2;
  $def.S = 4;
  $def.P = 8;
  $def.B = 16;
  $def.W = 32;
  function $def(type, name, source) {
    var key,
        own,
        out,
        exp,
        isGlobal = type & $def.G,
        isProto = type & $def.P,
        target = isGlobal ? global : type & $def.S ? global[name] : (global[name] || {}).prototype,
        exports = isGlobal ? core : core[name] || (core[name] = {});
    if (isGlobal)
      source = name;
    for (key in source) {
      own = !(type & $def.F) && target && key in target;
      if (own && key in exports)
        continue;
      out = own ? target[key] : source[key];
      if (isGlobal && !isFunction(target[key]))
        exp = source[key];
      else if (type & $def.B && own)
        exp = ctx(out, global);
      else if (type & $def.W && target[key] == out)
        !function(C) {
          exp = function(param) {
            return this instanceof C ? new C(param) : C(param);
          };
          exp.prototype = C.prototype;
        }(out);
      else
        exp = isProto && isFunction(out) ? ctx(Function.call, out) : out;
      exports[key] = exp;
      if (isProto)
        (exports.prototype || (exports.prototype = {}))[key] = out;
    }
  }
  module.exports = $def;
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.18/library/modules/$.unscope", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = function() {};
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.18/library/modules/$.ctx", ["npm:core-js@0.9.18/library/modules/$.assert"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var assertFunction = require("npm:core-js@0.9.18/library/modules/$.assert").fn;
  module.exports = function(fn, that, length) {
    assertFunction(fn);
    if (~length && that === undefined)
      return fn;
    switch (length) {
      case 1:
        return function(a) {
          return fn.call(that, a);
        };
      case 2:
        return function(a, b) {
          return fn.call(that, a, b);
        };
      case 3:
        return function(a, b, c) {
          return fn.call(that, a, b, c);
        };
    }
    return function() {
      return fn.apply(that, arguments);
    };
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.18/library/modules/$.iter-call", ["npm:core-js@0.9.18/library/modules/$.assert"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var assertObject = require("npm:core-js@0.9.18/library/modules/$.assert").obj;
  function close(iterator) {
    var ret = iterator['return'];
    if (ret !== undefined)
      assertObject(ret.call(iterator));
  }
  function call(iterator, fn, value, entries) {
    try {
      return entries ? fn(assertObject(value)[0], value[1]) : fn(value);
    } catch (e) {
      close(iterator);
      throw e;
    }
  }
  call.close = close;
  module.exports = call;
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.18/library/modules/$.mix", ["npm:core-js@0.9.18/library/modules/$.redef"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var $redef = require("npm:core-js@0.9.18/library/modules/$.redef");
  module.exports = function(target, src) {
    for (var key in src)
      $redef(target, key, src[key]);
    return target;
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.18/library/modules/$.species", ["npm:core-js@0.9.18/library/modules/$", "npm:core-js@0.9.18/library/modules/$.wks"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var $ = require("npm:core-js@0.9.18/library/modules/$"),
      SPECIES = require("npm:core-js@0.9.18/library/modules/$.wks")('species');
  module.exports = function(C) {
    if ($.DESC && !(SPECIES in C))
      $.setDesc(C, SPECIES, {
        configurable: true,
        get: $.that
      });
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.18/library/modules/$.collection-to-json", ["npm:core-js@0.9.18/library/modules/$.def", "npm:core-js@0.9.18/library/modules/$.for-of"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var $def = require("npm:core-js@0.9.18/library/modules/$.def"),
      forOf = require("npm:core-js@0.9.18/library/modules/$.for-of");
  module.exports = function(NAME) {
    $def($def.P, NAME, {toJSON: function toJSON() {
        var arr = [];
        forOf(this, false, arr.push, arr);
        return arr;
      }});
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.18/library/modules/core.iter-helpers", ["npm:core-js@0.9.18/library/modules/$", "npm:core-js@0.9.18/library/modules/$.iter"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var core = require("npm:core-js@0.9.18/library/modules/$").core,
      $iter = require("npm:core-js@0.9.18/library/modules/$.iter");
  core.isIterable = $iter.is;
  core.getIterator = $iter.get;
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.18/library/fn/is-iterable", ["npm:core-js@0.9.18/library/modules/web.dom.iterable", "npm:core-js@0.9.18/library/modules/es6.string.iterator", "npm:core-js@0.9.18/library/modules/core.iter-helpers", "npm:core-js@0.9.18/library/modules/$"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  require("npm:core-js@0.9.18/library/modules/web.dom.iterable");
  require("npm:core-js@0.9.18/library/modules/es6.string.iterator");
  require("npm:core-js@0.9.18/library/modules/core.iter-helpers");
  module.exports = require("npm:core-js@0.9.18/library/modules/$").core.isIterable;
  global.define = __define;
  return module.exports;
});

System.register("npm:rbush@1.4.1/rbush", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  "format cjs";
  (function() {
    'use strict';
    function rbush(maxEntries, format) {
      if (!(this instanceof rbush))
        return new rbush(maxEntries, format);
      this._maxEntries = Math.max(4, maxEntries || 9);
      this._minEntries = Math.max(2, Math.ceil(this._maxEntries * 0.4));
      if (format) {
        this._initFormat(format);
      }
      this.clear();
    }
    rbush.prototype = {
      all: function() {
        return this._all(this.data, []);
      },
      search: function(bbox) {
        var node = this.data,
            result = [],
            toBBox = this.toBBox;
        if (!intersects(bbox, node.bbox))
          return result;
        var nodesToSearch = [],
            i,
            len,
            child,
            childBBox;
        while (node) {
          for (i = 0, len = node.children.length; i < len; i++) {
            child = node.children[i];
            childBBox = node.leaf ? toBBox(child) : child.bbox;
            if (intersects(bbox, childBBox)) {
              if (node.leaf)
                result.push(child);
              else if (contains(bbox, childBBox))
                this._all(child, result);
              else
                nodesToSearch.push(child);
            }
          }
          node = nodesToSearch.pop();
        }
        return result;
      },
      collides: function(bbox) {
        var node = this.data,
            toBBox = this.toBBox;
        if (!intersects(bbox, node.bbox))
          return false;
        var nodesToSearch = [],
            i,
            len,
            child,
            childBBox;
        while (node) {
          for (i = 0, len = node.children.length; i < len; i++) {
            child = node.children[i];
            childBBox = node.leaf ? toBBox(child) : child.bbox;
            if (intersects(bbox, childBBox)) {
              if (node.leaf || contains(bbox, childBBox))
                return true;
              nodesToSearch.push(child);
            }
          }
          node = nodesToSearch.pop();
        }
        return false;
      },
      load: function(data) {
        if (!(data && data.length))
          return this;
        if (data.length < this._minEntries) {
          for (var i = 0,
              len = data.length; i < len; i++) {
            this.insert(data[i]);
          }
          return this;
        }
        var node = this._build(data.slice(), 0, data.length - 1, 0);
        if (!this.data.children.length) {
          this.data = node;
        } else if (this.data.height === node.height) {
          this._splitRoot(this.data, node);
        } else {
          if (this.data.height < node.height) {
            var tmpNode = this.data;
            this.data = node;
            node = tmpNode;
          }
          this._insert(node, this.data.height - node.height - 1, true);
        }
        return this;
      },
      insert: function(item) {
        if (item)
          this._insert(item, this.data.height - 1);
        return this;
      },
      clear: function() {
        this.data = {
          children: [],
          height: 1,
          bbox: empty(),
          leaf: true
        };
        return this;
      },
      remove: function(item) {
        if (!item)
          return this;
        var node = this.data,
            bbox = this.toBBox(item),
            path = [],
            indexes = [],
            i,
            parent,
            index,
            goingUp;
        while (node || path.length) {
          if (!node) {
            node = path.pop();
            parent = path[path.length - 1];
            i = indexes.pop();
            goingUp = true;
          }
          if (node.leaf) {
            index = node.children.indexOf(item);
            if (index !== -1) {
              node.children.splice(index, 1);
              path.push(node);
              this._condense(path);
              return this;
            }
          }
          if (!goingUp && !node.leaf && contains(node.bbox, bbox)) {
            path.push(node);
            indexes.push(i);
            i = 0;
            parent = node;
            node = node.children[0];
          } else if (parent) {
            i++;
            node = parent.children[i];
            goingUp = false;
          } else
            node = null;
        }
        return this;
      },
      toBBox: function(item) {
        return item;
      },
      compareMinX: function(a, b) {
        return a[0] - b[0];
      },
      compareMinY: function(a, b) {
        return a[1] - b[1];
      },
      toJSON: function() {
        return this.data;
      },
      fromJSON: function(data) {
        this.data = data;
        return this;
      },
      _all: function(node, result) {
        var nodesToSearch = [];
        while (node) {
          if (node.leaf)
            result.push.apply(result, node.children);
          else
            nodesToSearch.push.apply(nodesToSearch, node.children);
          node = nodesToSearch.pop();
        }
        return result;
      },
      _build: function(items, left, right, height) {
        var N = right - left + 1,
            M = this._maxEntries,
            node;
        if (N <= M) {
          node = {
            children: items.slice(left, right + 1),
            height: 1,
            bbox: null,
            leaf: true
          };
          calcBBox(node, this.toBBox);
          return node;
        }
        if (!height) {
          height = Math.ceil(Math.log(N) / Math.log(M));
          M = Math.ceil(N / Math.pow(M, height - 1));
        }
        node = {
          children: [],
          height: height,
          bbox: null
        };
        var N2 = Math.ceil(N / M),
            N1 = N2 * Math.ceil(Math.sqrt(M)),
            i,
            j,
            right2,
            right3;
        multiSelect(items, left, right, N1, this.compareMinX);
        for (i = left; i <= right; i += N1) {
          right2 = Math.min(i + N1 - 1, right);
          multiSelect(items, i, right2, N2, this.compareMinY);
          for (j = i; j <= right2; j += N2) {
            right3 = Math.min(j + N2 - 1, right2);
            node.children.push(this._build(items, j, right3, height - 1));
          }
        }
        calcBBox(node, this.toBBox);
        return node;
      },
      _chooseSubtree: function(bbox, node, level, path) {
        var i,
            len,
            child,
            targetNode,
            area,
            enlargement,
            minArea,
            minEnlargement;
        while (true) {
          path.push(node);
          if (node.leaf || path.length - 1 === level)
            break;
          minArea = minEnlargement = Infinity;
          for (i = 0, len = node.children.length; i < len; i++) {
            child = node.children[i];
            area = bboxArea(child.bbox);
            enlargement = enlargedArea(bbox, child.bbox) - area;
            if (enlargement < minEnlargement) {
              minEnlargement = enlargement;
              minArea = area < minArea ? area : minArea;
              targetNode = child;
            } else if (enlargement === minEnlargement) {
              if (area < minArea) {
                minArea = area;
                targetNode = child;
              }
            }
          }
          node = targetNode;
        }
        return node;
      },
      _insert: function(item, level, isNode) {
        var toBBox = this.toBBox,
            bbox = isNode ? item.bbox : toBBox(item),
            insertPath = [];
        var node = this._chooseSubtree(bbox, this.data, level, insertPath);
        node.children.push(item);
        extend(node.bbox, bbox);
        while (level >= 0) {
          if (insertPath[level].children.length > this._maxEntries) {
            this._split(insertPath, level);
            level--;
          } else
            break;
        }
        this._adjustParentBBoxes(bbox, insertPath, level);
      },
      _split: function(insertPath, level) {
        var node = insertPath[level],
            M = node.children.length,
            m = this._minEntries;
        this._chooseSplitAxis(node, m, M);
        var splitIndex = this._chooseSplitIndex(node, m, M);
        var newNode = {
          children: node.children.splice(splitIndex, node.children.length - splitIndex),
          height: node.height
        };
        if (node.leaf)
          newNode.leaf = true;
        calcBBox(node, this.toBBox);
        calcBBox(newNode, this.toBBox);
        if (level)
          insertPath[level - 1].children.push(newNode);
        else
          this._splitRoot(node, newNode);
      },
      _splitRoot: function(node, newNode) {
        this.data = {
          children: [node, newNode],
          height: node.height + 1
        };
        calcBBox(this.data, this.toBBox);
      },
      _chooseSplitIndex: function(node, m, M) {
        var i,
            bbox1,
            bbox2,
            overlap,
            area,
            minOverlap,
            minArea,
            index;
        minOverlap = minArea = Infinity;
        for (i = m; i <= M - m; i++) {
          bbox1 = distBBox(node, 0, i, this.toBBox);
          bbox2 = distBBox(node, i, M, this.toBBox);
          overlap = intersectionArea(bbox1, bbox2);
          area = bboxArea(bbox1) + bboxArea(bbox2);
          if (overlap < minOverlap) {
            minOverlap = overlap;
            index = i;
            minArea = area < minArea ? area : minArea;
          } else if (overlap === minOverlap) {
            if (area < minArea) {
              minArea = area;
              index = i;
            }
          }
        }
        return index;
      },
      _chooseSplitAxis: function(node, m, M) {
        var compareMinX = node.leaf ? this.compareMinX : compareNodeMinX,
            compareMinY = node.leaf ? this.compareMinY : compareNodeMinY,
            xMargin = this._allDistMargin(node, m, M, compareMinX),
            yMargin = this._allDistMargin(node, m, M, compareMinY);
        if (xMargin < yMargin)
          node.children.sort(compareMinX);
      },
      _allDistMargin: function(node, m, M, compare) {
        node.children.sort(compare);
        var toBBox = this.toBBox,
            leftBBox = distBBox(node, 0, m, toBBox),
            rightBBox = distBBox(node, M - m, M, toBBox),
            margin = bboxMargin(leftBBox) + bboxMargin(rightBBox),
            i,
            child;
        for (i = m; i < M - m; i++) {
          child = node.children[i];
          extend(leftBBox, node.leaf ? toBBox(child) : child.bbox);
          margin += bboxMargin(leftBBox);
        }
        for (i = M - m - 1; i >= m; i--) {
          child = node.children[i];
          extend(rightBBox, node.leaf ? toBBox(child) : child.bbox);
          margin += bboxMargin(rightBBox);
        }
        return margin;
      },
      _adjustParentBBoxes: function(bbox, path, level) {
        for (var i = level; i >= 0; i--) {
          extend(path[i].bbox, bbox);
        }
      },
      _condense: function(path) {
        for (var i = path.length - 1,
            siblings; i >= 0; i--) {
          if (path[i].children.length === 0) {
            if (i > 0) {
              siblings = path[i - 1].children;
              siblings.splice(siblings.indexOf(path[i]), 1);
            } else
              this.clear();
          } else
            calcBBox(path[i], this.toBBox);
        }
      },
      _initFormat: function(format) {
        var compareArr = ['return a', ' - b', ';'];
        this.compareMinX = new Function('a', 'b', compareArr.join(format[0]));
        this.compareMinY = new Function('a', 'b', compareArr.join(format[1]));
        this.toBBox = new Function('a', 'return [a' + format.join(', a') + '];');
      }
    };
    function calcBBox(node, toBBox) {
      node.bbox = distBBox(node, 0, node.children.length, toBBox);
    }
    function distBBox(node, k, p, toBBox) {
      var bbox = empty();
      for (var i = k,
          child; i < p; i++) {
        child = node.children[i];
        extend(bbox, node.leaf ? toBBox(child) : child.bbox);
      }
      return bbox;
    }
    function empty() {
      return [Infinity, Infinity, -Infinity, -Infinity];
    }
    function extend(a, b) {
      a[0] = Math.min(a[0], b[0]);
      a[1] = Math.min(a[1], b[1]);
      a[2] = Math.max(a[2], b[2]);
      a[3] = Math.max(a[3], b[3]);
      return a;
    }
    function compareNodeMinX(a, b) {
      return a.bbox[0] - b.bbox[0];
    }
    function compareNodeMinY(a, b) {
      return a.bbox[1] - b.bbox[1];
    }
    function bboxArea(a) {
      return (a[2] - a[0]) * (a[3] - a[1]);
    }
    function bboxMargin(a) {
      return (a[2] - a[0]) + (a[3] - a[1]);
    }
    function enlargedArea(a, b) {
      return (Math.max(b[2], a[2]) - Math.min(b[0], a[0])) * (Math.max(b[3], a[3]) - Math.min(b[1], a[1]));
    }
    function intersectionArea(a, b) {
      var minX = Math.max(a[0], b[0]),
          minY = Math.max(a[1], b[1]),
          maxX = Math.min(a[2], b[2]),
          maxY = Math.min(a[3], b[3]);
      return Math.max(0, maxX - minX) * Math.max(0, maxY - minY);
    }
    function contains(a, b) {
      return a[0] <= b[0] && a[1] <= b[1] && b[2] <= a[2] && b[3] <= a[3];
    }
    function intersects(a, b) {
      return b[0] <= a[2] && b[1] <= a[3] && b[2] >= a[0] && b[3] >= a[1];
    }
    function multiSelect(arr, left, right, n, compare) {
      var stack = [left, right],
          mid;
      while (stack.length) {
        right = stack.pop();
        left = stack.pop();
        if (right - left <= n)
          continue;
        mid = left + Math.ceil((right - left) / n / 2) * n;
        select(arr, left, right, mid, compare);
        stack.push(left, mid, mid, right);
      }
    }
    function select(arr, left, right, k, compare) {
      var n,
          i,
          z,
          s,
          sd,
          newLeft,
          newRight,
          t,
          j;
      while (right > left) {
        if (right - left > 600) {
          n = right - left + 1;
          i = k - left + 1;
          z = Math.log(n);
          s = 0.5 * Math.exp(2 * z / 3);
          sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (i - n / 2 < 0 ? -1 : 1);
          newLeft = Math.max(left, Math.floor(k - i * s / n + sd));
          newRight = Math.min(right, Math.floor(k + (n - i) * s / n + sd));
          select(arr, newLeft, newRight, k, compare);
        }
        t = arr[k];
        i = left;
        j = right;
        swap(arr, left, k);
        if (compare(arr[right], t) > 0)
          swap(arr, left, right);
        while (i < j) {
          swap(arr, i, j);
          i++;
          j--;
          while (compare(arr[i], t) < 0)
            i++;
          while (compare(arr[j], t) > 0)
            j--;
        }
        if (compare(arr[left], t) === 0)
          swap(arr, left, j);
        else {
          j++;
          swap(arr, j, right);
        }
        if (j <= k)
          left = j + 1;
        if (k <= j)
          right = j - 1;
      }
    }
    function swap(arr, i, j) {
      var tmp = arr[i];
      arr[i] = arr[j];
      arr[j] = tmp;
    }
    if (typeof define === 'function' && define.amd)
      define('rbush', function() {
        return rbush;
      });
    else if (typeof module !== 'undefined')
      module.exports = rbush;
    else if (typeof self !== 'undefined')
      self.rbush = rbush;
    else
      window.rbush = rbush;
  })();
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.18/library/modules/$.get-names", ["npm:core-js@0.9.18/library/modules/$"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var $ = require("npm:core-js@0.9.18/library/modules/$"),
      toString = {}.toString,
      getNames = $.getNames;
  var windowNames = typeof window == 'object' && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
  function getWindowNames(it) {
    try {
      return getNames(it);
    } catch (e) {
      return windowNames.slice();
    }
  }
  module.exports.get = function getOwnPropertyNames(it) {
    if (windowNames && toString.call(it) == '[object Window]')
      return getWindowNames(it);
    return getNames($.toObject(it));
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.18/library/fn/object/create", ["npm:core-js@0.9.18/library/modules/$"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var $ = require("npm:core-js@0.9.18/library/modules/$");
  module.exports = function create(P, D) {
    return $.create(P, D);
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.18/library/modules/$.set-proto", ["npm:core-js@0.9.18/library/modules/$", "npm:core-js@0.9.18/library/modules/$.assert", "npm:core-js@0.9.18/library/modules/$.ctx"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var $ = require("npm:core-js@0.9.18/library/modules/$"),
      assert = require("npm:core-js@0.9.18/library/modules/$.assert");
  function check(O, proto) {
    assert.obj(O);
    assert(proto === null || $.isObject(proto), proto, ": can't set as prototype!");
  }
  module.exports = {
    set: Object.setPrototypeOf || ('__proto__' in {} ? function(buggy, set) {
      try {
        set = require("npm:core-js@0.9.18/library/modules/$.ctx")(Function.call, $.getDesc(Object.prototype, '__proto__').set, 2);
        set({}, []);
      } catch (e) {
        buggy = true;
      }
      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy)
          O.__proto__ = proto;
        else
          set(O, proto);
        return O;
      };
    }() : undefined),
    check: check
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.18/library/modules/$.iter-detect", ["npm:core-js@0.9.18/library/modules/$.wks"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var SYMBOL_ITERATOR = require("npm:core-js@0.9.18/library/modules/$.wks")('iterator'),
      SAFE_CLOSING = false;
  try {
    var riter = [7][SYMBOL_ITERATOR]();
    riter['return'] = function() {
      SAFE_CLOSING = true;
    };
    Array.from(riter, function() {
      throw 2;
    });
  } catch (e) {}
  module.exports = function(exec) {
    if (!SAFE_CLOSING)
      return false;
    var safe = false;
    try {
      var arr = [7],
          iter = arr[SYMBOL_ITERATOR]();
      iter.next = function() {
        safe = true;
      };
      arr[SYMBOL_ITERATOR] = function() {
        return iter;
      };
      exec(arr);
    } catch (e) {}
    return safe;
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:babel-runtime@5.8.24/helpers/to-consumable-array", ["npm:babel-runtime@5.8.24/core-js/array/from"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  "use strict";
  var _Array$from = require("npm:babel-runtime@5.8.24/core-js/array/from")["default"];
  exports["default"] = function(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0,
          arr2 = Array(arr.length); i < arr.length; i++)
        arr2[i] = arr[i];
      return arr2;
    } else {
      return _Array$from(arr);
    }
  };
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:moment@2.10.6/moment", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  "format cjs";
  (function(global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.moment = factory();
  }(this, function() {
    'use strict';
    var hookCallback;
    function utils_hooks__hooks() {
      return hookCallback.apply(null, arguments);
    }
    function setHookCallback(callback) {
      hookCallback = callback;
    }
    function isArray(input) {
      return Object.prototype.toString.call(input) === '[object Array]';
    }
    function isDate(input) {
      return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
    }
    function map(arr, fn) {
      var res = [],
          i;
      for (i = 0; i < arr.length; ++i) {
        res.push(fn(arr[i], i));
      }
      return res;
    }
    function hasOwnProp(a, b) {
      return Object.prototype.hasOwnProperty.call(a, b);
    }
    function extend(a, b) {
      for (var i in b) {
        if (hasOwnProp(b, i)) {
          a[i] = b[i];
        }
      }
      if (hasOwnProp(b, 'toString')) {
        a.toString = b.toString;
      }
      if (hasOwnProp(b, 'valueOf')) {
        a.valueOf = b.valueOf;
      }
      return a;
    }
    function create_utc__createUTC(input, format, locale, strict) {
      return createLocalOrUTC(input, format, locale, strict, true).utc();
    }
    function defaultParsingFlags() {
      return {
        empty: false,
        unusedTokens: [],
        unusedInput: [],
        overflow: -2,
        charsLeftOver: 0,
        nullInput: false,
        invalidMonth: null,
        invalidFormat: false,
        userInvalidated: false,
        iso: false
      };
    }
    function getParsingFlags(m) {
      if (m._pf == null) {
        m._pf = defaultParsingFlags();
      }
      return m._pf;
    }
    function valid__isValid(m) {
      if (m._isValid == null) {
        var flags = getParsingFlags(m);
        m._isValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidMonth && !flags.invalidWeekday && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated;
        if (m._strict) {
          m._isValid = m._isValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined;
        }
      }
      return m._isValid;
    }
    function valid__createInvalid(flags) {
      var m = create_utc__createUTC(NaN);
      if (flags != null) {
        extend(getParsingFlags(m), flags);
      } else {
        getParsingFlags(m).userInvalidated = true;
      }
      return m;
    }
    var momentProperties = utils_hooks__hooks.momentProperties = [];
    function copyConfig(to, from) {
      var i,
          prop,
          val;
      if (typeof from._isAMomentObject !== 'undefined') {
        to._isAMomentObject = from._isAMomentObject;
      }
      if (typeof from._i !== 'undefined') {
        to._i = from._i;
      }
      if (typeof from._f !== 'undefined') {
        to._f = from._f;
      }
      if (typeof from._l !== 'undefined') {
        to._l = from._l;
      }
      if (typeof from._strict !== 'undefined') {
        to._strict = from._strict;
      }
      if (typeof from._tzm !== 'undefined') {
        to._tzm = from._tzm;
      }
      if (typeof from._isUTC !== 'undefined') {
        to._isUTC = from._isUTC;
      }
      if (typeof from._offset !== 'undefined') {
        to._offset = from._offset;
      }
      if (typeof from._pf !== 'undefined') {
        to._pf = getParsingFlags(from);
      }
      if (typeof from._locale !== 'undefined') {
        to._locale = from._locale;
      }
      if (momentProperties.length > 0) {
        for (i in momentProperties) {
          prop = momentProperties[i];
          val = from[prop];
          if (typeof val !== 'undefined') {
            to[prop] = val;
          }
        }
      }
      return to;
    }
    var updateInProgress = false;
    function Moment(config) {
      copyConfig(this, config);
      this._d = new Date(config._d != null ? config._d.getTime() : NaN);
      if (updateInProgress === false) {
        updateInProgress = true;
        utils_hooks__hooks.updateOffset(this);
        updateInProgress = false;
      }
    }
    function isMoment(obj) {
      return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
    }
    function absFloor(number) {
      if (number < 0) {
        return Math.ceil(number);
      } else {
        return Math.floor(number);
      }
    }
    function toInt(argumentForCoercion) {
      var coercedNumber = +argumentForCoercion,
          value = 0;
      if (coercedNumber !== 0 && isFinite(coercedNumber)) {
        value = absFloor(coercedNumber);
      }
      return value;
    }
    function compareArrays(array1, array2, dontConvert) {
      var len = Math.min(array1.length, array2.length),
          lengthDiff = Math.abs(array1.length - array2.length),
          diffs = 0,
          i;
      for (i = 0; i < len; i++) {
        if ((dontConvert && array1[i] !== array2[i]) || (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
          diffs++;
        }
      }
      return diffs + lengthDiff;
    }
    function Locale() {}
    var locales = {};
    var globalLocale;
    function normalizeLocale(key) {
      return key ? key.toLowerCase().replace('_', '-') : key;
    }
    function chooseLocale(names) {
      var i = 0,
          j,
          next,
          locale,
          split;
      while (i < names.length) {
        split = normalizeLocale(names[i]).split('-');
        j = split.length;
        next = normalizeLocale(names[i + 1]);
        next = next ? next.split('-') : null;
        while (j > 0) {
          locale = loadLocale(split.slice(0, j).join('-'));
          if (locale) {
            return locale;
          }
          if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
            break;
          }
          j--;
        }
        i++;
      }
      return null;
    }
    function loadLocale(name) {
      var oldLocale = null;
      if (!locales[name] && typeof module !== 'undefined' && module && module.exports) {
        try {
          oldLocale = globalLocale._abbr;
          require('./locale/' + name);
          locale_locales__getSetGlobalLocale(oldLocale);
        } catch (e) {}
      }
      return locales[name];
    }
    function locale_locales__getSetGlobalLocale(key, values) {
      var data;
      if (key) {
        if (typeof values === 'undefined') {
          data = locale_locales__getLocale(key);
        } else {
          data = defineLocale(key, values);
        }
        if (data) {
          globalLocale = data;
        }
      }
      return globalLocale._abbr;
    }
    function defineLocale(name, values) {
      if (values !== null) {
        values.abbr = name;
        locales[name] = locales[name] || new Locale();
        locales[name].set(values);
        locale_locales__getSetGlobalLocale(name);
        return locales[name];
      } else {
        delete locales[name];
        return null;
      }
    }
    function locale_locales__getLocale(key) {
      var locale;
      if (key && key._locale && key._locale._abbr) {
        key = key._locale._abbr;
      }
      if (!key) {
        return globalLocale;
      }
      if (!isArray(key)) {
        locale = loadLocale(key);
        if (locale) {
          return locale;
        }
        key = [key];
      }
      return chooseLocale(key);
    }
    var aliases = {};
    function addUnitAlias(unit, shorthand) {
      var lowerCase = unit.toLowerCase();
      aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }
    function normalizeUnits(units) {
      return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
    }
    function normalizeObjectUnits(inputObject) {
      var normalizedInput = {},
          normalizedProp,
          prop;
      for (prop in inputObject) {
        if (hasOwnProp(inputObject, prop)) {
          normalizedProp = normalizeUnits(prop);
          if (normalizedProp) {
            normalizedInput[normalizedProp] = inputObject[prop];
          }
        }
      }
      return normalizedInput;
    }
    function makeGetSet(unit, keepTime) {
      return function(value) {
        if (value != null) {
          get_set__set(this, unit, value);
          utils_hooks__hooks.updateOffset(this, keepTime);
          return this;
        } else {
          return get_set__get(this, unit);
        }
      };
    }
    function get_set__get(mom, unit) {
      return mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]();
    }
    function get_set__set(mom, unit, value) {
      return mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
    }
    function getSet(units, value) {
      var unit;
      if (typeof units === 'object') {
        for (unit in units) {
          this.set(unit, units[unit]);
        }
      } else {
        units = normalizeUnits(units);
        if (typeof this[units] === 'function') {
          return this[units](value);
        }
      }
      return this;
    }
    function zeroFill(number, targetLength, forceSign) {
      var absNumber = '' + Math.abs(number),
          zerosToFill = targetLength - absNumber.length,
          sign = number >= 0;
      return (sign ? (forceSign ? '+' : '') : '-') + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }
    var formattingTokens = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;
    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;
    var formatFunctions = {};
    var formatTokenFunctions = {};
    function addFormatToken(token, padded, ordinal, callback) {
      var func = callback;
      if (typeof callback === 'string') {
        func = function() {
          return this[callback]();
        };
      }
      if (token) {
        formatTokenFunctions[token] = func;
      }
      if (padded) {
        formatTokenFunctions[padded[0]] = function() {
          return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
        };
      }
      if (ordinal) {
        formatTokenFunctions[ordinal] = function() {
          return this.localeData().ordinal(func.apply(this, arguments), token);
        };
      }
    }
    function removeFormattingTokens(input) {
      if (input.match(/\[[\s\S]/)) {
        return input.replace(/^\[|\]$/g, '');
      }
      return input.replace(/\\/g, '');
    }
    function makeFormatFunction(format) {
      var array = format.match(formattingTokens),
          i,
          length;
      for (i = 0, length = array.length; i < length; i++) {
        if (formatTokenFunctions[array[i]]) {
          array[i] = formatTokenFunctions[array[i]];
        } else {
          array[i] = removeFormattingTokens(array[i]);
        }
      }
      return function(mom) {
        var output = '';
        for (i = 0; i < length; i++) {
          output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
        }
        return output;
      };
    }
    function formatMoment(m, format) {
      if (!m.isValid()) {
        return m.localeData().invalidDate();
      }
      format = expandFormat(format, m.localeData());
      formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);
      return formatFunctions[format](m);
    }
    function expandFormat(format, locale) {
      var i = 5;
      function replaceLongDateFormatTokens(input) {
        return locale.longDateFormat(input) || input;
      }
      localFormattingTokens.lastIndex = 0;
      while (i >= 0 && localFormattingTokens.test(format)) {
        format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
        localFormattingTokens.lastIndex = 0;
        i -= 1;
      }
      return format;
    }
    var match1 = /\d/;
    var match2 = /\d\d/;
    var match3 = /\d{3}/;
    var match4 = /\d{4}/;
    var match6 = /[+-]?\d{6}/;
    var match1to2 = /\d\d?/;
    var match1to3 = /\d{1,3}/;
    var match1to4 = /\d{1,4}/;
    var match1to6 = /[+-]?\d{1,6}/;
    var matchUnsigned = /\d+/;
    var matchSigned = /[+-]?\d+/;
    var matchOffset = /Z|[+-]\d\d:?\d\d/gi;
    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/;
    var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;
    var regexes = {};
    function isFunction(sth) {
      return typeof sth === 'function' && Object.prototype.toString.call(sth) === '[object Function]';
    }
    function addRegexToken(token, regex, strictRegex) {
      regexes[token] = isFunction(regex) ? regex : function(isStrict) {
        return (isStrict && strictRegex) ? strictRegex : regex;
      };
    }
    function getParseRegexForToken(token, config) {
      if (!hasOwnProp(regexes, token)) {
        return new RegExp(unescapeFormat(token));
      }
      return regexes[token](config._strict, config._locale);
    }
    function unescapeFormat(s) {
      return s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function(matched, p1, p2, p3, p4) {
        return p1 || p2 || p3 || p4;
      }).replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }
    var tokens = {};
    function addParseToken(token, callback) {
      var i,
          func = callback;
      if (typeof token === 'string') {
        token = [token];
      }
      if (typeof callback === 'number') {
        func = function(input, array) {
          array[callback] = toInt(input);
        };
      }
      for (i = 0; i < token.length; i++) {
        tokens[token[i]] = func;
      }
    }
    function addWeekParseToken(token, callback) {
      addParseToken(token, function(input, array, config, token) {
        config._w = config._w || {};
        callback(input, config._w, config, token);
      });
    }
    function addTimeToArrayFromToken(token, input, config) {
      if (input != null && hasOwnProp(tokens, token)) {
        tokens[token](input, config._a, config, token);
      }
    }
    var YEAR = 0;
    var MONTH = 1;
    var DATE = 2;
    var HOUR = 3;
    var MINUTE = 4;
    var SECOND = 5;
    var MILLISECOND = 6;
    function daysInMonth(year, month) {
      return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
    }
    addFormatToken('M', ['MM', 2], 'Mo', function() {
      return this.month() + 1;
    });
    addFormatToken('MMM', 0, 0, function(format) {
      return this.localeData().monthsShort(this, format);
    });
    addFormatToken('MMMM', 0, 0, function(format) {
      return this.localeData().months(this, format);
    });
    addUnitAlias('month', 'M');
    addRegexToken('M', match1to2);
    addRegexToken('MM', match1to2, match2);
    addRegexToken('MMM', matchWord);
    addRegexToken('MMMM', matchWord);
    addParseToken(['M', 'MM'], function(input, array) {
      array[MONTH] = toInt(input) - 1;
    });
    addParseToken(['MMM', 'MMMM'], function(input, array, config, token) {
      var month = config._locale.monthsParse(input, token, config._strict);
      if (month != null) {
        array[MONTH] = month;
      } else {
        getParsingFlags(config).invalidMonth = input;
      }
    });
    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
    function localeMonths(m) {
      return this._months[m.month()];
    }
    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
    function localeMonthsShort(m) {
      return this._monthsShort[m.month()];
    }
    function localeMonthsParse(monthName, format, strict) {
      var i,
          mom,
          regex;
      if (!this._monthsParse) {
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
      }
      for (i = 0; i < 12; i++) {
        mom = create_utc__createUTC([2000, i]);
        if (strict && !this._longMonthsParse[i]) {
          this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
          this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
        }
        if (!strict && !this._monthsParse[i]) {
          regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
          this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
        }
        if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
          return i;
        } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
          return i;
        } else if (!strict && this._monthsParse[i].test(monthName)) {
          return i;
        }
      }
    }
    function setMonth(mom, value) {
      var dayOfMonth;
      if (typeof value === 'string') {
        value = mom.localeData().monthsParse(value);
        if (typeof value !== 'number') {
          return mom;
        }
      }
      dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
      mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
      return mom;
    }
    function getSetMonth(value) {
      if (value != null) {
        setMonth(this, value);
        utils_hooks__hooks.updateOffset(this, true);
        return this;
      } else {
        return get_set__get(this, 'Month');
      }
    }
    function getDaysInMonth() {
      return daysInMonth(this.year(), this.month());
    }
    function checkOverflow(m) {
      var overflow;
      var a = m._a;
      if (a && getParsingFlags(m).overflow === -2) {
        overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
        if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
          overflow = DATE;
        }
        getParsingFlags(m).overflow = overflow;
      }
      return m;
    }
    function warn(msg) {
      if (utils_hooks__hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
        console.warn('Deprecation warning: ' + msg);
      }
    }
    function deprecate(msg, fn) {
      var firstTime = true;
      return extend(function() {
        if (firstTime) {
          warn(msg + '\n' + (new Error()).stack);
          firstTime = false;
        }
        return fn.apply(this, arguments);
      }, fn);
    }
    var deprecations = {};
    function deprecateSimple(name, msg) {
      if (!deprecations[name]) {
        warn(msg);
        deprecations[name] = true;
      }
    }
    utils_hooks__hooks.suppressDeprecationWarnings = false;
    var from_string__isoRegex = /^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
    var isoDates = [['YYYYYY-MM-DD', /[+-]\d{6}-\d{2}-\d{2}/], ['YYYY-MM-DD', /\d{4}-\d{2}-\d{2}/], ['GGGG-[W]WW-E', /\d{4}-W\d{2}-\d/], ['GGGG-[W]WW', /\d{4}-W\d{2}/], ['YYYY-DDD', /\d{4}-\d{3}/]];
    var isoTimes = [['HH:mm:ss.SSSS', /(T| )\d\d:\d\d:\d\d\.\d+/], ['HH:mm:ss', /(T| )\d\d:\d\d:\d\d/], ['HH:mm', /(T| )\d\d:\d\d/], ['HH', /(T| )\d\d/]];
    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;
    function configFromISO(config) {
      var i,
          l,
          string = config._i,
          match = from_string__isoRegex.exec(string);
      if (match) {
        getParsingFlags(config).iso = true;
        for (i = 0, l = isoDates.length; i < l; i++) {
          if (isoDates[i][1].exec(string)) {
            config._f = isoDates[i][0];
            break;
          }
        }
        for (i = 0, l = isoTimes.length; i < l; i++) {
          if (isoTimes[i][1].exec(string)) {
            config._f += (match[6] || ' ') + isoTimes[i][0];
            break;
          }
        }
        if (string.match(matchOffset)) {
          config._f += 'Z';
        }
        configFromStringAndFormat(config);
      } else {
        config._isValid = false;
      }
    }
    function configFromString(config) {
      var matched = aspNetJsonRegex.exec(config._i);
      if (matched !== null) {
        config._d = new Date(+matched[1]);
        return ;
      }
      configFromISO(config);
      if (config._isValid === false) {
        delete config._isValid;
        utils_hooks__hooks.createFromInputFallback(config);
      }
    }
    utils_hooks__hooks.createFromInputFallback = deprecate('moment construction falls back to js Date. This is ' + 'discouraged and will be removed in upcoming major ' + 'release. Please refer to ' + 'https://github.com/moment/moment/issues/1407 for more info.', function(config) {
      config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
    });
    function createDate(y, m, d, h, M, s, ms) {
      var date = new Date(y, m, d, h, M, s, ms);
      if (y < 1970) {
        date.setFullYear(y);
      }
      return date;
    }
    function createUTCDate(y) {
      var date = new Date(Date.UTC.apply(null, arguments));
      if (y < 1970) {
        date.setUTCFullYear(y);
      }
      return date;
    }
    addFormatToken(0, ['YY', 2], 0, function() {
      return this.year() % 100;
    });
    addFormatToken(0, ['YYYY', 4], 0, 'year');
    addFormatToken(0, ['YYYYY', 5], 0, 'year');
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');
    addUnitAlias('year', 'y');
    addRegexToken('Y', matchSigned);
    addRegexToken('YY', match1to2, match2);
    addRegexToken('YYYY', match1to4, match4);
    addRegexToken('YYYYY', match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);
    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
    addParseToken('YYYY', function(input, array) {
      array[YEAR] = input.length === 2 ? utils_hooks__hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function(input, array) {
      array[YEAR] = utils_hooks__hooks.parseTwoDigitYear(input);
    });
    function daysInYear(year) {
      return isLeapYear(year) ? 366 : 365;
    }
    function isLeapYear(year) {
      return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }
    utils_hooks__hooks.parseTwoDigitYear = function(input) {
      return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };
    var getSetYear = makeGetSet('FullYear', false);
    function getIsLeapYear() {
      return isLeapYear(this.year());
    }
    addFormatToken('w', ['ww', 2], 'wo', 'week');
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');
    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');
    addRegexToken('w', match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W', match1to2);
    addRegexToken('WW', match1to2, match2);
    addWeekParseToken(['w', 'ww', 'W', 'WW'], function(input, week, config, token) {
      week[token.substr(0, 1)] = toInt(input);
    });
    function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {
      var end = firstDayOfWeekOfYear - firstDayOfWeek,
          daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(),
          adjustedMoment;
      if (daysToDayOfWeek > end) {
        daysToDayOfWeek -= 7;
      }
      if (daysToDayOfWeek < end - 7) {
        daysToDayOfWeek += 7;
      }
      adjustedMoment = local__createLocal(mom).add(daysToDayOfWeek, 'd');
      return {
        week: Math.ceil(adjustedMoment.dayOfYear() / 7),
        year: adjustedMoment.year()
      };
    }
    function localeWeek(mom) {
      return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }
    var defaultLocaleWeek = {
      dow: 0,
      doy: 6
    };
    function localeFirstDayOfWeek() {
      return this._week.dow;
    }
    function localeFirstDayOfYear() {
      return this._week.doy;
    }
    function getSetWeek(input) {
      var week = this.localeData().week(this);
      return input == null ? week : this.add((input - week) * 7, 'd');
    }
    function getSetISOWeek(input) {
      var week = weekOfYear(this, 1, 4).week;
      return input == null ? week : this.add((input - week) * 7, 'd');
    }
    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');
    addUnitAlias('dayOfYear', 'DDD');
    addRegexToken('DDD', match1to3);
    addRegexToken('DDDD', match3);
    addParseToken(['DDD', 'DDDD'], function(input, array, config) {
      config._dayOfYear = toInt(input);
    });
    function dayOfYearFromWeeks(year, week, weekday, firstDayOfWeekOfYear, firstDayOfWeek) {
      var week1Jan = 6 + firstDayOfWeek - firstDayOfWeekOfYear,
          janX = createUTCDate(year, 0, 1 + week1Jan),
          d = janX.getUTCDay(),
          dayOfYear;
      if (d < firstDayOfWeek) {
        d += 7;
      }
      weekday = weekday != null ? 1 * weekday : firstDayOfWeek;
      dayOfYear = 1 + week1Jan + 7 * (week - 1) - d + weekday;
      return {
        year: dayOfYear > 0 ? year : year - 1,
        dayOfYear: dayOfYear > 0 ? dayOfYear : daysInYear(year - 1) + dayOfYear
      };
    }
    function getSetDayOfYear(input) {
      var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
      return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
    }
    function defaults(a, b, c) {
      if (a != null) {
        return a;
      }
      if (b != null) {
        return b;
      }
      return c;
    }
    function currentDateArray(config) {
      var now = new Date();
      if (config._useUTC) {
        return [now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate()];
      }
      return [now.getFullYear(), now.getMonth(), now.getDate()];
    }
    function configFromArray(config) {
      var i,
          date,
          input = [],
          currentDate,
          yearToUse;
      if (config._d) {
        return ;
      }
      currentDate = currentDateArray(config);
      if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
        dayOfYearFromWeekInfo(config);
      }
      if (config._dayOfYear) {
        yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
        if (config._dayOfYear > daysInYear(yearToUse)) {
          getParsingFlags(config)._overflowDayOfYear = true;
        }
        date = createUTCDate(yearToUse, 0, config._dayOfYear);
        config._a[MONTH] = date.getUTCMonth();
        config._a[DATE] = date.getUTCDate();
      }
      for (i = 0; i < 3 && config._a[i] == null; ++i) {
        config._a[i] = input[i] = currentDate[i];
      }
      for (; i < 7; i++) {
        config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
      }
      if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
        config._nextDay = true;
        config._a[HOUR] = 0;
      }
      config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
      if (config._tzm != null) {
        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
      }
      if (config._nextDay) {
        config._a[HOUR] = 24;
      }
    }
    function dayOfYearFromWeekInfo(config) {
      var w,
          weekYear,
          week,
          weekday,
          dow,
          doy,
          temp;
      w = config._w;
      if (w.GG != null || w.W != null || w.E != null) {
        dow = 1;
        doy = 4;
        weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(local__createLocal(), 1, 4).year);
        week = defaults(w.W, 1);
        weekday = defaults(w.E, 1);
      } else {
        dow = config._locale._week.dow;
        doy = config._locale._week.doy;
        weekYear = defaults(w.gg, config._a[YEAR], weekOfYear(local__createLocal(), dow, doy).year);
        week = defaults(w.w, 1);
        if (w.d != null) {
          weekday = w.d;
          if (weekday < dow) {
            ++week;
          }
        } else if (w.e != null) {
          weekday = w.e + dow;
        } else {
          weekday = dow;
        }
      }
      temp = dayOfYearFromWeeks(weekYear, week, weekday, doy, dow);
      config._a[YEAR] = temp.year;
      config._dayOfYear = temp.dayOfYear;
    }
    utils_hooks__hooks.ISO_8601 = function() {};
    function configFromStringAndFormat(config) {
      if (config._f === utils_hooks__hooks.ISO_8601) {
        configFromISO(config);
        return ;
      }
      config._a = [];
      getParsingFlags(config).empty = true;
      var string = '' + config._i,
          i,
          parsedInput,
          tokens,
          token,
          skipped,
          stringLength = string.length,
          totalParsedInputLength = 0;
      tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];
      for (i = 0; i < tokens.length; i++) {
        token = tokens[i];
        parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
        if (parsedInput) {
          skipped = string.substr(0, string.indexOf(parsedInput));
          if (skipped.length > 0) {
            getParsingFlags(config).unusedInput.push(skipped);
          }
          string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
          totalParsedInputLength += parsedInput.length;
        }
        if (formatTokenFunctions[token]) {
          if (parsedInput) {
            getParsingFlags(config).empty = false;
          } else {
            getParsingFlags(config).unusedTokens.push(token);
          }
          addTimeToArrayFromToken(token, parsedInput, config);
        } else if (config._strict && !parsedInput) {
          getParsingFlags(config).unusedTokens.push(token);
        }
      }
      getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
      if (string.length > 0) {
        getParsingFlags(config).unusedInput.push(string);
      }
      if (getParsingFlags(config).bigHour === true && config._a[HOUR] <= 12 && config._a[HOUR] > 0) {
        getParsingFlags(config).bigHour = undefined;
      }
      config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
      configFromArray(config);
      checkOverflow(config);
    }
    function meridiemFixWrap(locale, hour, meridiem) {
      var isPm;
      if (meridiem == null) {
        return hour;
      }
      if (locale.meridiemHour != null) {
        return locale.meridiemHour(hour, meridiem);
      } else if (locale.isPM != null) {
        isPm = locale.isPM(meridiem);
        if (isPm && hour < 12) {
          hour += 12;
        }
        if (!isPm && hour === 12) {
          hour = 0;
        }
        return hour;
      } else {
        return hour;
      }
    }
    function configFromStringAndArray(config) {
      var tempConfig,
          bestMoment,
          scoreToBeat,
          i,
          currentScore;
      if (config._f.length === 0) {
        getParsingFlags(config).invalidFormat = true;
        config._d = new Date(NaN);
        return ;
      }
      for (i = 0; i < config._f.length; i++) {
        currentScore = 0;
        tempConfig = copyConfig({}, config);
        if (config._useUTC != null) {
          tempConfig._useUTC = config._useUTC;
        }
        tempConfig._f = config._f[i];
        configFromStringAndFormat(tempConfig);
        if (!valid__isValid(tempConfig)) {
          continue;
        }
        currentScore += getParsingFlags(tempConfig).charsLeftOver;
        currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
        getParsingFlags(tempConfig).score = currentScore;
        if (scoreToBeat == null || currentScore < scoreToBeat) {
          scoreToBeat = currentScore;
          bestMoment = tempConfig;
        }
      }
      extend(config, bestMoment || tempConfig);
    }
    function configFromObject(config) {
      if (config._d) {
        return ;
      }
      var i = normalizeObjectUnits(config._i);
      config._a = [i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond];
      configFromArray(config);
    }
    function createFromConfig(config) {
      var res = new Moment(checkOverflow(prepareConfig(config)));
      if (res._nextDay) {
        res.add(1, 'd');
        res._nextDay = undefined;
      }
      return res;
    }
    function prepareConfig(config) {
      var input = config._i,
          format = config._f;
      config._locale = config._locale || locale_locales__getLocale(config._l);
      if (input === null || (format === undefined && input === '')) {
        return valid__createInvalid({nullInput: true});
      }
      if (typeof input === 'string') {
        config._i = input = config._locale.preparse(input);
      }
      if (isMoment(input)) {
        return new Moment(checkOverflow(input));
      } else if (isArray(format)) {
        configFromStringAndArray(config);
      } else if (format) {
        configFromStringAndFormat(config);
      } else if (isDate(input)) {
        config._d = input;
      } else {
        configFromInput(config);
      }
      return config;
    }
    function configFromInput(config) {
      var input = config._i;
      if (input === undefined) {
        config._d = new Date();
      } else if (isDate(input)) {
        config._d = new Date(+input);
      } else if (typeof input === 'string') {
        configFromString(config);
      } else if (isArray(input)) {
        config._a = map(input.slice(0), function(obj) {
          return parseInt(obj, 10);
        });
        configFromArray(config);
      } else if (typeof(input) === 'object') {
        configFromObject(config);
      } else if (typeof(input) === 'number') {
        config._d = new Date(input);
      } else {
        utils_hooks__hooks.createFromInputFallback(config);
      }
    }
    function createLocalOrUTC(input, format, locale, strict, isUTC) {
      var c = {};
      if (typeof(locale) === 'boolean') {
        strict = locale;
        locale = undefined;
      }
      c._isAMomentObject = true;
      c._useUTC = c._isUTC = isUTC;
      c._l = locale;
      c._i = input;
      c._f = format;
      c._strict = strict;
      return createFromConfig(c);
    }
    function local__createLocal(input, format, locale, strict) {
      return createLocalOrUTC(input, format, locale, strict, false);
    }
    var prototypeMin = deprecate('moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548', function() {
      var other = local__createLocal.apply(null, arguments);
      return other < this ? this : other;
    });
    var prototypeMax = deprecate('moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548', function() {
      var other = local__createLocal.apply(null, arguments);
      return other > this ? this : other;
    });
    function pickBy(fn, moments) {
      var res,
          i;
      if (moments.length === 1 && isArray(moments[0])) {
        moments = moments[0];
      }
      if (!moments.length) {
        return local__createLocal();
      }
      res = moments[0];
      for (i = 1; i < moments.length; ++i) {
        if (!moments[i].isValid() || moments[i][fn](res)) {
          res = moments[i];
        }
      }
      return res;
    }
    function min() {
      var args = [].slice.call(arguments, 0);
      return pickBy('isBefore', args);
    }
    function max() {
      var args = [].slice.call(arguments, 0);
      return pickBy('isAfter', args);
    }
    function Duration(duration) {
      var normalizedInput = normalizeObjectUnits(duration),
          years = normalizedInput.year || 0,
          quarters = normalizedInput.quarter || 0,
          months = normalizedInput.month || 0,
          weeks = normalizedInput.week || 0,
          days = normalizedInput.day || 0,
          hours = normalizedInput.hour || 0,
          minutes = normalizedInput.minute || 0,
          seconds = normalizedInput.second || 0,
          milliseconds = normalizedInput.millisecond || 0;
      this._milliseconds = +milliseconds + seconds * 1e3 + minutes * 6e4 + hours * 36e5;
      this._days = +days + weeks * 7;
      this._months = +months + quarters * 3 + years * 12;
      this._data = {};
      this._locale = locale_locales__getLocale();
      this._bubble();
    }
    function isDuration(obj) {
      return obj instanceof Duration;
    }
    function offset(token, separator) {
      addFormatToken(token, 0, 0, function() {
        var offset = this.utcOffset();
        var sign = '+';
        if (offset < 0) {
          offset = -offset;
          sign = '-';
        }
        return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
      });
    }
    offset('Z', ':');
    offset('ZZ', '');
    addRegexToken('Z', matchOffset);
    addRegexToken('ZZ', matchOffset);
    addParseToken(['Z', 'ZZ'], function(input, array, config) {
      config._useUTC = true;
      config._tzm = offsetFromString(input);
    });
    var chunkOffset = /([\+\-]|\d\d)/gi;
    function offsetFromString(string) {
      var matches = ((string || '').match(matchOffset) || []);
      var chunk = matches[matches.length - 1] || [];
      var parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
      var minutes = +(parts[1] * 60) + toInt(parts[2]);
      return parts[0] === '+' ? minutes : -minutes;
    }
    function cloneWithOffset(input, model) {
      var res,
          diff;
      if (model._isUTC) {
        res = model.clone();
        diff = (isMoment(input) || isDate(input) ? +input : +local__createLocal(input)) - (+res);
        res._d.setTime(+res._d + diff);
        utils_hooks__hooks.updateOffset(res, false);
        return res;
      } else {
        return local__createLocal(input).local();
      }
    }
    function getDateOffset(m) {
      return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
    }
    utils_hooks__hooks.updateOffset = function() {};
    function getSetOffset(input, keepLocalTime) {
      var offset = this._offset || 0,
          localAdjust;
      if (input != null) {
        if (typeof input === 'string') {
          input = offsetFromString(input);
        }
        if (Math.abs(input) < 16) {
          input = input * 60;
        }
        if (!this._isUTC && keepLocalTime) {
          localAdjust = getDateOffset(this);
        }
        this._offset = input;
        this._isUTC = true;
        if (localAdjust != null) {
          this.add(localAdjust, 'm');
        }
        if (offset !== input) {
          if (!keepLocalTime || this._changeInProgress) {
            add_subtract__addSubtract(this, create__createDuration(input - offset, 'm'), 1, false);
          } else if (!this._changeInProgress) {
            this._changeInProgress = true;
            utils_hooks__hooks.updateOffset(this, true);
            this._changeInProgress = null;
          }
        }
        return this;
      } else {
        return this._isUTC ? offset : getDateOffset(this);
      }
    }
    function getSetZone(input, keepLocalTime) {
      if (input != null) {
        if (typeof input !== 'string') {
          input = -input;
        }
        this.utcOffset(input, keepLocalTime);
        return this;
      } else {
        return -this.utcOffset();
      }
    }
    function setOffsetToUTC(keepLocalTime) {
      return this.utcOffset(0, keepLocalTime);
    }
    function setOffsetToLocal(keepLocalTime) {
      if (this._isUTC) {
        this.utcOffset(0, keepLocalTime);
        this._isUTC = false;
        if (keepLocalTime) {
          this.subtract(getDateOffset(this), 'm');
        }
      }
      return this;
    }
    function setOffsetToParsedOffset() {
      if (this._tzm) {
        this.utcOffset(this._tzm);
      } else if (typeof this._i === 'string') {
        this.utcOffset(offsetFromString(this._i));
      }
      return this;
    }
    function hasAlignedHourOffset(input) {
      input = input ? local__createLocal(input).utcOffset() : 0;
      return (this.utcOffset() - input) % 60 === 0;
    }
    function isDaylightSavingTime() {
      return (this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset());
    }
    function isDaylightSavingTimeShifted() {
      if (typeof this._isDSTShifted !== 'undefined') {
        return this._isDSTShifted;
      }
      var c = {};
      copyConfig(c, this);
      c = prepareConfig(c);
      if (c._a) {
        var other = c._isUTC ? create_utc__createUTC(c._a) : local__createLocal(c._a);
        this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
      } else {
        this._isDSTShifted = false;
      }
      return this._isDSTShifted;
    }
    function isLocal() {
      return !this._isUTC;
    }
    function isUtcOffset() {
      return this._isUTC;
    }
    function isUtc() {
      return this._isUTC && this._offset === 0;
    }
    var aspNetRegex = /(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/;
    var create__isoRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;
    function create__createDuration(input, key) {
      var duration = input,
          match = null,
          sign,
          ret,
          diffRes;
      if (isDuration(input)) {
        duration = {
          ms: input._milliseconds,
          d: input._days,
          M: input._months
        };
      } else if (typeof input === 'number') {
        duration = {};
        if (key) {
          duration[key] = input;
        } else {
          duration.milliseconds = input;
        }
      } else if (!!(match = aspNetRegex.exec(input))) {
        sign = (match[1] === '-') ? -1 : 1;
        duration = {
          y: 0,
          d: toInt(match[DATE]) * sign,
          h: toInt(match[HOUR]) * sign,
          m: toInt(match[MINUTE]) * sign,
          s: toInt(match[SECOND]) * sign,
          ms: toInt(match[MILLISECOND]) * sign
        };
      } else if (!!(match = create__isoRegex.exec(input))) {
        sign = (match[1] === '-') ? -1 : 1;
        duration = {
          y: parseIso(match[2], sign),
          M: parseIso(match[3], sign),
          d: parseIso(match[4], sign),
          h: parseIso(match[5], sign),
          m: parseIso(match[6], sign),
          s: parseIso(match[7], sign),
          w: parseIso(match[8], sign)
        };
      } else if (duration == null) {
        duration = {};
      } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
        diffRes = momentsDifference(local__createLocal(duration.from), local__createLocal(duration.to));
        duration = {};
        duration.ms = diffRes.milliseconds;
        duration.M = diffRes.months;
      }
      ret = new Duration(duration);
      if (isDuration(input) && hasOwnProp(input, '_locale')) {
        ret._locale = input._locale;
      }
      return ret;
    }
    create__createDuration.fn = Duration.prototype;
    function parseIso(inp, sign) {
      var res = inp && parseFloat(inp.replace(',', '.'));
      return (isNaN(res) ? 0 : res) * sign;
    }
    function positiveMomentsDifference(base, other) {
      var res = {
        milliseconds: 0,
        months: 0
      };
      res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
      if (base.clone().add(res.months, 'M').isAfter(other)) {
        --res.months;
      }
      res.milliseconds = +other - +(base.clone().add(res.months, 'M'));
      return res;
    }
    function momentsDifference(base, other) {
      var res;
      other = cloneWithOffset(other, base);
      if (base.isBefore(other)) {
        res = positiveMomentsDifference(base, other);
      } else {
        res = positiveMomentsDifference(other, base);
        res.milliseconds = -res.milliseconds;
        res.months = -res.months;
      }
      return res;
    }
    function createAdder(direction, name) {
      return function(val, period) {
        var dur,
            tmp;
        if (period !== null && !isNaN(+period)) {
          deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period).');
          tmp = val;
          val = period;
          period = tmp;
        }
        val = typeof val === 'string' ? +val : val;
        dur = create__createDuration(val, period);
        add_subtract__addSubtract(this, dur, direction);
        return this;
      };
    }
    function add_subtract__addSubtract(mom, duration, isAdding, updateOffset) {
      var milliseconds = duration._milliseconds,
          days = duration._days,
          months = duration._months;
      updateOffset = updateOffset == null ? true : updateOffset;
      if (milliseconds) {
        mom._d.setTime(+mom._d + milliseconds * isAdding);
      }
      if (days) {
        get_set__set(mom, 'Date', get_set__get(mom, 'Date') + days * isAdding);
      }
      if (months) {
        setMonth(mom, get_set__get(mom, 'Month') + months * isAdding);
      }
      if (updateOffset) {
        utils_hooks__hooks.updateOffset(mom, days || months);
      }
    }
    var add_subtract__add = createAdder(1, 'add');
    var add_subtract__subtract = createAdder(-1, 'subtract');
    function moment_calendar__calendar(time, formats) {
      var now = time || local__createLocal(),
          sod = cloneWithOffset(now, this).startOf('day'),
          diff = this.diff(sod, 'days', true),
          format = diff < -6 ? 'sameElse' : diff < -1 ? 'lastWeek' : diff < 0 ? 'lastDay' : diff < 1 ? 'sameDay' : diff < 2 ? 'nextDay' : diff < 7 ? 'nextWeek' : 'sameElse';
      return this.format(formats && formats[format] || this.localeData().calendar(format, this, local__createLocal(now)));
    }
    function clone() {
      return new Moment(this);
    }
    function isAfter(input, units) {
      var inputMs;
      units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
      if (units === 'millisecond') {
        input = isMoment(input) ? input : local__createLocal(input);
        return +this > +input;
      } else {
        inputMs = isMoment(input) ? +input : +local__createLocal(input);
        return inputMs < +this.clone().startOf(units);
      }
    }
    function isBefore(input, units) {
      var inputMs;
      units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
      if (units === 'millisecond') {
        input = isMoment(input) ? input : local__createLocal(input);
        return +this < +input;
      } else {
        inputMs = isMoment(input) ? +input : +local__createLocal(input);
        return +this.clone().endOf(units) < inputMs;
      }
    }
    function isBetween(from, to, units) {
      return this.isAfter(from, units) && this.isBefore(to, units);
    }
    function isSame(input, units) {
      var inputMs;
      units = normalizeUnits(units || 'millisecond');
      if (units === 'millisecond') {
        input = isMoment(input) ? input : local__createLocal(input);
        return +this === +input;
      } else {
        inputMs = +local__createLocal(input);
        return +(this.clone().startOf(units)) <= inputMs && inputMs <= +(this.clone().endOf(units));
      }
    }
    function diff(input, units, asFloat) {
      var that = cloneWithOffset(input, this),
          zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4,
          delta,
          output;
      units = normalizeUnits(units);
      if (units === 'year' || units === 'month' || units === 'quarter') {
        output = monthDiff(this, that);
        if (units === 'quarter') {
          output = output / 3;
        } else if (units === 'year') {
          output = output / 12;
        }
      } else {
        delta = this - that;
        output = units === 'second' ? delta / 1e3 : units === 'minute' ? delta / 6e4 : units === 'hour' ? delta / 36e5 : units === 'day' ? (delta - zoneDelta) / 864e5 : units === 'week' ? (delta - zoneDelta) / 6048e5 : delta;
      }
      return asFloat ? output : absFloor(output);
    }
    function monthDiff(a, b) {
      var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
          anchor = a.clone().add(wholeMonthDiff, 'months'),
          anchor2,
          adjust;
      if (b - anchor < 0) {
        anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
        adjust = (b - anchor) / (anchor - anchor2);
      } else {
        anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
        adjust = (b - anchor) / (anchor2 - anchor);
      }
      return -(wholeMonthDiff + adjust);
    }
    utils_hooks__hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
    function toString() {
      return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }
    function moment_format__toISOString() {
      var m = this.clone().utc();
      if (0 < m.year() && m.year() <= 9999) {
        if ('function' === typeof Date.prototype.toISOString) {
          return this.toDate().toISOString();
        } else {
          return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
        }
      } else {
        return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
      }
    }
    function format(inputString) {
      var output = formatMoment(this, inputString || utils_hooks__hooks.defaultFormat);
      return this.localeData().postformat(output);
    }
    function from(time, withoutSuffix) {
      if (!this.isValid()) {
        return this.localeData().invalidDate();
      }
      return create__createDuration({
        to: this,
        from: time
      }).locale(this.locale()).humanize(!withoutSuffix);
    }
    function fromNow(withoutSuffix) {
      return this.from(local__createLocal(), withoutSuffix);
    }
    function to(time, withoutSuffix) {
      if (!this.isValid()) {
        return this.localeData().invalidDate();
      }
      return create__createDuration({
        from: this,
        to: time
      }).locale(this.locale()).humanize(!withoutSuffix);
    }
    function toNow(withoutSuffix) {
      return this.to(local__createLocal(), withoutSuffix);
    }
    function locale(key) {
      var newLocaleData;
      if (key === undefined) {
        return this._locale._abbr;
      } else {
        newLocaleData = locale_locales__getLocale(key);
        if (newLocaleData != null) {
          this._locale = newLocaleData;
        }
        return this;
      }
    }
    var lang = deprecate('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.', function(key) {
      if (key === undefined) {
        return this.localeData();
      } else {
        return this.locale(key);
      }
    });
    function localeData() {
      return this._locale;
    }
    function startOf(units) {
      units = normalizeUnits(units);
      switch (units) {
        case 'year':
          this.month(0);
        case 'quarter':
        case 'month':
          this.date(1);
        case 'week':
        case 'isoWeek':
        case 'day':
          this.hours(0);
        case 'hour':
          this.minutes(0);
        case 'minute':
          this.seconds(0);
        case 'second':
          this.milliseconds(0);
      }
      if (units === 'week') {
        this.weekday(0);
      }
      if (units === 'isoWeek') {
        this.isoWeekday(1);
      }
      if (units === 'quarter') {
        this.month(Math.floor(this.month() / 3) * 3);
      }
      return this;
    }
    function endOf(units) {
      units = normalizeUnits(units);
      if (units === undefined || units === 'millisecond') {
        return this;
      }
      return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
    }
    function to_type__valueOf() {
      return +this._d - ((this._offset || 0) * 60000);
    }
    function unix() {
      return Math.floor(+this / 1000);
    }
    function toDate() {
      return this._offset ? new Date(+this) : this._d;
    }
    function toArray() {
      var m = this;
      return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
    }
    function toObject() {
      var m = this;
      return {
        years: m.year(),
        months: m.month(),
        date: m.date(),
        hours: m.hours(),
        minutes: m.minutes(),
        seconds: m.seconds(),
        milliseconds: m.milliseconds()
      };
    }
    function moment_valid__isValid() {
      return valid__isValid(this);
    }
    function parsingFlags() {
      return extend({}, getParsingFlags(this));
    }
    function invalidAt() {
      return getParsingFlags(this).overflow;
    }
    addFormatToken(0, ['gg', 2], 0, function() {
      return this.weekYear() % 100;
    });
    addFormatToken(0, ['GG', 2], 0, function() {
      return this.isoWeekYear() % 100;
    });
    function addWeekYearFormatToken(token, getter) {
      addFormatToken(0, [token, token.length], 0, getter);
    }
    addWeekYearFormatToken('gggg', 'weekYear');
    addWeekYearFormatToken('ggggg', 'weekYear');
    addWeekYearFormatToken('GGGG', 'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');
    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');
    addRegexToken('G', matchSigned);
    addRegexToken('g', matchSigned);
    addRegexToken('GG', match1to2, match2);
    addRegexToken('gg', match1to2, match2);
    addRegexToken('GGGG', match1to4, match4);
    addRegexToken('gggg', match1to4, match4);
    addRegexToken('GGGGG', match1to6, match6);
    addRegexToken('ggggg', match1to6, match6);
    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function(input, week, config, token) {
      week[token.substr(0, 2)] = toInt(input);
    });
    addWeekParseToken(['gg', 'GG'], function(input, week, config, token) {
      week[token] = utils_hooks__hooks.parseTwoDigitYear(input);
    });
    function weeksInYear(year, dow, doy) {
      return weekOfYear(local__createLocal([year, 11, 31 + dow - doy]), dow, doy).week;
    }
    function getSetWeekYear(input) {
      var year = weekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).year;
      return input == null ? year : this.add((input - year), 'y');
    }
    function getSetISOWeekYear(input) {
      var year = weekOfYear(this, 1, 4).year;
      return input == null ? year : this.add((input - year), 'y');
    }
    function getISOWeeksInYear() {
      return weeksInYear(this.year(), 1, 4);
    }
    function getWeeksInYear() {
      var weekInfo = this.localeData()._week;
      return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }
    addFormatToken('Q', 0, 0, 'quarter');
    addUnitAlias('quarter', 'Q');
    addRegexToken('Q', match1);
    addParseToken('Q', function(input, array) {
      array[MONTH] = (toInt(input) - 1) * 3;
    });
    function getSetQuarter(input) {
      return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }
    addFormatToken('D', ['DD', 2], 'Do', 'date');
    addUnitAlias('date', 'D');
    addRegexToken('D', match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function(isStrict, locale) {
      return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;
    });
    addParseToken(['D', 'DD'], DATE);
    addParseToken('Do', function(input, array) {
      array[DATE] = toInt(input.match(match1to2)[0], 10);
    });
    var getSetDayOfMonth = makeGetSet('Date', true);
    addFormatToken('d', 0, 'do', 'day');
    addFormatToken('dd', 0, 0, function(format) {
      return this.localeData().weekdaysMin(this, format);
    });
    addFormatToken('ddd', 0, 0, function(format) {
      return this.localeData().weekdaysShort(this, format);
    });
    addFormatToken('dddd', 0, 0, function(format) {
      return this.localeData().weekdays(this, format);
    });
    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');
    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');
    addRegexToken('d', match1to2);
    addRegexToken('e', match1to2);
    addRegexToken('E', match1to2);
    addRegexToken('dd', matchWord);
    addRegexToken('ddd', matchWord);
    addRegexToken('dddd', matchWord);
    addWeekParseToken(['dd', 'ddd', 'dddd'], function(input, week, config) {
      var weekday = config._locale.weekdaysParse(input);
      if (weekday != null) {
        week.d = weekday;
      } else {
        getParsingFlags(config).invalidWeekday = input;
      }
    });
    addWeekParseToken(['d', 'e', 'E'], function(input, week, config, token) {
      week[token] = toInt(input);
    });
    function parseWeekday(input, locale) {
      if (typeof input !== 'string') {
        return input;
      }
      if (!isNaN(input)) {
        return parseInt(input, 10);
      }
      input = locale.weekdaysParse(input);
      if (typeof input === 'number') {
        return input;
      }
      return null;
    }
    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
    function localeWeekdays(m) {
      return this._weekdays[m.day()];
    }
    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
    function localeWeekdaysShort(m) {
      return this._weekdaysShort[m.day()];
    }
    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
    function localeWeekdaysMin(m) {
      return this._weekdaysMin[m.day()];
    }
    function localeWeekdaysParse(weekdayName) {
      var i,
          mom,
          regex;
      this._weekdaysParse = this._weekdaysParse || [];
      for (i = 0; i < 7; i++) {
        if (!this._weekdaysParse[i]) {
          mom = local__createLocal([2000, 1]).day(i);
          regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
          this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
        }
        if (this._weekdaysParse[i].test(weekdayName)) {
          return i;
        }
      }
    }
    function getSetDayOfWeek(input) {
      var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
      if (input != null) {
        input = parseWeekday(input, this.localeData());
        return this.add(input - day, 'd');
      } else {
        return day;
      }
    }
    function getSetLocaleDayOfWeek(input) {
      var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
      return input == null ? weekday : this.add(input - weekday, 'd');
    }
    function getSetISODayOfWeek(input) {
      return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);
    }
    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, function() {
      return this.hours() % 12 || 12;
    });
    function meridiem(token, lowercase) {
      addFormatToken(token, 0, 0, function() {
        return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
      });
    }
    meridiem('a', true);
    meridiem('A', false);
    addUnitAlias('hour', 'h');
    function matchMeridiem(isStrict, locale) {
      return locale._meridiemParse;
    }
    addRegexToken('a', matchMeridiem);
    addRegexToken('A', matchMeridiem);
    addRegexToken('H', match1to2);
    addRegexToken('h', match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);
    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['a', 'A'], function(input, array, config) {
      config._isPm = config._locale.isPM(input);
      config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function(input, array, config) {
      array[HOUR] = toInt(input);
      getParsingFlags(config).bigHour = true;
    });
    function localeIsPM(input) {
      return ((input + '').toLowerCase().charAt(0) === 'p');
    }
    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
    function localeMeridiem(hours, minutes, isLower) {
      if (hours > 11) {
        return isLower ? 'pm' : 'PM';
      } else {
        return isLower ? 'am' : 'AM';
      }
    }
    var getSetHour = makeGetSet('Hours', true);
    addFormatToken('m', ['mm', 2], 0, 'minute');
    addUnitAlias('minute', 'm');
    addRegexToken('m', match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken(['m', 'mm'], MINUTE);
    var getSetMinute = makeGetSet('Minutes', false);
    addFormatToken('s', ['ss', 2], 0, 'second');
    addUnitAlias('second', 's');
    addRegexToken('s', match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken(['s', 'ss'], SECOND);
    var getSetSecond = makeGetSet('Seconds', false);
    addFormatToken('S', 0, 0, function() {
      return ~~(this.millisecond() / 100);
    });
    addFormatToken(0, ['SS', 2], 0, function() {
      return ~~(this.millisecond() / 10);
    });
    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
    addFormatToken(0, ['SSSS', 4], 0, function() {
      return this.millisecond() * 10;
    });
    addFormatToken(0, ['SSSSS', 5], 0, function() {
      return this.millisecond() * 100;
    });
    addFormatToken(0, ['SSSSSS', 6], 0, function() {
      return this.millisecond() * 1000;
    });
    addFormatToken(0, ['SSSSSSS', 7], 0, function() {
      return this.millisecond() * 10000;
    });
    addFormatToken(0, ['SSSSSSSS', 8], 0, function() {
      return this.millisecond() * 100000;
    });
    addFormatToken(0, ['SSSSSSSSS', 9], 0, function() {
      return this.millisecond() * 1000000;
    });
    addUnitAlias('millisecond', 'ms');
    addRegexToken('S', match1to3, match1);
    addRegexToken('SS', match1to3, match2);
    addRegexToken('SSS', match1to3, match3);
    var token;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
      addRegexToken(token, matchUnsigned);
    }
    function parseMs(input, array) {
      array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }
    for (token = 'S'; token.length <= 9; token += 'S') {
      addParseToken(token, parseMs);
    }
    var getSetMillisecond = makeGetSet('Milliseconds', false);
    addFormatToken('z', 0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');
    function getZoneAbbr() {
      return this._isUTC ? 'UTC' : '';
    }
    function getZoneName() {
      return this._isUTC ? 'Coordinated Universal Time' : '';
    }
    var momentPrototype__proto = Moment.prototype;
    momentPrototype__proto.add = add_subtract__add;
    momentPrototype__proto.calendar = moment_calendar__calendar;
    momentPrototype__proto.clone = clone;
    momentPrototype__proto.diff = diff;
    momentPrototype__proto.endOf = endOf;
    momentPrototype__proto.format = format;
    momentPrototype__proto.from = from;
    momentPrototype__proto.fromNow = fromNow;
    momentPrototype__proto.to = to;
    momentPrototype__proto.toNow = toNow;
    momentPrototype__proto.get = getSet;
    momentPrototype__proto.invalidAt = invalidAt;
    momentPrototype__proto.isAfter = isAfter;
    momentPrototype__proto.isBefore = isBefore;
    momentPrototype__proto.isBetween = isBetween;
    momentPrototype__proto.isSame = isSame;
    momentPrototype__proto.isValid = moment_valid__isValid;
    momentPrototype__proto.lang = lang;
    momentPrototype__proto.locale = locale;
    momentPrototype__proto.localeData = localeData;
    momentPrototype__proto.max = prototypeMax;
    momentPrototype__proto.min = prototypeMin;
    momentPrototype__proto.parsingFlags = parsingFlags;
    momentPrototype__proto.set = getSet;
    momentPrototype__proto.startOf = startOf;
    momentPrototype__proto.subtract = add_subtract__subtract;
    momentPrototype__proto.toArray = toArray;
    momentPrototype__proto.toObject = toObject;
    momentPrototype__proto.toDate = toDate;
    momentPrototype__proto.toISOString = moment_format__toISOString;
    momentPrototype__proto.toJSON = moment_format__toISOString;
    momentPrototype__proto.toString = toString;
    momentPrototype__proto.unix = unix;
    momentPrototype__proto.valueOf = to_type__valueOf;
    momentPrototype__proto.year = getSetYear;
    momentPrototype__proto.isLeapYear = getIsLeapYear;
    momentPrototype__proto.weekYear = getSetWeekYear;
    momentPrototype__proto.isoWeekYear = getSetISOWeekYear;
    momentPrototype__proto.quarter = momentPrototype__proto.quarters = getSetQuarter;
    momentPrototype__proto.month = getSetMonth;
    momentPrototype__proto.daysInMonth = getDaysInMonth;
    momentPrototype__proto.week = momentPrototype__proto.weeks = getSetWeek;
    momentPrototype__proto.isoWeek = momentPrototype__proto.isoWeeks = getSetISOWeek;
    momentPrototype__proto.weeksInYear = getWeeksInYear;
    momentPrototype__proto.isoWeeksInYear = getISOWeeksInYear;
    momentPrototype__proto.date = getSetDayOfMonth;
    momentPrototype__proto.day = momentPrototype__proto.days = getSetDayOfWeek;
    momentPrototype__proto.weekday = getSetLocaleDayOfWeek;
    momentPrototype__proto.isoWeekday = getSetISODayOfWeek;
    momentPrototype__proto.dayOfYear = getSetDayOfYear;
    momentPrototype__proto.hour = momentPrototype__proto.hours = getSetHour;
    momentPrototype__proto.minute = momentPrototype__proto.minutes = getSetMinute;
    momentPrototype__proto.second = momentPrototype__proto.seconds = getSetSecond;
    momentPrototype__proto.millisecond = momentPrototype__proto.milliseconds = getSetMillisecond;
    momentPrototype__proto.utcOffset = getSetOffset;
    momentPrototype__proto.utc = setOffsetToUTC;
    momentPrototype__proto.local = setOffsetToLocal;
    momentPrototype__proto.parseZone = setOffsetToParsedOffset;
    momentPrototype__proto.hasAlignedHourOffset = hasAlignedHourOffset;
    momentPrototype__proto.isDST = isDaylightSavingTime;
    momentPrototype__proto.isDSTShifted = isDaylightSavingTimeShifted;
    momentPrototype__proto.isLocal = isLocal;
    momentPrototype__proto.isUtcOffset = isUtcOffset;
    momentPrototype__proto.isUtc = isUtc;
    momentPrototype__proto.isUTC = isUtc;
    momentPrototype__proto.zoneAbbr = getZoneAbbr;
    momentPrototype__proto.zoneName = getZoneName;
    momentPrototype__proto.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
    momentPrototype__proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
    momentPrototype__proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);
    momentPrototype__proto.zone = deprecate('moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779', getSetZone);
    var momentPrototype = momentPrototype__proto;
    function moment__createUnix(input) {
      return local__createLocal(input * 1000);
    }
    function moment__createInZone() {
      return local__createLocal.apply(null, arguments).parseZone();
    }
    var defaultCalendar = {
      sameDay: '[Today at] LT',
      nextDay: '[Tomorrow at] LT',
      nextWeek: 'dddd [at] LT',
      lastDay: '[Yesterday at] LT',
      lastWeek: '[Last] dddd [at] LT',
      sameElse: 'L'
    };
    function locale_calendar__calendar(key, mom, now) {
      var output = this._calendar[key];
      return typeof output === 'function' ? output.call(mom, now) : output;
    }
    var defaultLongDateFormat = {
      LTS: 'h:mm:ss A',
      LT: 'h:mm A',
      L: 'MM/DD/YYYY',
      LL: 'MMMM D, YYYY',
      LLL: 'MMMM D, YYYY h:mm A',
      LLLL: 'dddd, MMMM D, YYYY h:mm A'
    };
    function longDateFormat(key) {
      var format = this._longDateFormat[key],
          formatUpper = this._longDateFormat[key.toUpperCase()];
      if (format || !formatUpper) {
        return format;
      }
      this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function(val) {
        return val.slice(1);
      });
      return this._longDateFormat[key];
    }
    var defaultInvalidDate = 'Invalid date';
    function invalidDate() {
      return this._invalidDate;
    }
    var defaultOrdinal = '%d';
    var defaultOrdinalParse = /\d{1,2}/;
    function ordinal(number) {
      return this._ordinal.replace('%d', number);
    }
    function preParsePostFormat(string) {
      return string;
    }
    var defaultRelativeTime = {
      future: 'in %s',
      past: '%s ago',
      s: 'a few seconds',
      m: 'a minute',
      mm: '%d minutes',
      h: 'an hour',
      hh: '%d hours',
      d: 'a day',
      dd: '%d days',
      M: 'a month',
      MM: '%d months',
      y: 'a year',
      yy: '%d years'
    };
    function relative__relativeTime(number, withoutSuffix, string, isFuture) {
      var output = this._relativeTime[string];
      return (typeof output === 'function') ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
    }
    function pastFuture(diff, output) {
      var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
      return typeof format === 'function' ? format(output) : format.replace(/%s/i, output);
    }
    function locale_set__set(config) {
      var prop,
          i;
      for (i in config) {
        prop = config[i];
        if (typeof prop === 'function') {
          this[i] = prop;
        } else {
          this['_' + i] = prop;
        }
      }
      this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\d{1,2}/).source);
    }
    var prototype__proto = Locale.prototype;
    prototype__proto._calendar = defaultCalendar;
    prototype__proto.calendar = locale_calendar__calendar;
    prototype__proto._longDateFormat = defaultLongDateFormat;
    prototype__proto.longDateFormat = longDateFormat;
    prototype__proto._invalidDate = defaultInvalidDate;
    prototype__proto.invalidDate = invalidDate;
    prototype__proto._ordinal = defaultOrdinal;
    prototype__proto.ordinal = ordinal;
    prototype__proto._ordinalParse = defaultOrdinalParse;
    prototype__proto.preparse = preParsePostFormat;
    prototype__proto.postformat = preParsePostFormat;
    prototype__proto._relativeTime = defaultRelativeTime;
    prototype__proto.relativeTime = relative__relativeTime;
    prototype__proto.pastFuture = pastFuture;
    prototype__proto.set = locale_set__set;
    prototype__proto.months = localeMonths;
    prototype__proto._months = defaultLocaleMonths;
    prototype__proto.monthsShort = localeMonthsShort;
    prototype__proto._monthsShort = defaultLocaleMonthsShort;
    prototype__proto.monthsParse = localeMonthsParse;
    prototype__proto.week = localeWeek;
    prototype__proto._week = defaultLocaleWeek;
    prototype__proto.firstDayOfYear = localeFirstDayOfYear;
    prototype__proto.firstDayOfWeek = localeFirstDayOfWeek;
    prototype__proto.weekdays = localeWeekdays;
    prototype__proto._weekdays = defaultLocaleWeekdays;
    prototype__proto.weekdaysMin = localeWeekdaysMin;
    prototype__proto._weekdaysMin = defaultLocaleWeekdaysMin;
    prototype__proto.weekdaysShort = localeWeekdaysShort;
    prototype__proto._weekdaysShort = defaultLocaleWeekdaysShort;
    prototype__proto.weekdaysParse = localeWeekdaysParse;
    prototype__proto.isPM = localeIsPM;
    prototype__proto._meridiemParse = defaultLocaleMeridiemParse;
    prototype__proto.meridiem = localeMeridiem;
    function lists__get(format, index, field, setter) {
      var locale = locale_locales__getLocale();
      var utc = create_utc__createUTC().set(setter, index);
      return locale[field](utc, format);
    }
    function list(format, index, field, count, setter) {
      if (typeof format === 'number') {
        index = format;
        format = undefined;
      }
      format = format || '';
      if (index != null) {
        return lists__get(format, index, field, setter);
      }
      var i;
      var out = [];
      for (i = 0; i < count; i++) {
        out[i] = lists__get(format, i, field, setter);
      }
      return out;
    }
    function lists__listMonths(format, index) {
      return list(format, index, 'months', 12, 'month');
    }
    function lists__listMonthsShort(format, index) {
      return list(format, index, 'monthsShort', 12, 'month');
    }
    function lists__listWeekdays(format, index) {
      return list(format, index, 'weekdays', 7, 'day');
    }
    function lists__listWeekdaysShort(format, index) {
      return list(format, index, 'weekdaysShort', 7, 'day');
    }
    function lists__listWeekdaysMin(format, index) {
      return list(format, index, 'weekdaysMin', 7, 'day');
    }
    locale_locales__getSetGlobalLocale('en', {
      ordinalParse: /\d{1,2}(th|st|nd|rd)/,
      ordinal: function(number) {
        var b = number % 10,
            output = (toInt(number % 100 / 10) === 1) ? 'th' : (b === 1) ? 'st' : (b === 2) ? 'nd' : (b === 3) ? 'rd' : 'th';
        return number + output;
      }
    });
    utils_hooks__hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', locale_locales__getSetGlobalLocale);
    utils_hooks__hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', locale_locales__getLocale);
    var mathAbs = Math.abs;
    function duration_abs__abs() {
      var data = this._data;
      this._milliseconds = mathAbs(this._milliseconds);
      this._days = mathAbs(this._days);
      this._months = mathAbs(this._months);
      data.milliseconds = mathAbs(data.milliseconds);
      data.seconds = mathAbs(data.seconds);
      data.minutes = mathAbs(data.minutes);
      data.hours = mathAbs(data.hours);
      data.months = mathAbs(data.months);
      data.years = mathAbs(data.years);
      return this;
    }
    function duration_add_subtract__addSubtract(duration, input, value, direction) {
      var other = create__createDuration(input, value);
      duration._milliseconds += direction * other._milliseconds;
      duration._days += direction * other._days;
      duration._months += direction * other._months;
      return duration._bubble();
    }
    function duration_add_subtract__add(input, value) {
      return duration_add_subtract__addSubtract(this, input, value, 1);
    }
    function duration_add_subtract__subtract(input, value) {
      return duration_add_subtract__addSubtract(this, input, value, -1);
    }
    function absCeil(number) {
      if (number < 0) {
        return Math.floor(number);
      } else {
        return Math.ceil(number);
      }
    }
    function bubble() {
      var milliseconds = this._milliseconds;
      var days = this._days;
      var months = this._months;
      var data = this._data;
      var seconds,
          minutes,
          hours,
          years,
          monthsFromDays;
      if (!((milliseconds >= 0 && days >= 0 && months >= 0) || (milliseconds <= 0 && days <= 0 && months <= 0))) {
        milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
        days = 0;
        months = 0;
      }
      data.milliseconds = milliseconds % 1000;
      seconds = absFloor(milliseconds / 1000);
      data.seconds = seconds % 60;
      minutes = absFloor(seconds / 60);
      data.minutes = minutes % 60;
      hours = absFloor(minutes / 60);
      data.hours = hours % 24;
      days += absFloor(hours / 24);
      monthsFromDays = absFloor(daysToMonths(days));
      months += monthsFromDays;
      days -= absCeil(monthsToDays(monthsFromDays));
      years = absFloor(months / 12);
      months %= 12;
      data.days = days;
      data.months = months;
      data.years = years;
      return this;
    }
    function daysToMonths(days) {
      return days * 4800 / 146097;
    }
    function monthsToDays(months) {
      return months * 146097 / 4800;
    }
    function as(units) {
      var days;
      var months;
      var milliseconds = this._milliseconds;
      units = normalizeUnits(units);
      if (units === 'month' || units === 'year') {
        days = this._days + milliseconds / 864e5;
        months = this._months + daysToMonths(days);
        return units === 'month' ? months : months / 12;
      } else {
        days = this._days + Math.round(monthsToDays(this._months));
        switch (units) {
          case 'week':
            return days / 7 + milliseconds / 6048e5;
          case 'day':
            return days + milliseconds / 864e5;
          case 'hour':
            return days * 24 + milliseconds / 36e5;
          case 'minute':
            return days * 1440 + milliseconds / 6e4;
          case 'second':
            return days * 86400 + milliseconds / 1000;
          case 'millisecond':
            return Math.floor(days * 864e5) + milliseconds;
          default:
            throw new Error('Unknown unit ' + units);
        }
      }
    }
    function duration_as__valueOf() {
      return (this._milliseconds + this._days * 864e5 + (this._months % 12) * 2592e6 + toInt(this._months / 12) * 31536e6);
    }
    function makeAs(alias) {
      return function() {
        return this.as(alias);
      };
    }
    var asMilliseconds = makeAs('ms');
    var asSeconds = makeAs('s');
    var asMinutes = makeAs('m');
    var asHours = makeAs('h');
    var asDays = makeAs('d');
    var asWeeks = makeAs('w');
    var asMonths = makeAs('M');
    var asYears = makeAs('y');
    function duration_get__get(units) {
      units = normalizeUnits(units);
      return this[units + 's']();
    }
    function makeGetter(name) {
      return function() {
        return this._data[name];
      };
    }
    var milliseconds = makeGetter('milliseconds');
    var seconds = makeGetter('seconds');
    var minutes = makeGetter('minutes');
    var hours = makeGetter('hours');
    var days = makeGetter('days');
    var months = makeGetter('months');
    var years = makeGetter('years');
    function weeks() {
      return absFloor(this.days() / 7);
    }
    var round = Math.round;
    var thresholds = {
      s: 45,
      m: 45,
      h: 22,
      d: 26,
      M: 11
    };
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
      return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }
    function duration_humanize__relativeTime(posNegDuration, withoutSuffix, locale) {
      var duration = create__createDuration(posNegDuration).abs();
      var seconds = round(duration.as('s'));
      var minutes = round(duration.as('m'));
      var hours = round(duration.as('h'));
      var days = round(duration.as('d'));
      var months = round(duration.as('M'));
      var years = round(duration.as('y'));
      var a = seconds < thresholds.s && ['s', seconds] || minutes === 1 && ['m'] || minutes < thresholds.m && ['mm', minutes] || hours === 1 && ['h'] || hours < thresholds.h && ['hh', hours] || days === 1 && ['d'] || days < thresholds.d && ['dd', days] || months === 1 && ['M'] || months < thresholds.M && ['MM', months] || years === 1 && ['y'] || ['yy', years];
      a[2] = withoutSuffix;
      a[3] = +posNegDuration > 0;
      a[4] = locale;
      return substituteTimeAgo.apply(null, a);
    }
    function duration_humanize__getSetRelativeTimeThreshold(threshold, limit) {
      if (thresholds[threshold] === undefined) {
        return false;
      }
      if (limit === undefined) {
        return thresholds[threshold];
      }
      thresholds[threshold] = limit;
      return true;
    }
    function humanize(withSuffix) {
      var locale = this.localeData();
      var output = duration_humanize__relativeTime(this, !withSuffix, locale);
      if (withSuffix) {
        output = locale.pastFuture(+this, output);
      }
      return locale.postformat(output);
    }
    var iso_string__abs = Math.abs;
    function iso_string__toISOString() {
      var seconds = iso_string__abs(this._milliseconds) / 1000;
      var days = iso_string__abs(this._days);
      var months = iso_string__abs(this._months);
      var minutes,
          hours,
          years;
      minutes = absFloor(seconds / 60);
      hours = absFloor(minutes / 60);
      seconds %= 60;
      minutes %= 60;
      years = absFloor(months / 12);
      months %= 12;
      var Y = years;
      var M = months;
      var D = days;
      var h = hours;
      var m = minutes;
      var s = seconds;
      var total = this.asSeconds();
      if (!total) {
        return 'P0D';
      }
      return (total < 0 ? '-' : '') + 'P' + (Y ? Y + 'Y' : '') + (M ? M + 'M' : '') + (D ? D + 'D' : '') + ((h || m || s) ? 'T' : '') + (h ? h + 'H' : '') + (m ? m + 'M' : '') + (s ? s + 'S' : '');
    }
    var duration_prototype__proto = Duration.prototype;
    duration_prototype__proto.abs = duration_abs__abs;
    duration_prototype__proto.add = duration_add_subtract__add;
    duration_prototype__proto.subtract = duration_add_subtract__subtract;
    duration_prototype__proto.as = as;
    duration_prototype__proto.asMilliseconds = asMilliseconds;
    duration_prototype__proto.asSeconds = asSeconds;
    duration_prototype__proto.asMinutes = asMinutes;
    duration_prototype__proto.asHours = asHours;
    duration_prototype__proto.asDays = asDays;
    duration_prototype__proto.asWeeks = asWeeks;
    duration_prototype__proto.asMonths = asMonths;
    duration_prototype__proto.asYears = asYears;
    duration_prototype__proto.valueOf = duration_as__valueOf;
    duration_prototype__proto._bubble = bubble;
    duration_prototype__proto.get = duration_get__get;
    duration_prototype__proto.milliseconds = milliseconds;
    duration_prototype__proto.seconds = seconds;
    duration_prototype__proto.minutes = minutes;
    duration_prototype__proto.hours = hours;
    duration_prototype__proto.days = days;
    duration_prototype__proto.weeks = weeks;
    duration_prototype__proto.months = months;
    duration_prototype__proto.years = years;
    duration_prototype__proto.humanize = humanize;
    duration_prototype__proto.toISOString = iso_string__toISOString;
    duration_prototype__proto.toString = iso_string__toISOString;
    duration_prototype__proto.toJSON = iso_string__toISOString;
    duration_prototype__proto.locale = locale;
    duration_prototype__proto.localeData = localeData;
    duration_prototype__proto.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', iso_string__toISOString);
    duration_prototype__proto.lang = lang;
    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');
    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function(input, array, config) {
      config._d = new Date(parseFloat(input, 10) * 1000);
    });
    addParseToken('x', function(input, array, config) {
      config._d = new Date(toInt(input));
    });
    utils_hooks__hooks.version = '2.10.6';
    setHookCallback(local__createLocal);
    utils_hooks__hooks.fn = momentPrototype;
    utils_hooks__hooks.min = min;
    utils_hooks__hooks.max = max;
    utils_hooks__hooks.utc = create_utc__createUTC;
    utils_hooks__hooks.unix = moment__createUnix;
    utils_hooks__hooks.months = lists__listMonths;
    utils_hooks__hooks.isDate = isDate;
    utils_hooks__hooks.locale = locale_locales__getSetGlobalLocale;
    utils_hooks__hooks.invalid = valid__createInvalid;
    utils_hooks__hooks.duration = create__createDuration;
    utils_hooks__hooks.isMoment = isMoment;
    utils_hooks__hooks.weekdays = lists__listWeekdays;
    utils_hooks__hooks.parseZone = moment__createInZone;
    utils_hooks__hooks.localeData = locale_locales__getLocale;
    utils_hooks__hooks.isDuration = isDuration;
    utils_hooks__hooks.monthsShort = lists__listMonthsShort;
    utils_hooks__hooks.weekdaysMin = lists__listWeekdaysMin;
    utils_hooks__hooks.defineLocale = defineLocale;
    utils_hooks__hooks.weekdaysShort = lists__listWeekdaysShort;
    utils_hooks__hooks.normalizeUnits = normalizeUnits;
    utils_hooks__hooks.relativeTimeThreshold = duration_humanize__getSetRelativeTimeThreshold;
    var _moment = utils_hooks__hooks;
    return _moment;
  }));
  global.define = __define;
  return module.exports;
});

System.register("npm:jclass@1.1.9/index", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  "format cjs";
  (function(factory) {
    if (typeof(define) == "function" && define.amd) {
      define([], factory);
    } else if (typeof(exports) == "object") {
      exports = factory();
      if (typeof module === "object") {
        module.exports = exports;
      }
    } else if (window) {
      window.JClass = factory();
    } else if (typeof(console) == "object" && console.error instanceof Function) {
      console.error("cannot determine environment");
    }
  })(function() {
    var isFn = function(obj) {
      return obj instanceof Function;
    };
    var extend = function(target) {
      var sources = Array.prototype.slice.call(arguments, 1);
      for (var i in sources) {
        var source = sources[i];
        if (typeof(source) != "object") {
          continue;
        }
        for (var key in source) {
          target[key] = source[key];
        }
      }
      return target;
    };
    var defaultOptions = {_isClassObject: false};
    var initializing = false;
    var BaseClass = function() {};
    BaseClass._subClasses = [];
    BaseClass.prototype.init = function() {};
    BaseClass._extend = function(instanceMembers, classMembers, options) {
      if (instanceMembers === undefined) {
        instanceMembers = {};
      }
      if (classMembers === undefined) {
        classMembers = {};
      }
      if (options === undefined) {
        options = {};
      }
      options = extend({}, defaultOptions, options);
      var JClass = function() {
        if (initializing) {
          return ;
        }
        this._class = JClass;
        if (this.init instanceof Function) {
          this.init.apply(this, arguments);
        }
      };
      var SuperClass = this;
      initializing = true;
      var prototype = new SuperClass();
      initializing = false;
      var superPrototype = SuperClass.prototype;
      JClass.prototype = prototype;
      JClass.prototype.constructor = JClass;
      JClass._superClass = SuperClass;
      JClass._subClasses = [];
      SuperClass._subClasses.push(JClass);
      JClass._extend = SuperClass._extend;
      JClass._extends = function(target) {
        if (this._superClass == BaseClass) {
          return false;
        }
        if (target == this._superClass || target == BaseClass) {
          return true;
        }
        return this._superClass._extends(target);
      };
      for (var key in instanceMembers) {
        var property = Object.getOwnPropertyDescriptor(instanceMembers, key);
        var member = property.value;
        if (typeof(member) == "object" && member.descriptor) {
          Object.defineProperty(prototype, key, member);
        } else if (!("value" in property) && ("set" in property || "get" in property)) {
          Object.defineProperty(prototype, key, property);
        } else {
          prototype[key] = member;
          var superMember = superPrototype[key];
          if (isFn(member) && isFn(superMember) && member !== superMember) {
            member._super = superMember;
          }
        }
      }
      if (!options._isClassObject) {
        var ClassMembersSuperClass = SuperClass._members === undefined ? BaseClass : SuperClass._members._class;
        var opts = extend({}, options, {_isClassObject: true});
        var ClassMembersClass = ClassMembersSuperClass._extend(classMembers, {}, opts);
        JClass._members = new ClassMembersClass();
      }
      return JClass;
    };
    BaseClass._convert = function(cls, options) {
      var instanceMembers = cls.prototype;
      instanceMembers.init = function() {
        var origin = this._origin = BaseClass._construct(cls, arguments);
        Object.keys(origin).forEach(function(key) {
          if (!origin.hasOwnProperty(key)) {
            return ;
          }
          Object.defineProperty(this, key, {get: function() {
              return origin[key];
            }});
        }, this);
      };
      return BaseClass._extend(instanceMembers, {}, options);
    };
    BaseClass._construct = function(cls, args) {
      if (args === undefined) {
        args = [];
      }
      var Class = function() {
        return cls.apply(this, args);
      };
      Class.prototype = cls.prototype;
      return new Class();
    };
    BaseClass._superDescriptor = function(cls, prop) {
      if ("_class" in cls && cls instanceof cls._class) {
        cls = cls._class;
      }
      if ("_extends" in cls && cls._extends instanceof Function && cls._extends(this)) {
        return Object.getOwnPropertyDescriptor(cls._superClass.prototype, prop);
      } else {
        return undefined;
      }
    };
    return BaseClass;
  });
  global.define = __define;
  return module.exports;
});

System.register("npm:process@0.10.1/browser", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var process = module.exports = {};
  var queue = [];
  var draining = false;
  function drainQueue() {
    if (draining) {
      return ;
    }
    draining = true;
    var currentQueue;
    var len = queue.length;
    while (len) {
      currentQueue = queue;
      queue = [];
      var i = -1;
      while (++i < len) {
        currentQueue[i]();
      }
      len = queue.length;
    }
    draining = false;
  }
  process.nextTick = function(fun) {
    queue.push(fun);
    if (!draining) {
      setTimeout(drainQueue, 0);
    }
  };
  process.title = 'browser';
  process.browser = true;
  process.env = {};
  process.argv = [];
  process.version = '';
  process.versions = {};
  function noop() {}
  process.on = noop;
  process.addListener = noop;
  process.once = noop;
  process.off = noop;
  process.removeListener = noop;
  process.removeAllListeners = noop;
  process.emit = noop;
  process.binding = function(name) {
    throw new Error('process.binding is not supported');
  };
  process.cwd = function() {
    return '/';
  };
  process.chdir = function(dir) {
    throw new Error('process.chdir is not supported');
  };
  process.umask = function() {
    return 0;
  };
  global.define = __define;
  return module.exports;
});

System.register("promo-manager/common/item-selection/item-selection-template.html!github:systemjs/plugin-text@0.0.2", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = "<script type=\"text/ng-template\"  id=\"tree_item_selection_renderer.html\">\n\t<div ng-if=\"node.name\">\n\t    \t<span item-selection-indeterminate-checkbox=\"node\" \n\t    \tmerchandise-hierarchy=\"ctrl.itemSelectionTree\"\n\t    \t\t>\n\t    \t</span>\n\t    \t<span class=\"hyperlink\" ng-click=\"openState = !openState; ctrl.toggle(openState, node)\" ng-class=\"{searchedItem:node.searched, selectedItem:ctrl.isSelectedItem(node)}\">{{::node.name}}</span>\n\t</div>\n    <ul class=\"item-search-ul\">\n        <li class=\"item-search-li\" ng-repeat=\"node in node.nodes\" ng-include=\"'tree_item_selection_renderer.html'\">\n\t    </li>\n    </ul>\n</script>\n\n<div class=\"layout-modal\">\n    <div class=\"layout-modal-header\">\n        <div class=\"layout-modal-title\" translate=\"ITEM_SEARCH_TITLE\"></div>\n    </div>\n    <div class=\"layout-modal-body layout-view-input\">\n\t\t<span class=\"layout-input\">\n\t\t     <input class=\"search-query\" type=\"text\" ng-model=\"ctrl.search.itemSearch\" ng-model-options=\"{updateOn: 'default blur',debounce: {default: 1000, blur: 0}, getterSetter: true, allowInvalid: true}\" placeholder=\"Search...\" />\n\t\t</span>\n\n\t\t<ul class=\"item-search-ul\">\n\t\t    <li class=\"item-search-list\" ng-repeat=\"node in ctrl.itemTree\" ng-include=\"'tree_item_selection_renderer.html'\"></li>\n\t\t</ul>\n\t    <!--  table -->\n\t    <div ng-if=\"ctrl.itemSelections.length\">\n\t        <table class=\"table table-bordered table-striped\">\n\t            <tr>\n\t                <th colspan=\"5\">\n\t                    <div class=\"pull-left\" translate=\"ITEM_SEARCH_SELECTED_ITEMS_LABEL\"></div>\n\t                    &nbsp;{{ctrl.itemSelections.length}}\n\t                </th>\n\t            </tr>\n\t            <tr ng-repeat=\"item in ctrl.itemSelections track by $index\">\n\t                <td>\n\t                \t<span class=\"hyperlink\" ng-click=\"ctrl.openSelection(item)\">{{item.name}}</span>\n\t                </td>\n\t                <td>\n\t\t                <span ng-click=\"ctrl.deleteSelection(item)\" class=\"layout-btn-delete hyperlink\">&times;</span>\n\t                </td>\n\t            </tr>\n\t        </table>\n\t    </div>\n    </div>\n    <div class=\"layout-modal-footer button-spacing\">\n        <span ng-click=\"ctrl.dismiss()\" class=\"layout-btn layout-btn-cancel\" translate=\"LAYOUT_VIEW_MODAL_BUTTON_CLOSE\"></span> \n        <span ng-click=\"ctrl.close()\" class=\"layout-btn\" translate=\"LAYOUT_VIEW_MODAL_BUTTON_OK\"></span> \n    </div>\n</div>\n";
  global.define = __define;
  return module.exports;
});

System.register("promo-manager/layout-view/page-actions/page-add-modal.html!github:systemjs/plugin-text@0.0.2", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = "<div class=\"layout-modal\">\r\n    <div class=\"layout-modal-header\">\r\n        <div class=\"layout-modal-title\" translate=\"LAYOUT_VIEW_PAGE_ADD_TITLE\"></div>\r\n    </div>\r\n    <div class=\"layout-modal-body layout-input layout-input-header-top\">\r\n        <label>{{::'LAYOUT_VIEW_PAGES_ADD_LABEL'|translate}}</label>\r\n        <input  type=\"text\" ng-change=\"ctrl.createGrid()\" ng-model=\"ctrl.count\" required>\r\n        <label>{{::'LAYOUT_VIEW_PAGES_HEIGHT_COLUMN'|translate}}</label>\r\n        <input type=\"text\" ng-model=\"ctrl.h\" required>\r\n        <label>{{::'LAYOUT_VIEW_PAGES_WIDTH_COLUMN'|translate}}</label>\r\n        <input  type=\"text\" ng-model=\"ctrl.w\" required>\r\n    </div>\r\n    <div class=\"layout-modal-body layout-input\">\r\n        <table class=\"table table-striped table-condensed table-hover\">\r\n            <tr>\r\n                <th translate=\"LAYOUT_VIEW_PAGES_PAGE_COLUMN\"></th>\r\n                <th translate=\"LAYOUT_VIEW_PAGES_GRID_COLUMN\"></th>\r\n            </tr>\r\n            <tr ng-repeat=\"row in ctrl.grid\">\r\n                <td><input readonly ng-model=\"row.index\"></td>\r\n                <td><input  ng-model=\"row.pageVersionName\"></td>\r\n            </tr>        \r\n        </table>\r\n    </div>\r\n    <div class=\"layout-modal-footer button-spacing\">\r\n        <span ng-click=\"ctrl.dismiss()\" class=\"layout-btn layout-btn-cancel\" translate=\"LAYOUT_VIEW_MODAL_BUTTON_CLOSE\"></span> \r\n        <span ng-click=\"ctrl.apply()\" class=\"layout-btn\" translate=\"LAYOUT_VIEW_MODAL_BUTTON_OK\"></span> \r\n    </div>\r\n</div>\r\n";
  global.define = __define;
  return module.exports;
});

System.register("promo-manager/layout-view/page-actions/page-index-modal.html!github:systemjs/plugin-text@0.0.2", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = "<div class=\"layout-modal\">\r\n    <div class=\"layout-modal-header\">\r\n        <div class=\"layout-modal-title\" translate=\"LAYOUT_VIEW_PAGE_INDEX_TITLE\"></div>\r\n    </div>\r\n    <div class=\"layout-modal-body layout-input\">\r\n        <table class=\"table table-striped table-condensed table-hover\">\r\n            <tr>\r\n                <th translate=\"LAYOUT_VIEW_PAGES_PAGE_COLUMN\"></th>\r\n                <th translate=\"LAYOUT_VIEW_PAGES_GRID_COLUMN\"></th>\r\n            </tr>\r\n            <tr ng-repeat=\"row in ctrl.grid\">\r\n                <td><input ng-model=\"row.index\"></td>\r\n                <td><input readonly ng-model=\"row.name\"></td>\r\n           </tr>        \r\n        </table>\r\n    </div>\r\n    <div class=\"layout-modal-footer button-spacing\">\r\n        <span ng-click=\"ctrl.dismiss()\" class=\"layout-btn layout-btn-cancel\" translate=\"LAYOUT_VIEW_MODAL_BUTTON_CLOSE\"></span> \r\n        <span ng-click=\"ctrl.apply()\" class=\"layout-btn\" translate=\"LAYOUT_VIEW_MODAL_BUTTON_OK\"></span> \r\n    </div>\r\n</div>\r\n";
  global.define = __define;
  return module.exports;
});

System.register("promo-manager/layout-view/page-actions/page-edit-modal.html!github:systemjs/plugin-text@0.0.2", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = "<div class=\"layout-modal\">\r\n    <div class=\"layout-modal-header\">\r\n        <div class=\"layout-modal-title\">{{::ctrl.title}}</div>\r\n    </div>\r\n    <div class=\"layout-modal-body layout-input layout-input-header-top\">\r\n\r\n        <span ng-if=\"!ctrl.multiSelect\">\r\n            <label>{{::'LAYOUT_VIEW_PAGES_NAME_COLUMN' | translate}}</label>\r\n            <input type=\"text\" ng-model=\"ctrl.name\" required>\r\n        </span>\r\n        <label>{{::'LAYOUT_VIEW_PAGES_HEIGHT_COLUMN' | translate}}</label>\r\n        <input type=\"text\" ng-model=\"ctrl.h\" required>\r\n        <label>{{::'LAYOUT_VIEW_PAGES_WIDTH_COLUMN' | translate}}</label>\r\n        <input type=\"text\" ng-model=\"ctrl.w\" required>\r\n        <label>\r\n            <input type=\"checkbox\" ng-checked=\"ctrl.isCoop\" ng-model=\"ctrl.isCoop\"/> {{::'LAYOUT_VIEW_PAGES_EDIT_PAGE_IS_COOP' | translate}}\r\n        </label>       \r\n        <label>{{::'LAYOUT_VIEW_PAGES_EDIT_PAGE_THEME' | translate}}</label>\r\n        <input type=\"text\" ng-model=\"ctrl.theme\" required>\r\n        <label>{{::'LAYOUT_VIEW_PAGES_EDIT_PAGE_NOTES' | translate}}</label>\r\n        <textarea rows=\"1\" ng-model=\"ctrl.notes\"></textarea>                 \r\n        <div merchandise-hierarchy-native-selection\r\n          ng-model=\"ctrl.hierarchyId\"\r\n          tree-map=\"ctrl.layoutView.merchandiseHierarchy\"\r\n          default-labels=\"ctrl.merchandiseHierarchySelectionLabels\"\r\n        >\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"layout-modal-footer button-spacing\">\r\n        <span ng-click=\"ctrl.dismiss()\" class=\"layout-btn layout-btn-cancel\" translate=\"LAYOUT_VIEW_MODAL_BUTTON_CLOSE\"></span> \r\n        <span ng-click=\"ctrl.apply()\" class=\"layout-btn\" translate=\"LAYOUT_VIEW_MODAL_BUTTON_OK\"></span> \r\n    </div>\r\n</div>\r\n";
  global.define = __define;
  return module.exports;
});

System.register("promo-manager/layout-view/page-actions/page-delete-modal.html!github:systemjs/plugin-text@0.0.2", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = "<div class=\"layout-modal\">\r\n    <div class=\"layout-modal-header\">\r\n        <div class=\"layout-modal-title\">{{::ctrl.title}}</div>\r\n    </div>\r\n    <div class=\"layout-modal-body\">\r\n    <span class=\"msg\" translate=\"LAYOUT_VIEW_DELETE_PAGE\"></span>\r\n    </div>\r\n    <div class=\"layout-modal-body\">\r\n        <div ng-if=\"ctrl.index\">\r\n        \t{{::'LAYOUT_VIEW_PAGES_PAGE_COLUMN' | translate}}:&nbsp;\r\n            {{::ctrl.index}}\r\n        </div>\r\n        <label>\r\n            <input type=\"checkbox\" ng-checked=\"ctrl.moveOffers\" ng-model=\"ctrl.moveOffers\"/>{{::'OFFERS_LIST_MOVE_OFFERS_TO_PARKING_LOT_LABEL' | translate}}\r\n        </label>       \r\n    </div>\r\n\r\n    <div class=\"layout-modal-footer button-spacing\">\r\n        <span ng-click=\"ctrl.dismiss()\" class=\"layout-btn layout-btn-cancel\" translate=\"LAYOUT_VIEW_MODAL_BUTTON_CLOSE\"></span> \r\n        <span ng-click=\"ctrl.apply()\" class=\"layout-btn\" translate=\"LAYOUT_VIEW_MODAL_BUTTON_OK\"></span> \r\n    </div>\r\n</div>\r\n";
  global.define = __define;
  return module.exports;
});

System.register("promo-manager/layout-view/page-actions/page-template-clear-modal.html!github:systemjs/plugin-text@0.0.2", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = "<div class=\"layout-modal\">\r\n    <div class=\"layout-modal-header\">\r\n        <div class=\"layout-modal-title\">{{::ctrl.title}}</div>\r\n    </div>\r\n   <div class=\"layout-modal-body\">\r\n    <span class=\"msg\" translate=\"LAYOUT_VIEW_CLEAR_TEMPLATE\"></span>\r\n    </div>\r\n    <div class=\"layout-modal-body\">\r\n        <div ng-if=\"ctrl.name\">\r\n        \t{{::'LAYOUT_VIEW_PAGES_NAME_COLUMN'|translate}}:&nbsp;\r\n            {{::ctrl.name}}\r\n        </div>\r\n        <div ng-if=\"ctrl.h\">\r\n        \t{{::'LAYOUT_VIEW_PAGES_HEIGHT_COLUMN'|translate}}:&nbsp;\r\n            {{::ctrl.h}}\r\n        </div>\r\n        <div ng-if=\"ctrl.w\">\r\n        \t{{::'LAYOUT_VIEW_PAGES_WIDTH_COLUMN'|translate}}:&nbsp;\r\n            {{::ctrl.w}}\r\n        </div>\r\n        <label><input type=\"checkbox\" ng-checked=\"ctrl.moveOffers\" ng-model=\"ctrl.moveOffers\"/> {{::'OFFERS_LIST_MOVE_OFFERS_TO_PARKING_LOT_LABEL'|translate}}\r\n        </label>       \r\n    </div>\r\n    <div class=\"layout-modal-footer button-spacing\">\r\n        <span ng-click=\"ctrl.dismiss()\" class=\"layout-btn layout-btn-cancel\" translate=\"LAYOUT_VIEW_MODAL_BUTTON_CLOSE\"></span> \r\n        <span ng-click=\"ctrl.apply()\" class=\"layout-btn\" translate=\"LAYOUT_VIEW_MODAL_BUTTON_OK\"></span> \r\n    </div>\r\n</div>\r\n";
  global.define = __define;
  return module.exports;
});

System.register("promo-manager/layout-view/page-actions/page-template-apply-modal.html!github:systemjs/plugin-text@0.0.2", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = "<div class=\"layout-modal\">\r\n    <div class=\"layout-modal-header\">\r\n        <div class=\"layout-modal-title\" translate=\"LAYOUT_VIEW_PAGES_APPLY_TEMPLATE_TITLE\"></div>\r\n    </div>\r\n    <div class=\"layout-modal-body layout-input\">\r\n\t\t<div class=\"filter-Line\">\r\n            {{::'CHANNEL_LABEL' | translate}}\r\n            {{::ctrl.channels.name}}\r\n     \t\t{{::'SEARCH_LABEL' | translate}} \r\n      \t\t<input type=\"text\" ng-model=\"ctrl.search.templateSearch\" ng-model-options=\"{updateOn: 'default blur',debounce: {default: 500, blur: 0}, getterSetter: true, allowInvalid: true}\">\r\n\t        <span ng-disabled=\"ctrl.search.disabled\" ng-click=\"ctrl.loadTemplates()\" class=\"layout-btn\" translate=\"SEARCH_BUTTON_LABEL\"></span> \r\n\t\t</div>\r\n    </div>\r\n    <div class=\"layout-modal-body\">\r\n        <div ng-if=\"ctrl.name\">\r\n        \t{{::'LAYOUT_VIEW_PAGES_NAME_COLUMN'|translate}}:&nbsp;\r\n            {{::ctrl.name}}\r\n        \t{{::'LAYOUT_VIEW_PAGES_HEIGHT_COLUMN'|translate}}:&nbsp;\r\n            {{::ctrl.h}}\r\n        \t{{::'LAYOUT_VIEW_PAGES_WIDTH_COLUMN'|translate}}:&nbsp;\r\n            {{::ctrl.w}}\r\n        </div>\r\n   </div>\r\n    <div class=\"layout-modal-body\">\r\n        <div ng-show=\"ctrl.totalRecords > 0\" class=\"layout-view-pagination-control\">\r\n            <span class=\"hyperlink\" ng-click=\"ctrl.getPreviousPage(ctrl.numPerPage)\">&lt;</span>\r\n            <span class=\"hyperlink\" ng-click=\"ctrl.getNextPage(ctrl.numPerPage)\">&gt;</span>\r\n<!--             <span class=\"hyperlink\" ng-click=\"ctrl.getPreviousPage(ctrl.numPerPage)\"><i class=\"glyphicon glyphicon-chevron-left\"></i></span>\r\n            <span class=\"hyperlink\" ng-click=\"ctrl.getNextPage(ctrl.numPerPage)\"><i class=\"glyphicon glyphicon-chevron-right\" ></i></span>\r\n -->            <span>{{ctrl.offset}} &#45; {{ctrl.limit}} of {{ctrl.totalRecords}}</span>\r\n        </div>\r\n    \r\n\t    <div class=\"radio\" ng-repeat=\"template in ctrl.templates\">\r\n\t      \t<label>\r\n\t        \t<input class=\"layout-input\" type=\"radio\" name=\"template\" ng-click=\"ctrl.handleRadioClick(template)\">{{::template.name}}\r\n\t      \t</label>\r\n    \t\t{{::template.lastUsedDate | date:ctrl.dateFormat}}\r\n            <span thumbnail-canvas-renderer block-list=\"template.blockList\"></span>\r\n\t    </div>\r\n    </div>\r\n    <div class=\"layout-modal-footer button-spacing\">\r\n        <span ng-click=\"ctrl.dismiss()\" class=\"layout-btn layout-btn-cancel\" translate=\"LAYOUT_VIEW_MODAL_BUTTON_CLOSE\"></span> \r\n        <span ng-disabled=\"ctrl.disabled\" ng-click=\"ctrl.apply()\" class=\"layout-btn\" translate=\"LAYOUT_VIEW_MODAL_BUTTON_OK\"></span> \r\n    </div>\r\n</div>\r\n";
  global.define = __define;
  return module.exports;
});

System.register("promo-manager/layout-view/page-actions/page-move-offers-to-parking-lot-modal.html!github:systemjs/plugin-text@0.0.2", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = "<div class=\"layout-modal\">\r\n    <div class=\"layout-modal-header\">\r\n        <div class=\"layout-modal-title\">{{::ctrl.title}}</div>\r\n    </div>\r\n    <div class=\"layout-modal-body\">\r\n        <span class=\"msg\" translate=\"LAYOUT_VIEW_MOVE_OFFERS_TO_PARKING_LOT\"></span>\r\n    </div>\r\n    <div class=\"layout-modal-body\">\r\n        <div ng-if=\"ctrl.name\">\r\n        \t{{::'LAYOUT_VIEW_PAGES_NAME_COLUMN'|translate}}:&nbsp;\r\n            {{::ctrl.name}}\r\n        </div>\r\n        <div ng-if=\"ctrl.h\">\r\n        \t{{::'LAYOUT_VIEW_PAGES_HEIGHT_COLUMN'|translate}}:&nbsp;\r\n            {{::ctrl.h}}\r\n        </div>\r\n        <div ng-if=\"ctrl.w\">\r\n        \t{{::'LAYOUT_VIEW_PAGES_WIDTH_COLUMN'|translate}}:&nbsp;\r\n            {{::ctrl.w}}\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"layout-modal-footer button-spacing\">\r\n        <span ng-click=\"ctrl.dismiss()\" class=\"layout-btn layout-btn-cancel\" translate=\"LAYOUT_VIEW_MODAL_BUTTON_CLOSE\"></span> \r\n        <span ng-click=\"ctrl.apply()\" class=\"layout-btn\" translate=\"LAYOUT_VIEW_MODAL_BUTTON_OK\"></span> \r\n    </div>\r\n</div>\r\n";
  global.define = __define;
  return module.exports;
});

System.register("promo-manager/layout-view/block-actions/block-move-offers-to-basket-modal.html!github:systemjs/plugin-text@0.0.2", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = "<div class=\"layout-modal\">\r\n    <div class=\"layout-modal-header\">\r\n        <div class=\"layout-modal-title\">{{::ctrl.title}}</div>\r\n    </div>\r\n    <div class=\"layout-modal-body\">\r\n        <span class=\"msg\" translate=\"LAYOUT_VIEW_ADD_OFFERS_TO_BASKET\"></span>\r\n    </div>\r\n    <div class=\"layout-modal-body\">\r\n        <div>\r\n        \t{{::'LAYOUT_VIEW_BLOCK_NAME_COLUMN'|translate}}:&nbsp;\r\n            {{::ctrl.name}}\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"layout-modal-footer button-spacing\">\r\n        <span ng-click=\"ctrl.dismiss()\" class=\"layout-btn layout-btn-cancel\" translate=\"LAYOUT_VIEW_MODAL_BUTTON_CLOSE\"></span> \r\n        <span ng-click=\"ctrl.apply()\" class=\"layout-btn\" translate=\"LAYOUT_VIEW_MODAL_BUTTON_OK\"></span> \r\n    </div>\r\n</div>\r\n";
  global.define = __define;
  return module.exports;
});

System.register("promo-manager/layout-view/block-actions/block-edit-modal.html!github:systemjs/plugin-text@0.0.2", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = "<div class=\"layout-modal\">\r\n    <div class=\"layout-modal-header\">\r\n        <div class=\"layout-modal-title\">{{::ctrl.title}}</div>\r\n    </div>\r\n    <div class=\"layout-modal-body\">\r\n        <div class=\"layout-input layout-input-header-top\" ng-if=\"!ctrl.multiSelect\">\r\n            <label>{{::'LAYOUT_VIEW_BLOCK_EDIT_USER_DEFINED_NAME' | translate}}</label>\r\n            <input type=\"text\" ng-model=\"ctrl.userDefinedName\" required>\r\n        </div>\r\n        <div class=\"layout-modal-body\">\r\n            <label>\r\n                <input type=\"checkbox\" ng-checked=\"ctrl.isCoop\" ng-model=\"ctrl.isCoop\"/> {{::'LAYOUT_VIEW_PAGES_EDIT_PAGE_IS_COOP' | translate}}\r\n            </label>       \r\n        </div>\r\n        <div class=\"layout-input layout-input-header-top\">\r\n            <label>{{::'LAYOUT_VIEW_PAGES_EDIT_PAGE_THEME' | translate}}</label>\r\n            <input type=\"text\" ng-model=\"ctrl.theme\" required>\r\n        </div>\r\n            <div merchandise-hierarchy-native-selection\r\n              ng-model=\"ctrl.hierarchyId\"\r\n              tree-map=\"ctrl.layoutView.merchandiseHierarchy\"\r\n              default-labels=\"ctrl.merchandiseHierarchySelectionLabels\"\r\n            >\r\n            </div>\r\n        <div class=\"layout-input layout-input-header-top\">\r\n            <label>{{::'LAYOUT_VIEW_BLOCK_EDIT_COLOR' | translate}}</label>\r\n            <input type=\"text\" ng-model=\"ctrl.color\" required>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"layout-modal-footer button-spacing\">\r\n        <span ng-click=\"ctrl.dismiss()\" class=\"layout-btn layout-btn-cancel\" translate=\"LAYOUT_VIEW_MODAL_BUTTON_CLOSE\"></span> \r\n        <span ng-click=\"ctrl.apply()\" class=\"layout-btn\" translate=\"LAYOUT_VIEW_MODAL_BUTTON_OK\"></span> \r\n    </div>\r\n</div>\r\n";
  global.define = __define;
  return module.exports;
});

System.register("promo-manager/layout-view/offer-quickview/offer-quickview.html!github:systemjs/plugin-text@0.0.2", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = "<div class=\"layout-modal\" tabindex=\"-1\">\r\n    <div class=\"layout-modal-body\">\r\n        <span class=\"allocation-panel pull-left\">\r\n            <div class=\"offerview-details\">\r\n                <div class=\"offerview-title\">\r\n                    {{ctrl.offerName}}\r\n                </div>\r\n                <div class=\"offerview-date\">\r\n                    {{ctrl.blockOfferQuickView.startDate | date:ctrl.dateFormat}}&nbsp;-&nbsp;{{ctrl.blockOfferQuickView.endDate | date:ctrl.dateFormat}}\r\n                </div>\r\n                <div class=\"offerview-text\">\r\n                    {{ctrl.offerDescription}}\r\n                </div>\r\n                <div class=\"offerview-attributes\">\r\n                    <div class=\"offerview-attribute\" ng-repeat=\"attribute in ctrl.attributes\">\r\n                        <span class=\"label\">\r\n                            {{attribute.label}}:                \r\n                        </span>\r\n                        <span class=\"value\">\r\n                            {{attribute.value}}                \r\n                        </span>\r\n                    </div>\r\n                </div>\r\n                <div class=\"offerview-attributes\">\r\n                    <div class=\"offerview-merchandise-hierarchies\" ng-repeat=\"mhLabel in ctrl.mhLabelsByDepth\" ng-init=\"$depthIndex = $index\">\r\n                        <span class=\"label\">\r\n                            {{mhLabel}}:\r\n                        </span>\r\n                        <span class=\"value\" ng-repeat=\"node in ctrl.mhByDepth[$depthIndex]\" ng-class=\"{ bold: ctrl.mhLocations[node.id] === 'offer-version-level' }\">\r\n                            {{ node.name + (!$last ? ', ' : '') }}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"offerview-link-button\" ng-click=\"ctrl.offerWizard()\">\r\n                {{::'OFFER_QUICKVIEW_VIEW_OFFER' | translate}}\r\n            </div>\r\n        </span>\r\n        <span class=\"image-panel pull-right\">\r\n            <div class=\"offerview-details\">\r\n\r\n                <div class=\"slider\">\r\n                    <carousel interval=\"ctrl.myInterval\">\r\n                        <slide ng-repeat=\"slide in ctrl.slides\" active=\"slide.active\">\r\n                            <img ng-src=\"{{slide.imageLink}}\" class=\"offer-image\">\r\n                            <div class=\"offerview-attributes\">\r\n                                <div class=\"offerview-attribute\" >\r\n                                    <span class=\"label\">\r\n                                        {{::'OFFER_QUICKVIEW_LABEL_GROUP' | translate}}:                \r\n                                    </span>\r\n                                    <span class=\"value\" ng-repeat=\"group in slide.featureItemGroupList\">\r\n                                        {{group}}                \r\n                                    </span>\r\n                                </div>\r\n                                <div class=\"offerview-attribute\" >\r\n                                    <span class=\"label\">\r\n                                        {{::'OFFER_QUICKVIEW_LABEL_ITEM_MUMBER' | translate}}:                \r\n                                    </span>\r\n                                    <span class=\"value\">\r\n                                        {{slide.sku.itemNumber}}                \r\n                                    </span>\r\n                                </div>\r\n                                <div class=\"offerview-attribute\" >\r\n                                    <span class=\"label\">\r\n                                        {{::'OFFER_QUICKVIEW_LABEL_PAGE_NUMBER' | translate}}:                \r\n                                    </span>\r\n                                    <span class=\"value\">\r\n                                        {{ctrl.block.page.index}}                \r\n                                    </span>\r\n                                </div>\r\n                                <div class=\"offerview-attribute\" >\r\n                                    <span class=\"label\">\r\n                                        {{::'OFFER_QUICKVIEW_LABEL_DESCRIPTION' | translate}}:                \r\n                                    </span>\r\n                                    <span class=\"value\">\r\n                                        {{slide.sku.description}}                \r\n                                    </span>\r\n                                </div>\r\n                                <div class=\"offerview-attribute\" >\r\n                                    <span class=\"label\">\r\n                                        {{::'OFFER_QUICKVIEW_LABEL_EVENT_PRICE' | translate}}:                \r\n                                    </span>\r\n                                    <span class=\"value\">\r\n                                        {{slide.promoPriceWithCurrency}}                \r\n                                    </span>\r\n                                </div>\r\n                            </div>\r\n                        </slide>\r\n                    </carousel>\r\n                </div>\r\n                <div class=\"offerview-link-button\" ng-click=\"ctrl.offerWizard()\">\r\n                    {{::'OFFER_QUICKVIEW_VIEW_MORE' | translate}}\r\n                </div>\r\n            </div>\r\n        </span>\r\n    </div>\r\n</div>\r\n";
  global.define = __define;
  return module.exports;
});

System.register("promo-manager/partials/multidropdownnativeselection.html!github:systemjs/plugin-text@0.0.2", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = "<div ng-repeat=\"dropdown in ctrl.dropdowns\">\r\n\t<select ng-options=\"option.id as option.name for option in dropdown\"\r\n\t  ng-disabled=\"disableSelection\"\r\n\t  ng-model=\"ctrl.shadowModel[$index]\"\r\n\t  ng-change=\"ctrl.updateModel(ctrl.shadowModel[$index])\"\r\n\t>\r\n\t</select>\r\n</div>\r\n";
  global.define = __define;
  return module.exports;
});

System.register("promo-manager/layout-view/partials/layout-view.html!github:systemjs/plugin-text@0.0.2", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = "<div id=\"layout-viewport\" class=\"theme-explosive-puppy viewport layout-viewport\"\r\n  ng-if=\"ctrl.layoutView.done\"\r\n  layout-view-input=\"ctrl.handleInputs($event)\"\r\n  layout-view-events=\"ctrl.inputHandler.inputEvents\"\r\n  tabindex=\"-1\"\r\n>\r\n\t<div layout-view-dragged=\"ctrl.transferObject\" ng-if=\"ctrl.transferObject\"></div>\r\n\t<div layout-view-toolbar class=\"layoutview-toolbar\"></div>\r\n\t<div layout-view-body class=\"layoutview-body\"></div>\r\n\t<div layout-view-clipboard\r\n\t  dragging=\"!!ctrl.transferObject\"\r\n\t  global=\"ctrl.layoutView.globalClipboard\"\r\n\t  local=\"ctrl.layoutView.localClipboard\"\r\n\t  class=\"layoutview-clipboard\" \r\n\t></div>\r\n\t<div dynamic-styles=\"ctrl.getDynamicStyles()\"></div>\r\n\r\n    <div ng-if=\"ctrl.context.local\">\r\n        <span item-search context=\"ctrl.context\"></span> \r\n    </div>       \r\n\r\n</div>\r\n";
  global.define = __define;
  return module.exports;
});

System.register("promo-manager/layout-view/partials/layout-view-toolbar.html!github:systemjs/plugin-text@0.0.2", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = "<!-- vehicle version button -->\r\n<span class=\"btn-group\" dropdown>\r\n\t<button id=\"vehicle-version-button\" type=\"button\" class=\"btn btn-layout-dropdown\" dropdown-toggle ng-disabled=\"disabled\">\r\n\t{{ctrl.layoutView.selectedVehicleVersion.name}} <span class=\"arrow-down\"></span>\r\n\t</button>\r\n\t<div class=\"dropdown-menu\" role=\"menu\" aria-labelledby=\"vehicle-version-button\">\r\n\t\t<div class=\"menuitem\" role=\"menuitem\" ng-repeat=\"version in ctrl.layoutView.vehicleVersions\">\r\n\t\t\t<span ng-click=\"ctrl.updateSelectedVehicleVersion(version.id)\">{{version.name}}</span>\r\n\t\t</div>\r\n\t</div>\r\n</span>\r\n<!-- layout version button -->\r\n<span class=\"btn-group\" dropdown>\r\n\t<button id=\"layout-version-button\" type=\"button\" class=\"btn btn-layout-dropdown\" dropdown-toggle ng-disabled=\"disabled\">\r\n\t{{ctrl.layoutView.selectedLayoutVersionId}} <span class=\"arrow-down\"></span>\r\n\t</button>\r\n\t<div class=\"dropdown-menu\" role=\"menu\" aria-labelledby=\"layout-version-button\">\r\n\t\t<div class=\"menuitem\" role=\"menuitem\" ng-repeat=\"version in ctrl.layoutView.layoutModel.getLayoutVersionIdList()\">\r\n\t\t\t<span ng-click=\"ctrl.updateSelectedLayoutVersion(version)\">{{version}}</span>\r\n\t\t</div>\r\n\t</div>\r\n</span>\r\n<span merchandise-hierarchy-native-selection\r\n  ng-model=\"ctrl.merchandiseHierarchyId\"\r\n  tree-map=\"ctrl.layoutView.merchandiseHierarchy\"\r\n  default-labels=\"ctrl.merchandiseHierarchySelectionLabelFilters\"\r\n  class=\"filter-mhList\"\r\n>\r\n</span>\r\n<!-- page button -->\r\n<span class=\"btn-group\" dropdown>\r\n\t<button id=\"page-button\" type=\"button\" class=\"btn btn-layout-dropdown\" dropdown-toggle ng-disabled=\"disabled\">\r\n\t{{::'LAYOUT_VIEW_PAGE_LEVEL_ACTIONS' | translate}} <span class=\"arrow-down\"></span>\r\n\t</button>\r\n\t<div class=\"dropdown-menu\" role=\"menu\" aria-labelledby=\"page-button\">\r\n\t\t<div class=\"menuitem\" role=\"menuitem\" ng-repeat=\"action in ctrl.actionsHandler.pageLevelActions\">\r\n\t\t\t<span ng-click=\"ctrl.actionsHandler.openMultiSelectionPagesModal(action.id)\">{{action.name}}</span>\r\n\t\t</div>\r\n\t</div>\r\n</span>\r\n<span class=\"layout-input layout-input-header-side\">\r\n     <input class=\"search-query\" type=\"text\" ng-model=\"ctrl.search.itemSearch\" ng-model-options=\"{updateOn: 'default blur',debounce: {default: 1000, blur: 0}, getterSetter: true, allowInvalid: true}\" placeholder=\"Search...\" />\r\n</span>\r\n";
  global.define = __define;
  return module.exports;
});

System.register("promo-manager/layout-view/partials/layout-view-body.html!github:systemjs/plugin-text@0.0.2", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = "<div ng-repeat-start=\"pageRenderable in ctrl.getPagesInViewport()\"></div>\r\n\r\n<div ng-switch=\"pageRenderable.type\">\r\n\t<!-- Switch: Page Grip -->\r\n\t<div ng-switch-when=\"page-grip\">\r\n\t\t<div class=\"pageversion-grip grippable\" ng-class=\"{'object-disabled': ctrl.isDisabled(pageRenderable)}\" ng-style=\"pageRenderable._cameraSpaceStyles\">\r\n\t\t\t<div class=\"grip-left\">\r\n\t\t\t\t<span class=\"pageversion-grip-checkbox\">\r\n\t\t\t\t\t<input type=\"checkbox\" ng-model=\"pageRenderable.selected\"/>\t\t\t\t\t\t\r\n\t\t\t\t</span>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"grip-center\">\r\n\t\t\t\t{{ pageRenderable.pageVersion.name }}\r\n\t\t\t</div>\r\n\t\t\t<div class=\"grip-right\" toggle-state=\"pageRenderable.open\" toggle-unique=\"true\">\r\n\t\t\t\t<span svg-dynamic-size\r\n\t\t\t\t  svg-width=\"ctrl.svg.dynamicGearHeight\"\r\n\t\t\t\t  svg-height=\"ctrl.svg.dynamicGearHeight\"\r\n\t\t\t\t  class=\"svg-gear-icon svg-white\" ng-include=\"ctrl.svg.gearIconPath\"></span>\r\n\t\t\t\t<div ng-show=\"pageRenderable.open\" class=\"grip-menu-items\">\r\n\t\t\t\t\t<div class=\"hyperlink\" ng-repeat=\"action in pageRenderable.pageVersion.permittedActions\" ng-if=\"action.name\" ng-click=\"ctrl.actionsHandler.getPageVersionModalHandler(action.id, pageRenderable.pageVersion)\">{{action.name}}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n\t<!-- Switch: Page -->\r\n\t<div ng-switch-when=\"page\">\r\n\t\t<div class=\"layoutview-pageversion\" ng-class=\"{'object-disabled': ctrl.isDisabled(pageRenderable)}\"  ng-style=\"pageRenderable._cameraSpaceStyles\"></div>\r\n\t</div>\r\n</div>\r\n\r\n<div ng-repeat-end ng-repeat=\"block in pageRenderable.blockList\" ng-class=\"{'object-disabled': ctrl.isDisabled(block)}\" class=\"layoutview-block\" ng-style=\"block._cameraSpaceStyles\">\r\n\t<div class=\"grippable\" ng-class=\"{\r\n\t    'block-grip': !block.offerVersion,\r\n\t    'offer-grip': block.offerVersion,\r\n\t    'drag-handle': block.offerVersion && !ctrl.isDisabled(block.offerVersion)\r\n\t  }\"\r\n\t>\r\n\t\t<div class=\"grip-center\">\r\n\t\t\t{{ block.name }}&nbsp;{{block.userDefinedName}}\r\n\t\t</div>\r\n\t\t<div class=\"grip-right\" toggle-state=\"block.open\" toggle-unique=\"true\">\r\n\t\t\t<span svg-dynamic-size\r\n\t\t\t  \tsvg-width=\"ctrl.svg.dynamicGearHeight\"\r\n\t\t\t  \tsvg-height=\"ctrl.svg.dynamicGearHeight\"\r\n\t\t\t  \tclass=\"svg-gear-icon svg-gray\" ng-include=\"ctrl.svg.gearIconPath\">\r\n\t\t  \t</span>\r\n\t\t\t<div ng-show=\"block.open\" class=\"grip-menu-items\">\r\n\t\t\t\t<div class=\"hyperlink\" ng-repeat=\"action in block.permittedActions\" ng-if=\"action.name\" ng-click=\"ctrl.actionsHandler.getBlockModalHandler(action.id, block, pageRenderable)\">{{action.name}}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n\t<div ng-if=\"!block.offerVersion\" class=\"block-content\">\r\n\t\t<span merchandise-hierarchy-by-depth \r\n\t\t\tmerchandise-hierarchy=\"ctrl.layoutView.merchandiseHierarchy\"\r\n\t\t\tblock-mh-list=\"block.merchandiseHierarchyList\"\r\n\t\t\toffer-version-mh-list=\"block.offerVersion && block.offerVersion.merchandiseHierarchyList\"\r\n\t\t\tmh-labels-by-depth=\"ctrl.mhLabelsByDepth\"\r\n\t\t>\r\n\t\t</span>\r\n\t</div>\r\n\t<div ng-if=\"block.offerVersion\" ng-click=\"ctrl.openOfferQuickView(pageRenderable, block)\" class=\"offer-content\" ng-class=\"{'object-disabled': ctrl.isDisabled(block.offerVersion)}\">\r\n\t\t<span merchandise-hierarchy-by-depth \r\n\t\t\tmerchandise-hierarchy=\"ctrl.layoutView.merchandiseHierarchy\"\r\n\t\t\tblock-mh-list=\"block.merchandiseHierarchyList\"\r\n\t\t\toffer-version-mh-list=\"block.offerVersion && block.offerVersion.merchandiseHierarchyList\"\r\n\t\t\tmh-labels-by-depth=\"ctrl.mhLabelsByDepth\"\r\n\t\t>\r\n\t\t</span>\r\n\t</div>\r\n</div>";
  global.define = __define;
  return module.exports;
});

System.register("promo-manager/layout-view/layout-view-dragged-template.html!github:systemjs/plugin-text@0.0.2", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = "<div class=\"dragged-object\" ng-style=\"dragged._cameraSpaceStyles\">\r\n\tType: {{dragged.type}}\r\n\t<div ng-switch=\"dragged.type\">\r\n\t\t<div ng-switch-when=\"offer-drag\">\r\n\t\t\tOffer Id: {{ dragged.src.offerVersion.offer.id }}\r\n\t\t\tOffer Version Id: {{ dragged.src.offerVersion.id }}\r\n\t\t</div>\r\n\t\t<div ng-switch-when=\"page-drag\">\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n";
  global.define = __define;
  return module.exports;
});

System.register("promo-manager/layout-view/clipboard/clipboard-template.html!github:systemjs/plugin-text@0.0.2", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = "<!--\r\n<div class=\"generic-clipboard\" ng-class=\"{ open: ctrl.isOpen(), dragging: ctrl.isDragging() }\">\r\n\t<div class=\"clipboard-contents\" ng-show=\"!ctrl.dragging\" ng-class=\"'view-' + ctrl.mode\">\r\n\t\t<div class=\"clipboard-type global\" clipboard-type=\"ctrl.global\" type=\"ctrl.MODE_GLOBAL\" label-key=\"GLOBAL_LABEL\" ctrl=\"ctrl\"></div>\r\n\t\t<div class=\"clipboard-type local\" clipboard-type=\"ctrl.local\" type=\"ctrl.MODE_LOCAL\" label-key=\"LOCAL_LABEL\" ctrl=\"ctrl\"></div>\r\n\t</div>\r\n\t<div class=\"clipboard-targets\" ng-show=\"ctrl.isDragging()\">\r\n\t\t<div class=\"clipboard-global-target\">\r\n\t\t\t<span class=\"clipboard-target-label\">Drop Global<span>\r\n\t\t</div>\r\n\t\t<div class=\"clipboard-local-target\">\r\n\t\t\t<span class=\"clipboard-target-label\">Drop Local</span>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n-->";
  global.define = __define;
  return module.exports;
});

System.register("promo-manager/layout-view/clipboard/clipboard-type-template.html!github:systemjs/plugin-text@0.0.2", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = "<div class=\"clipboard-header\">\r\n\t<div class=\"clipboard-title\" ng-click=\"ctrl.isOpen() && ctrl.setMode(type)\">\r\n\t\t{{ labelKey | translate }}\r\n\t</div>\r\n\t<span class=\"clipboard-toggle\" ng-click=\"ctrl.setOpen(!ctrl.isOpen())\">\r\n\t\t<span class=\"clipboard-caret\" ng-class=\"{ up: !ctrl.isOpen(), down: ctrl.isOpen() }\"></span>\r\n\t</span>\r\n</div>\r\n<div class=\"clipboard-items\">\r\n\t<div ng-repeat=\"item in clipboard.collection\" class=\"clipboard-item\" ng-class=\"'type-' + item.polymorphicType\">\r\n\t\t{{ item.polymorphicType }}: {{ item.polymorphicTypeId }}\r\n\t</div>\r\n</div>\r\n";
  global.define = __define;
  return module.exports;
});

System.register("promo-manager/common/allocation-report/allocation-report-template.html!github:systemjs/plugin-text@0.0.2", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = "<div class=\"allocation-report\">\r\n\t<div class=\"report-header clearfix\">\r\n\t\t<div class=\"report-title pull-left\" translate=\"ALLOCATION_REPORT_TITLE\"></div>\r\n\t\t<a class=\"export-link pull-right\" translate=\"ALLOCATION_REPORT_EXPORT\" ng-href=\"{{ctrl.getExportLink()}}\"></a>\r\n\t</div>\r\n\r\n\t<div class=\"report-body\">\r\n\t\t<div ng-if=\"!ctrl.report\" class=\"report-loading\" translate=\"ALLOCATION_REPORT_LOADING\"></div>\r\n\r\n\t\t<table>\r\n\t\t\t<thead>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<th translate=\"ALLOCATION_REPORT_COLUMN_MERCHANDISE_HIERARCHY\"></th>\r\n\t\t\t\t\t<th translate=\"ALLOCATION_REPORT_COLUMN_ALLOCATION_AREA\"></th>\r\n\t\t\t\t\t<th translate=\"ALLOCATION_REPORT_COLUMN_ALLOCATION_FORECAST\"></th>\r\n\t\t\t\t</tr>\r\n\t\t\t</thead>\r\n\t\t\t<tbody>\r\n\t\t\t\t<tr ng-repeat=\"reportRow in ctrl.report\">\r\n\t\t\t\t\t<td>{{ ctrl.getMhName(reportRow.merchandiseHierarchyId) }}</td>\r\n\t\t\t\t\t<td>{{ reportRow.aggregateAreaAsRatio * 100 | number:1 }}%</td>\r\n\t\t\t\t\t<td>{{ reportRow.aggregateForecastSales | currency }}</td>\r\n\t\t\t\t</tr>\r\n\t\t\t</tbody>\r\n\t\t</table>\r\n\t</div>\r\n</div>\r\n\r\n\r\n";
  global.define = __define;
  return module.exports;
});

System.register("promo-manager/common/exception-report/exception-report-template.html!github:systemjs/plugin-text@0.0.2", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = "<div class=\"exception-report\">\r\n\t<div class=\"report-header clearfix\">\r\n\t\t<div class=\"report-title pull-left\" translate=\"EXCEPTION_REPORT_TITLE\"></div>\r\n\t\t<a class=\"export-link pull-right\" translate=\"EXCEPTION_REPORT_EXPORT\" ng-href=\"{{ctrl.getExportLink()}}\"></a>\r\n\t</div>\r\n\r\n\t<div class=\"report-body\">\r\n\t\t<div ng-if=\"!ctrl.report\" class=\"report-loading\" translate=\"EXCEPTION_REPORT_LOADING\"></div>\r\n\r\n\t\t<table>\r\n\t\t\t<thead>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<th translate=\"EXCEPTION_REPORT_COLUMN_VEHICLE_VERSION\"></th>\r\n\t\t\t\t\t<th translate=\"EXCEPTION_REPORT_COLUMN_PAGE_NAME\"></th>\r\n\t\t\t\t\t<th translate=\"EXCEPTION_REPORT_COLUMN_BLOCK_NAME\"></th>\r\n\t\t\t\t</tr>\r\n\t\t\t</thead>\r\n\t\t\t<tbody>\r\n\t\t\t\t<tr ng-repeat=\"reportRow in ctrl.report\">\r\n\t\t\t\t\t<td>{{ reportRow.vehicleVersionName }}</td>\r\n\t\t\t\t\t<td>{{ reportRow.pageName }}</td>\r\n\t\t\t\t\t<td>{{ reportRow.blockName }}</td>\r\n\t\t\t\t</tr>\r\n\t\t\t</tbody>\r\n\t\t</table>\r\n\t</div>\r\n</div>\r\n\r\n\r\n";
  global.define = __define;
  return module.exports;
});

System.register("promo-manager/common/item-selection/item-search-template.html!github:systemjs/plugin-text@0.0.2", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = "<script type=\"text/ng-template\"  id=\"tree_item_selection_renderer.html\">\n\t<div ng-if=\"node.name\">\n\t    \t<span item-selection-indeterminate-checkbox=\"node\" \n\t    \tmerchandise-hierarchy=\"ctrl.itemSelectionTree\"\n\t    \t\t>\n\t    \t</span>\n\t    \t<span class=\"hyperlink\" ng-click=\"openState = !openState; ctrl.toggle(openState, node)\" ng-class=\"{searchedItem:node.searched, selectedItem:ctrl.isSelectedItem(node)}\">{{::node.name}}</span>\n\t</div>\n    <ul class=\"item-search-ul\">\n        <li class=\"item-search-li\" ng-repeat=\"node in node.nodes\" ng-include=\"'tree_item_selection_renderer.html'\">\n\t    </li>\n    </ul>\n</script>\n\n<div class=\"layout-modal\">\n    <div class=\"layout-modal-header\">\n        <div class=\"layout-modal-title\" translate=\"ITEM_SEARCH_TITLE\"></div>\n    </div>\n    <div class=\"layout-modal-body layout-view-input\">\n\t\t<span class=\"layout-input\">\n\t\t     <input class=\"search-query\" type=\"text\" ng-model=\"ctrl.search.itemSearch\" ng-model-options=\"{updateOn: 'default blur',debounce: {default: 1000, blur: 0}, getterSetter: true, allowInvalid: true}\" placeholder=\"Search...\" />\n\t\t</span>\n\n\t\t<ul class=\"item-search-ul\">\n\t\t    <li class=\"item-search-list\" ng-repeat=\"node in ctrl.itemTree\" ng-include=\"'tree_item_selection_renderer.html'\"></li>\n\t\t</ul>\n\t    <!--  table -->\n\t    <div ng-if=\"ctrl.itemSelections.length\">\n\t        <table class=\"table table-bordered table-striped\">\n\t            <tr>\n\t                <th colspan=\"5\">\n\t                    <div class=\"pull-left\" translate=\"ITEM_SEARCH_SELECTED_ITEMS_LABEL\"></div>\n\t                    &nbsp;{{ctrl.itemSelections.length}}\n\t                </th>\n\t            </tr>\n\t            <tr ng-repeat=\"item in ctrl.itemSelections track by $index\">\n\t                <td>\n\t                \t<span class=\"hyperlink\" ng-click=\"ctrl.openSelection(item)\">{{item.name}}</span>\n\t                </td>\n\t                <td>\n\t\t                <span ng-click=\"ctrl.deleteSelection(item)\" class=\"layout-btn-delete hyperlink\">&times;</span>\n\t                </td>\n\t            </tr>\n\t        </table>\n\t    </div>\n    </div>\n    <div class=\"layout-modal-footer button-spacing\">\n        <span ng-click=\"ctrl.dismiss()\" class=\"layout-btn layout-btn-cancel\" translate=\"LAYOUT_VIEW_MODAL_BUTTON_CLOSE\"></span> \n        <span ng-click=\"ctrl.close()\" class=\"layout-btn\" translate=\"LAYOUT_VIEW_MODAL_BUTTON_OK\"></span> \n    </div>\n</div>\n";
  global.define = __define;
  return module.exports;
});

System.register("promo-manager/helpers/merchandise-hierarchy-by-depth.html!github:systemjs/plugin-text@0.0.2", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = "<div ng-repeat=\"mhLabel in mhLabelsByDepth\" ng-init=\"$depthIndex = $index\">\n    <span class=\"label\">\n        {{mhLabel}}:\n    </span>\n    <span class=\"value\" ng-repeat=\"node in mhByDepth[$depthIndex]\" ng-class=\"{ bold: mhLocations[node.id] === 'offer-version-level' }\">\n        {{ node.name + (!$last ? ', ' : '') }}\n    </span>\n</div>\n";
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.18/library/modules/$", ["npm:core-js@0.9.18/library/modules/$.fw"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var global = typeof self != 'undefined' ? self : Function('return this')(),
      core = {},
      defineProperty = Object.defineProperty,
      hasOwnProperty = {}.hasOwnProperty,
      ceil = Math.ceil,
      floor = Math.floor,
      max = Math.max,
      min = Math.min;
  var DESC = !!function() {
    try {
      return defineProperty({}, 'a', {get: function() {
          return 2;
        }}).a == 2;
    } catch (e) {}
  }();
  var hide = createDefiner(1);
  function toInteger(it) {
    return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
  }
  function desc(bitmap, value) {
    return {
      enumerable: !(bitmap & 1),
      configurable: !(bitmap & 2),
      writable: !(bitmap & 4),
      value: value
    };
  }
  function simpleSet(object, key, value) {
    object[key] = value;
    return object;
  }
  function createDefiner(bitmap) {
    return DESC ? function(object, key, value) {
      return $.setDesc(object, key, desc(bitmap, value));
    } : simpleSet;
  }
  function isObject(it) {
    return it !== null && (typeof it == 'object' || typeof it == 'function');
  }
  function isFunction(it) {
    return typeof it == 'function';
  }
  function assertDefined(it) {
    if (it == undefined)
      throw TypeError("Can't call method on  " + it);
    return it;
  }
  var $ = module.exports = require("npm:core-js@0.9.18/library/modules/$.fw")({
    g: global,
    core: core,
    html: global.document && document.documentElement,
    isObject: isObject,
    isFunction: isFunction,
    that: function() {
      return this;
    },
    toInteger: toInteger,
    toLength: function(it) {
      return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0;
    },
    toIndex: function(index, length) {
      index = toInteger(index);
      return index < 0 ? max(index + length, 0) : min(index, length);
    },
    has: function(it, key) {
      return hasOwnProperty.call(it, key);
    },
    create: Object.create,
    getProto: Object.getPrototypeOf,
    DESC: DESC,
    desc: desc,
    getDesc: Object.getOwnPropertyDescriptor,
    setDesc: defineProperty,
    setDescs: Object.defineProperties,
    getKeys: Object.keys,
    getNames: Object.getOwnPropertyNames,
    getSymbols: Object.getOwnPropertySymbols,
    assertDefined: assertDefined,
    ES5Object: Object,
    toObject: function(it) {
      return $.ES5Object(assertDefined(it));
    },
    hide: hide,
    def: createDefiner(0),
    set: global.Symbol ? simpleSet : hide,
    each: [].forEach
  });
  if (typeof __e != 'undefined')
    __e = core;
  if (typeof __g != 'undefined')
    __g = global;
  global.define = __define;
  return module.exports;
});

System.register("npm:gl-matrix@2.3.1/src/gl-matrix/quat", ["npm:gl-matrix@2.3.1/src/gl-matrix/common", "npm:gl-matrix@2.3.1/src/gl-matrix/mat3", "npm:gl-matrix@2.3.1/src/gl-matrix/vec3", "npm:gl-matrix@2.3.1/src/gl-matrix/vec4"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var glMatrix = require("npm:gl-matrix@2.3.1/src/gl-matrix/common");
  var mat3 = require("npm:gl-matrix@2.3.1/src/gl-matrix/mat3");
  var vec3 = require("npm:gl-matrix@2.3.1/src/gl-matrix/vec3");
  var vec4 = require("npm:gl-matrix@2.3.1/src/gl-matrix/vec4");
  var quat = {};
  quat.create = function() {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
  };
  quat.rotationTo = (function() {
    var tmpvec3 = vec3.create();
    var xUnitVec3 = vec3.fromValues(1, 0, 0);
    var yUnitVec3 = vec3.fromValues(0, 1, 0);
    return function(out, a, b) {
      var dot = vec3.dot(a, b);
      if (dot < -0.999999) {
        vec3.cross(tmpvec3, xUnitVec3, a);
        if (vec3.length(tmpvec3) < 0.000001)
          vec3.cross(tmpvec3, yUnitVec3, a);
        vec3.normalize(tmpvec3, tmpvec3);
        quat.setAxisAngle(out, tmpvec3, Math.PI);
        return out;
      } else if (dot > 0.999999) {
        out[0] = 0;
        out[1] = 0;
        out[2] = 0;
        out[3] = 1;
        return out;
      } else {
        vec3.cross(tmpvec3, a, b);
        out[0] = tmpvec3[0];
        out[1] = tmpvec3[1];
        out[2] = tmpvec3[2];
        out[3] = 1 + dot;
        return quat.normalize(out, out);
      }
    };
  })();
  quat.setAxes = (function() {
    var matr = mat3.create();
    return function(out, view, right, up) {
      matr[0] = right[0];
      matr[3] = right[1];
      matr[6] = right[2];
      matr[1] = up[0];
      matr[4] = up[1];
      matr[7] = up[2];
      matr[2] = -view[0];
      matr[5] = -view[1];
      matr[8] = -view[2];
      return quat.normalize(out, quat.fromMat3(out, matr));
    };
  })();
  quat.clone = vec4.clone;
  quat.fromValues = vec4.fromValues;
  quat.copy = vec4.copy;
  quat.set = vec4.set;
  quat.identity = function(out) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
  };
  quat.setAxisAngle = function(out, axis, rad) {
    rad = rad * 0.5;
    var s = Math.sin(rad);
    out[0] = s * axis[0];
    out[1] = s * axis[1];
    out[2] = s * axis[2];
    out[3] = Math.cos(rad);
    return out;
  };
  quat.add = vec4.add;
  quat.multiply = function(out, a, b) {
    var ax = a[0],
        ay = a[1],
        az = a[2],
        aw = a[3],
        bx = b[0],
        by = b[1],
        bz = b[2],
        bw = b[3];
    out[0] = ax * bw + aw * bx + ay * bz - az * by;
    out[1] = ay * bw + aw * by + az * bx - ax * bz;
    out[2] = az * bw + aw * bz + ax * by - ay * bx;
    out[3] = aw * bw - ax * bx - ay * by - az * bz;
    return out;
  };
  quat.mul = quat.multiply;
  quat.scale = vec4.scale;
  quat.rotateX = function(out, a, rad) {
    rad *= 0.5;
    var ax = a[0],
        ay = a[1],
        az = a[2],
        aw = a[3],
        bx = Math.sin(rad),
        bw = Math.cos(rad);
    out[0] = ax * bw + aw * bx;
    out[1] = ay * bw + az * bx;
    out[2] = az * bw - ay * bx;
    out[3] = aw * bw - ax * bx;
    return out;
  };
  quat.rotateY = function(out, a, rad) {
    rad *= 0.5;
    var ax = a[0],
        ay = a[1],
        az = a[2],
        aw = a[3],
        by = Math.sin(rad),
        bw = Math.cos(rad);
    out[0] = ax * bw - az * by;
    out[1] = ay * bw + aw * by;
    out[2] = az * bw + ax * by;
    out[3] = aw * bw - ay * by;
    return out;
  };
  quat.rotateZ = function(out, a, rad) {
    rad *= 0.5;
    var ax = a[0],
        ay = a[1],
        az = a[2],
        aw = a[3],
        bz = Math.sin(rad),
        bw = Math.cos(rad);
    out[0] = ax * bw + ay * bz;
    out[1] = ay * bw - ax * bz;
    out[2] = az * bw + aw * bz;
    out[3] = aw * bw - az * bz;
    return out;
  };
  quat.calculateW = function(out, a) {
    var x = a[0],
        y = a[1],
        z = a[2];
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
    return out;
  };
  quat.dot = vec4.dot;
  quat.lerp = vec4.lerp;
  quat.slerp = function(out, a, b, t) {
    var ax = a[0],
        ay = a[1],
        az = a[2],
        aw = a[3],
        bx = b[0],
        by = b[1],
        bz = b[2],
        bw = b[3];
    var omega,
        cosom,
        sinom,
        scale0,
        scale1;
    cosom = ax * bx + ay * by + az * bz + aw * bw;
    if (cosom < 0.0) {
      cosom = -cosom;
      bx = -bx;
      by = -by;
      bz = -bz;
      bw = -bw;
    }
    if ((1.0 - cosom) > 0.000001) {
      omega = Math.acos(cosom);
      sinom = Math.sin(omega);
      scale0 = Math.sin((1.0 - t) * omega) / sinom;
      scale1 = Math.sin(t * omega) / sinom;
    } else {
      scale0 = 1.0 - t;
      scale1 = t;
    }
    out[0] = scale0 * ax + scale1 * bx;
    out[1] = scale0 * ay + scale1 * by;
    out[2] = scale0 * az + scale1 * bz;
    out[3] = scale0 * aw + scale1 * bw;
    return out;
  };
  quat.sqlerp = (function() {
    var temp1 = quat.create();
    var temp2 = quat.create();
    return function(out, a, b, c, d, t) {
      quat.slerp(temp1, a, d, t);
      quat.slerp(temp2, b, c, t);
      quat.slerp(out, temp1, temp2, 2 * t * (1 - t));
      return out;
    };
  }());
  quat.invert = function(out, a) {
    var a0 = a[0],
        a1 = a[1],
        a2 = a[2],
        a3 = a[3],
        dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3,
        invDot = dot ? 1.0 / dot : 0;
    out[0] = -a0 * invDot;
    out[1] = -a1 * invDot;
    out[2] = -a2 * invDot;
    out[3] = a3 * invDot;
    return out;
  };
  quat.conjugate = function(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] = a[3];
    return out;
  };
  quat.length = vec4.length;
  quat.len = quat.length;
  quat.squaredLength = vec4.squaredLength;
  quat.sqrLen = quat.squaredLength;
  quat.normalize = vec4.normalize;
  quat.fromMat3 = function(out, m) {
    var fTrace = m[0] + m[4] + m[8];
    var fRoot;
    if (fTrace > 0.0) {
      fRoot = Math.sqrt(fTrace + 1.0);
      out[3] = 0.5 * fRoot;
      fRoot = 0.5 / fRoot;
      out[0] = (m[5] - m[7]) * fRoot;
      out[1] = (m[6] - m[2]) * fRoot;
      out[2] = (m[1] - m[3]) * fRoot;
    } else {
      var i = 0;
      if (m[4] > m[0])
        i = 1;
      if (m[8] > m[i * 3 + i])
        i = 2;
      var j = (i + 1) % 3;
      var k = (i + 2) % 3;
      fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);
      out[i] = 0.5 * fRoot;
      fRoot = 0.5 / fRoot;
      out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;
      out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;
      out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;
    }
    return out;
  };
  quat.str = function(a) {
    return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
  };
  module.exports = quat;
  global.define = __define;
  return module.exports;
});

(function() {
function define(){};  define.amd = {};
System.register("github:andris9/simpleStorage@0.1.3", ["github:andris9/simpleStorage@0.1.3/simpleStorage"], false, function(__require, __exports, __module) {
  return (function(main) {
    return main;
  }).call(this, __require('github:andris9/simpleStorage@0.1.3/simpleStorage'));
});
})();
System.register("npm:core-js@0.9.18/library/modules/$.wks", ["npm:core-js@0.9.18/library/modules/$", "npm:core-js@0.9.18/library/modules/$.shared", "npm:core-js@0.9.18/library/modules/$.uid"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var global = require("npm:core-js@0.9.18/library/modules/$").g,
      store = require("npm:core-js@0.9.18/library/modules/$.shared")('wks');
  module.exports = function(name) {
    return store[name] || (store[name] = global.Symbol && global.Symbol[name] || require("npm:core-js@0.9.18/library/modules/$.uid").safe('Symbol.' + name));
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.18/library/modules/$.iter", ["npm:core-js@0.9.18/library/modules/$", "npm:core-js@0.9.18/library/modules/$.cof", "npm:core-js@0.9.18/library/modules/$.assert", "npm:core-js@0.9.18/library/modules/$.wks", "npm:core-js@0.9.18/library/modules/$.shared"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var $ = require("npm:core-js@0.9.18/library/modules/$"),
      cof = require("npm:core-js@0.9.18/library/modules/$.cof"),
      classof = cof.classof,
      assert = require("npm:core-js@0.9.18/library/modules/$.assert"),
      assertObject = assert.obj,
      SYMBOL_ITERATOR = require("npm:core-js@0.9.18/library/modules/$.wks")('iterator'),
      FF_ITERATOR = '@@iterator',
      Iterators = require("npm:core-js@0.9.18/library/modules/$.shared")('iterators'),
      IteratorPrototype = {};
  setIterator(IteratorPrototype, $.that);
  function setIterator(O, value) {
    $.hide(O, SYMBOL_ITERATOR, value);
    if (FF_ITERATOR in [])
      $.hide(O, FF_ITERATOR, value);
  }
  module.exports = {
    BUGGY: 'keys' in [] && !('next' in [].keys()),
    Iterators: Iterators,
    step: function(done, value) {
      return {
        value: value,
        done: !!done
      };
    },
    is: function(it) {
      var O = Object(it),
          Symbol = $.g.Symbol;
      return (Symbol && Symbol.iterator || FF_ITERATOR) in O || SYMBOL_ITERATOR in O || $.has(Iterators, classof(O));
    },
    get: function(it) {
      var Symbol = $.g.Symbol,
          getIter;
      if (it != undefined) {
        getIter = it[Symbol && Symbol.iterator || FF_ITERATOR] || it[SYMBOL_ITERATOR] || Iterators[classof(it)];
      }
      assert($.isFunction(getIter), it, ' is not iterable!');
      return assertObject(getIter.call(it));
    },
    set: setIterator,
    create: function(Constructor, NAME, next, proto) {
      Constructor.prototype = $.create(proto || IteratorPrototype, {next: $.desc(1, next)});
      cof.set(Constructor, NAME + ' Iterator');
    }
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.18/library/modules/$.iter-define", ["npm:core-js@0.9.18/library/modules/$.def", "npm:core-js@0.9.18/library/modules/$.redef", "npm:core-js@0.9.18/library/modules/$", "npm:core-js@0.9.18/library/modules/$.cof", "npm:core-js@0.9.18/library/modules/$.iter", "npm:core-js@0.9.18/library/modules/$.wks"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var $def = require("npm:core-js@0.9.18/library/modules/$.def"),
      $redef = require("npm:core-js@0.9.18/library/modules/$.redef"),
      $ = require("npm:core-js@0.9.18/library/modules/$"),
      cof = require("npm:core-js@0.9.18/library/modules/$.cof"),
      $iter = require("npm:core-js@0.9.18/library/modules/$.iter"),
      SYMBOL_ITERATOR = require("npm:core-js@0.9.18/library/modules/$.wks")('iterator'),
      FF_ITERATOR = '@@iterator',
      KEYS = 'keys',
      VALUES = 'values',
      Iterators = $iter.Iterators;
  module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCE) {
    $iter.create(Constructor, NAME, next);
    function createMethod(kind) {
      function $$(that) {
        return new Constructor(that, kind);
      }
      switch (kind) {
        case KEYS:
          return function keys() {
            return $$(this);
          };
        case VALUES:
          return function values() {
            return $$(this);
          };
      }
      return function entries() {
        return $$(this);
      };
    }
    var TAG = NAME + ' Iterator',
        proto = Base.prototype,
        _native = proto[SYMBOL_ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT],
        _default = _native || createMethod(DEFAULT),
        methods,
        key;
    if (_native) {
      var IteratorPrototype = $.getProto(_default.call(new Base));
      cof.set(IteratorPrototype, TAG, true);
      if ($.FW && $.has(proto, FF_ITERATOR))
        $iter.set(IteratorPrototype, $.that);
    }
    if ($.FW || FORCE)
      $iter.set(proto, _default);
    Iterators[NAME] = _default;
    Iterators[TAG] = $.that;
    if (DEFAULT) {
      methods = {
        keys: IS_SET ? _default : createMethod(KEYS),
        values: DEFAULT == VALUES ? _default : createMethod(VALUES),
        entries: DEFAULT != VALUES ? _default : createMethod('entries')
      };
      if (FORCE)
        for (key in methods) {
          if (!(key in proto))
            $redef(proto, key, methods[key]);
        }
      else
        $def($def.P + $def.F * $iter.BUGGY, NAME, methods);
    }
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.18/library/modules/es6.array.iterator", ["npm:core-js@0.9.18/library/modules/$", "npm:core-js@0.9.18/library/modules/$.unscope", "npm:core-js@0.9.18/library/modules/$.uid", "npm:core-js@0.9.18/library/modules/$.iter", "npm:core-js@0.9.18/library/modules/$.iter-define"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var $ = require("npm:core-js@0.9.18/library/modules/$"),
      setUnscope = require("npm:core-js@0.9.18/library/modules/$.unscope"),
      ITER = require("npm:core-js@0.9.18/library/modules/$.uid").safe('iter'),
      $iter = require("npm:core-js@0.9.18/library/modules/$.iter"),
      step = $iter.step,
      Iterators = $iter.Iterators;
  require("npm:core-js@0.9.18/library/modules/$.iter-define")(Array, 'Array', function(iterated, kind) {
    $.set(this, ITER, {
      o: $.toObject(iterated),
      i: 0,
      k: kind
    });
  }, function() {
    var iter = this[ITER],
        O = iter.o,
        kind = iter.k,
        index = iter.i++;
    if (!O || index >= O.length) {
      iter.o = undefined;
      return step(1);
    }
    if (kind == 'keys')
      return step(0, index);
    if (kind == 'values')
      return step(0, O[index]);
    return step(0, [index, O[index]]);
  }, 'values');
  Iterators.Arguments = Iterators.Array;
  setUnscope('keys');
  setUnscope('values');
  setUnscope('entries');
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.18/library/modules/$.for-of", ["npm:core-js@0.9.18/library/modules/$.ctx", "npm:core-js@0.9.18/library/modules/$.iter", "npm:core-js@0.9.18/library/modules/$.iter-call"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var ctx = require("npm:core-js@0.9.18/library/modules/$.ctx"),
      get = require("npm:core-js@0.9.18/library/modules/$.iter").get,
      call = require("npm:core-js@0.9.18/library/modules/$.iter-call");
  module.exports = function(iterable, entries, fn, that) {
    var iterator = get(iterable),
        f = ctx(fn, that, entries ? 2 : 1),
        step;
    while (!(step = iterator.next()).done) {
      if (call(iterator, f, step.value, entries) === false) {
        return call.close(iterator);
      }
    }
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.18/library/modules/$.collection", ["npm:core-js@0.9.18/library/modules/$", "npm:core-js@0.9.18/library/modules/$.def", "npm:core-js@0.9.18/library/modules/$.iter", "npm:core-js@0.9.18/library/modules/$.for-of", "npm:core-js@0.9.18/library/modules/$.assert", "npm:core-js@0.9.18/library/modules/$.uid", "npm:core-js@0.9.18/library/modules/$.mix", "npm:core-js@0.9.18/library/modules/$.cof", "npm:core-js@0.9.18/library/modules/$.species"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var $ = require("npm:core-js@0.9.18/library/modules/$"),
      $def = require("npm:core-js@0.9.18/library/modules/$.def"),
      $iter = require("npm:core-js@0.9.18/library/modules/$.iter"),
      BUGGY = $iter.BUGGY,
      forOf = require("npm:core-js@0.9.18/library/modules/$.for-of"),
      assertInstance = require("npm:core-js@0.9.18/library/modules/$.assert").inst,
      INTERNAL = require("npm:core-js@0.9.18/library/modules/$.uid").safe('internal');
  module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
    var Base = $.g[NAME],
        C = Base,
        ADDER = IS_MAP ? 'set' : 'add',
        proto = C && C.prototype,
        O = {};
    if (!$.DESC || !$.isFunction(C) || !(IS_WEAK || !BUGGY && proto.forEach && proto.entries)) {
      C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
      require("npm:core-js@0.9.18/library/modules/$.mix")(C.prototype, methods);
    } else {
      C = wrapper(function(target, iterable) {
        assertInstance(target, C, NAME);
        target[INTERNAL] = new Base;
        if (iterable != undefined)
          forOf(iterable, IS_MAP, target[ADDER], target);
      });
      $.each.call('add,clear,delete,forEach,get,has,set,keys,values,entries'.split(','), function(KEY) {
        var chain = KEY == 'add' || KEY == 'set';
        if (KEY in proto)
          $.hide(C.prototype, KEY, function(a, b) {
            var result = this[INTERNAL][KEY](a === 0 ? 0 : a, b);
            return chain ? this : result;
          });
      });
      if ('size' in proto)
        $.setDesc(C.prototype, 'size', {get: function() {
            return this[INTERNAL].size;
          }});
    }
    require("npm:core-js@0.9.18/library/modules/$.cof").set(C, NAME);
    O[NAME] = C;
    $def($def.G + $def.W + $def.F, O);
    require("npm:core-js@0.9.18/library/modules/$.species")(C);
    if (!IS_WEAK)
      common.setIter(C, NAME, IS_MAP);
    return C;
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.18/library/modules/es7.map.to-json", ["npm:core-js@0.9.18/library/modules/$.collection-to-json"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  require("npm:core-js@0.9.18/library/modules/$.collection-to-json")('Map');
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.18/library/fn/get-iterator", ["npm:core-js@0.9.18/library/modules/web.dom.iterable", "npm:core-js@0.9.18/library/modules/es6.string.iterator", "npm:core-js@0.9.18/library/modules/core.iter-helpers", "npm:core-js@0.9.18/library/modules/$"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  require("npm:core-js@0.9.18/library/modules/web.dom.iterable");
  require("npm:core-js@0.9.18/library/modules/es6.string.iterator");
  require("npm:core-js@0.9.18/library/modules/core.iter-helpers");
  module.exports = require("npm:core-js@0.9.18/library/modules/$").core.getIterator;
  global.define = __define;
  return module.exports;
});

System.register("npm:babel-runtime@5.8.24/core-js/is-iterable", ["npm:core-js@0.9.18/library/fn/is-iterable"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = {
    "default": require("npm:core-js@0.9.18/library/fn/is-iterable"),
    __esModule: true
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:rbush@1.4.1", ["npm:rbush@1.4.1/rbush"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = require("npm:rbush@1.4.1/rbush");
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.18/library/modules/es6.object.statics-accept-primitives", ["npm:core-js@0.9.18/library/modules/$", "npm:core-js@0.9.18/library/modules/$.def", "npm:core-js@0.9.18/library/modules/$.get-names"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var $ = require("npm:core-js@0.9.18/library/modules/$"),
      $def = require("npm:core-js@0.9.18/library/modules/$.def"),
      isObject = $.isObject,
      toObject = $.toObject;
  $.each.call(('freeze,seal,preventExtensions,isFrozen,isSealed,isExtensible,' + 'getOwnPropertyDescriptor,getPrototypeOf,keys,getOwnPropertyNames').split(','), function(KEY, ID) {
    var fn = ($.core.Object || {})[KEY] || Object[KEY],
        forced = 0,
        method = {};
    method[KEY] = ID == 0 ? function freeze(it) {
      return isObject(it) ? fn(it) : it;
    } : ID == 1 ? function seal(it) {
      return isObject(it) ? fn(it) : it;
    } : ID == 2 ? function preventExtensions(it) {
      return isObject(it) ? fn(it) : it;
    } : ID == 3 ? function isFrozen(it) {
      return isObject(it) ? fn(it) : true;
    } : ID == 4 ? function isSealed(it) {
      return isObject(it) ? fn(it) : true;
    } : ID == 5 ? function isExtensible(it) {
      return isObject(it) ? fn(it) : false;
    } : ID == 6 ? function getOwnPropertyDescriptor(it, key) {
      return fn(toObject(it), key);
    } : ID == 7 ? function getPrototypeOf(it) {
      return fn(Object($.assertDefined(it)));
    } : ID == 8 ? function keys(it) {
      return fn(toObject(it));
    } : require("npm:core-js@0.9.18/library/modules/$.get-names").get;
    try {
      fn('z');
    } catch (e) {
      forced = 1;
    }
    $def($def.S + $def.F * forced, 'Object', method);
  });
  global.define = __define;
  return module.exports;
});

System.register("npm:babel-runtime@5.8.24/core-js/object/create", ["npm:core-js@0.9.18/library/fn/object/create"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = {
    "default": require("npm:core-js@0.9.18/library/fn/object/create"),
    __esModule: true
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.18/library/modules/es6.object.set-prototype-of", ["npm:core-js@0.9.18/library/modules/$.def", "npm:core-js@0.9.18/library/modules/$.set-proto"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var $def = require("npm:core-js@0.9.18/library/modules/$.def");
  $def($def.S, 'Object', {setPrototypeOf: require("npm:core-js@0.9.18/library/modules/$.set-proto").set});
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.18/library/modules/es6.array.from", ["npm:core-js@0.9.18/library/modules/$", "npm:core-js@0.9.18/library/modules/$.ctx", "npm:core-js@0.9.18/library/modules/$.def", "npm:core-js@0.9.18/library/modules/$.iter", "npm:core-js@0.9.18/library/modules/$.iter-call", "npm:core-js@0.9.18/library/modules/$.iter-detect"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var $ = require("npm:core-js@0.9.18/library/modules/$"),
      ctx = require("npm:core-js@0.9.18/library/modules/$.ctx"),
      $def = require("npm:core-js@0.9.18/library/modules/$.def"),
      $iter = require("npm:core-js@0.9.18/library/modules/$.iter"),
      call = require("npm:core-js@0.9.18/library/modules/$.iter-call");
  $def($def.S + $def.F * !require("npm:core-js@0.9.18/library/modules/$.iter-detect")(function(iter) {
    Array.from(iter);
  }), 'Array', {from: function from(arrayLike) {
      var O = Object($.assertDefined(arrayLike)),
          mapfn = arguments[1],
          mapping = mapfn !== undefined,
          f = mapping ? ctx(mapfn, arguments[2], 2) : undefined,
          index = 0,
          length,
          result,
          step,
          iterator;
      if ($iter.is(O)) {
        iterator = $iter.get(O);
        result = new (typeof this == 'function' ? this : Array);
        for (; !(step = iterator.next()).done; index++) {
          result[index] = mapping ? call(iterator, f, [step.value, index], true) : step.value;
        }
      } else {
        result = new (typeof this == 'function' ? this : Array)(length = $.toLength(O.length));
        for (; length > index; index++) {
          result[index] = mapping ? f(O[index], index) : O[index];
        }
      }
      result.length = index;
      return result;
    }});
  global.define = __define;
  return module.exports;
});

System.register("npm:moment@2.10.6", ["npm:moment@2.10.6/moment"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = require("npm:moment@2.10.6/moment");
  global.define = __define;
  return module.exports;
});

System.register("npm:jclass@1.1.9", ["npm:jclass@1.1.9/index"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = require("npm:jclass@1.1.9/index");
  global.define = __define;
  return module.exports;
});

System.register("npm:process@0.10.1", ["npm:process@0.10.1/browser"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = require("npm:process@0.10.1/browser");
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.18/library/fn/object/define-property", ["npm:core-js@0.9.18/library/modules/$"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var $ = require("npm:core-js@0.9.18/library/modules/$");
  module.exports = function defineProperty(it, key, desc) {
    return $.setDesc(it, key, desc);
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:gl-matrix@2.3.1/src/gl-matrix", ["npm:gl-matrix@2.3.1/src/gl-matrix/common", "npm:gl-matrix@2.3.1/src/gl-matrix/mat2", "npm:gl-matrix@2.3.1/src/gl-matrix/mat2d", "npm:gl-matrix@2.3.1/src/gl-matrix/mat3", "npm:gl-matrix@2.3.1/src/gl-matrix/mat4", "npm:gl-matrix@2.3.1/src/gl-matrix/quat", "npm:gl-matrix@2.3.1/src/gl-matrix/vec2", "npm:gl-matrix@2.3.1/src/gl-matrix/vec3", "npm:gl-matrix@2.3.1/src/gl-matrix/vec4"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  exports.glMatrix = require("npm:gl-matrix@2.3.1/src/gl-matrix/common");
  exports.mat2 = require("npm:gl-matrix@2.3.1/src/gl-matrix/mat2");
  exports.mat2d = require("npm:gl-matrix@2.3.1/src/gl-matrix/mat2d");
  exports.mat3 = require("npm:gl-matrix@2.3.1/src/gl-matrix/mat3");
  exports.mat4 = require("npm:gl-matrix@2.3.1/src/gl-matrix/mat4");
  exports.quat = require("npm:gl-matrix@2.3.1/src/gl-matrix/quat");
  exports.vec2 = require("npm:gl-matrix@2.3.1/src/gl-matrix/vec2");
  exports.vec3 = require("npm:gl-matrix@2.3.1/src/gl-matrix/vec3");
  exports.vec4 = require("npm:gl-matrix@2.3.1/src/gl-matrix/vec4");
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.18/library/modules/$.cof", ["npm:core-js@0.9.18/library/modules/$", "npm:core-js@0.9.18/library/modules/$.wks"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var $ = require("npm:core-js@0.9.18/library/modules/$"),
      TAG = require("npm:core-js@0.9.18/library/modules/$.wks")('toStringTag'),
      toString = {}.toString;
  function cof(it) {
    return toString.call(it).slice(8, -1);
  }
  cof.classof = function(it) {
    var O,
        T;
    return it == undefined ? it === undefined ? 'Undefined' : 'Null' : typeof(T = (O = Object(it))[TAG]) == 'string' ? T : cof(O);
  };
  cof.set = function(it, tag, stat) {
    if (it && !$.has(it = stat ? it : it.prototype, TAG))
      $.hide(it, TAG, tag);
  };
  module.exports = cof;
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.18/library/modules/es6.string.iterator", ["npm:core-js@0.9.18/library/modules/$", "npm:core-js@0.9.18/library/modules/$.string-at", "npm:core-js@0.9.18/library/modules/$.uid", "npm:core-js@0.9.18/library/modules/$.iter", "npm:core-js@0.9.18/library/modules/$.iter-define"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var set = require("npm:core-js@0.9.18/library/modules/$").set,
      $at = require("npm:core-js@0.9.18/library/modules/$.string-at")(true),
      ITER = require("npm:core-js@0.9.18/library/modules/$.uid").safe('iter'),
      $iter = require("npm:core-js@0.9.18/library/modules/$.iter"),
      step = $iter.step;
  require("npm:core-js@0.9.18/library/modules/$.iter-define")(String, 'String', function(iterated) {
    set(this, ITER, {
      o: String(iterated),
      i: 0
    });
  }, function() {
    var iter = this[ITER],
        O = iter.o,
        index = iter.i,
        point;
    if (index >= O.length)
      return step(1);
    point = $at(O, index);
    iter.i += point.length;
    return step(0, point);
  });
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.18/library/modules/web.dom.iterable", ["npm:core-js@0.9.18/library/modules/es6.array.iterator", "npm:core-js@0.9.18/library/modules/$", "npm:core-js@0.9.18/library/modules/$.iter", "npm:core-js@0.9.18/library/modules/$.wks"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  require("npm:core-js@0.9.18/library/modules/es6.array.iterator");
  var $ = require("npm:core-js@0.9.18/library/modules/$"),
      Iterators = require("npm:core-js@0.9.18/library/modules/$.iter").Iterators,
      ITERATOR = require("npm:core-js@0.9.18/library/modules/$.wks")('iterator'),
      ArrayValues = Iterators.Array,
      NL = $.g.NodeList,
      HTC = $.g.HTMLCollection,
      NLProto = NL && NL.prototype,
      HTCProto = HTC && HTC.prototype;
  if ($.FW) {
    if (NL && !(ITERATOR in NLProto))
      $.hide(NLProto, ITERATOR, ArrayValues);
    if (HTC && !(ITERATOR in HTCProto))
      $.hide(HTCProto, ITERATOR, ArrayValues);
  }
  Iterators.NodeList = Iterators.HTMLCollection = ArrayValues;
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.18/library/modules/$.collection-strong", ["npm:core-js@0.9.18/library/modules/$", "npm:core-js@0.9.18/library/modules/$.ctx", "npm:core-js@0.9.18/library/modules/$.uid", "npm:core-js@0.9.18/library/modules/$.assert", "npm:core-js@0.9.18/library/modules/$.for-of", "npm:core-js@0.9.18/library/modules/$.iter", "npm:core-js@0.9.18/library/modules/$.mix", "npm:core-js@0.9.18/library/modules/$.iter-define"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var $ = require("npm:core-js@0.9.18/library/modules/$"),
      ctx = require("npm:core-js@0.9.18/library/modules/$.ctx"),
      safe = require("npm:core-js@0.9.18/library/modules/$.uid").safe,
      assert = require("npm:core-js@0.9.18/library/modules/$.assert"),
      forOf = require("npm:core-js@0.9.18/library/modules/$.for-of"),
      step = require("npm:core-js@0.9.18/library/modules/$.iter").step,
      $has = $.has,
      set = $.set,
      isObject = $.isObject,
      hide = $.hide,
      isExtensible = Object.isExtensible || isObject,
      ID = safe('id'),
      O1 = safe('O1'),
      LAST = safe('last'),
      FIRST = safe('first'),
      ITER = safe('iter'),
      SIZE = $.DESC ? safe('size') : 'size',
      id = 0;
  function fastKey(it, create) {
    if (!isObject(it))
      return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
    if (!$has(it, ID)) {
      if (!isExtensible(it))
        return 'F';
      if (!create)
        return 'E';
      hide(it, ID, ++id);
    }
    return 'O' + it[ID];
  }
  function getEntry(that, key) {
    var index = fastKey(key),
        entry;
    if (index !== 'F')
      return that[O1][index];
    for (entry = that[FIRST]; entry; entry = entry.n) {
      if (entry.k == key)
        return entry;
    }
  }
  module.exports = {
    getConstructor: function(wrapper, NAME, IS_MAP, ADDER) {
      var C = wrapper(function(that, iterable) {
        assert.inst(that, C, NAME);
        set(that, O1, $.create(null));
        set(that, SIZE, 0);
        set(that, LAST, undefined);
        set(that, FIRST, undefined);
        if (iterable != undefined)
          forOf(iterable, IS_MAP, that[ADDER], that);
      });
      require("npm:core-js@0.9.18/library/modules/$.mix")(C.prototype, {
        clear: function clear() {
          for (var that = this,
              data = that[O1],
              entry = that[FIRST]; entry; entry = entry.n) {
            entry.r = true;
            if (entry.p)
              entry.p = entry.p.n = undefined;
            delete data[entry.i];
          }
          that[FIRST] = that[LAST] = undefined;
          that[SIZE] = 0;
        },
        'delete': function(key) {
          var that = this,
              entry = getEntry(that, key);
          if (entry) {
            var next = entry.n,
                prev = entry.p;
            delete that[O1][entry.i];
            entry.r = true;
            if (prev)
              prev.n = next;
            if (next)
              next.p = prev;
            if (that[FIRST] == entry)
              that[FIRST] = next;
            if (that[LAST] == entry)
              that[LAST] = prev;
            that[SIZE]--;
          }
          return !!entry;
        },
        forEach: function forEach(callbackfn) {
          var f = ctx(callbackfn, arguments[1], 3),
              entry;
          while (entry = entry ? entry.n : this[FIRST]) {
            f(entry.v, entry.k, this);
            while (entry && entry.r)
              entry = entry.p;
          }
        },
        has: function has(key) {
          return !!getEntry(this, key);
        }
      });
      if ($.DESC)
        $.setDesc(C.prototype, 'size', {get: function() {
            return assert.def(this[SIZE]);
          }});
      return C;
    },
    def: function(that, key, value) {
      var entry = getEntry(that, key),
          prev,
          index;
      if (entry) {
        entry.v = value;
      } else {
        that[LAST] = entry = {
          i: index = fastKey(key, true),
          k: key,
          v: value,
          p: prev = that[LAST],
          n: undefined,
          r: false
        };
        if (!that[FIRST])
          that[FIRST] = entry;
        if (prev)
          prev.n = entry;
        that[SIZE]++;
        if (index !== 'F')
          that[O1][index] = entry;
      }
      return that;
    },
    getEntry: getEntry,
    setIter: function(C, NAME, IS_MAP) {
      require("npm:core-js@0.9.18/library/modules/$.iter-define")(C, NAME, function(iterated, kind) {
        set(this, ITER, {
          o: iterated,
          k: kind
        });
      }, function() {
        var iter = this[ITER],
            kind = iter.k,
            entry = iter.l;
        while (entry && entry.r)
          entry = entry.p;
        if (!iter.o || !(iter.l = entry = entry ? entry.n : iter.o[FIRST])) {
          iter.o = undefined;
          return step(1);
        }
        if (kind == 'keys')
          return step(0, entry.k);
        if (kind == 'values')
          return step(0, entry.v);
        return step(0, [entry.k, entry.v]);
      }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);
    }
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:babel-runtime@5.8.24/core-js/get-iterator", ["npm:core-js@0.9.18/library/fn/get-iterator"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = {
    "default": require("npm:core-js@0.9.18/library/fn/get-iterator"),
    __esModule: true
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.18/library/fn/object/get-own-property-descriptor", ["npm:core-js@0.9.18/library/modules/$", "npm:core-js@0.9.18/library/modules/es6.object.statics-accept-primitives"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var $ = require("npm:core-js@0.9.18/library/modules/$");
  require("npm:core-js@0.9.18/library/modules/es6.object.statics-accept-primitives");
  module.exports = function getOwnPropertyDescriptor(it, key) {
    return $.getDesc(it, key);
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.18/library/fn/object/set-prototype-of", ["npm:core-js@0.9.18/library/modules/es6.object.set-prototype-of", "npm:core-js@0.9.18/library/modules/$"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  require("npm:core-js@0.9.18/library/modules/es6.object.set-prototype-of");
  module.exports = require("npm:core-js@0.9.18/library/modules/$").core.Object.setPrototypeOf;
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.18/library/fn/array/from", ["npm:core-js@0.9.18/library/modules/es6.string.iterator", "npm:core-js@0.9.18/library/modules/es6.array.from", "npm:core-js@0.9.18/library/modules/$"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  require("npm:core-js@0.9.18/library/modules/es6.string.iterator");
  require("npm:core-js@0.9.18/library/modules/es6.array.from");
  module.exports = require("npm:core-js@0.9.18/library/modules/$").core.Array.from;
  global.define = __define;
  return module.exports;
});

System.register("npm:hasharray@0.3.0/src/HashArray", ["npm:jclass@1.1.9"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var JClass = require("npm:jclass@1.1.9");
  var HashArray = JClass._extend({
    init: function(keyFields, callback, options) {
      keyFields = keyFields instanceof Array ? keyFields : [keyFields];
      this._map = {};
      this._list = [];
      this.callback = callback;
      this.keyFields = keyFields;
      this.isHashArray = true;
      this.options = options || {ignoreDuplicates: false};
      if (callback) {
        callback('construct');
      }
    },
    addOne: function(obj) {
      var needsDupCheck = false;
      for (var key in this.keyFields) {
        key = this.keyFields[key];
        var inst = this.objectAt(obj, key);
        if (inst) {
          if (this._map[inst]) {
            if (this.options.ignoreDuplicates)
              return ;
            if (this._map[inst].indexOf(obj) != -1) {
              needsDupCheck = true;
              continue;
            }
            this._map[inst].push(obj);
          } else
            this._map[inst] = [obj];
        }
      }
      if (!needsDupCheck || this._list.indexOf(obj) == -1)
        this._list.push(obj);
    },
    add: function() {
      for (var i = 0; i < arguments.length; i++) {
        this.addOne(arguments[i]);
      }
      if (this.callback) {
        this.callback('add', Array.prototype.slice.call(arguments, 0));
      }
      return this;
    },
    addAll: function(arr) {
      if (arr.length < 100)
        this.add.apply(this, arr);
      else {
        for (var i = 0; i < arr.length; i++)
          this.add(arr[i]);
      }
      return this;
    },
    addMap: function(key, obj) {
      this._map[key] = obj;
      if (this.callback) {
        this.callback('addMap', {
          key: key,
          obj: obj
        });
      }
      return this;
    },
    intersection: function(other) {
      var self = this;
      if (!other || !other.isHashArray)
        throw Error('Cannot HashArray.intersection() on a non-hasharray object. You passed in: ', other);
      var ret = this.clone(null, true),
          allItems = this.clone(null, true).addAll(this.all.concat(other.all));
      allItems.all.forEach(function(item) {
        if (self.collides(item) && other.collides(item))
          ret.add(item);
      });
      return ret;
    },
    complement: function(other) {
      var self = this;
      if (!other || !other.isHashArray)
        throw Error('Cannot HashArray.complement() on a non-hasharray object. You passed in: ', other);
      var ret = this.clone(null, true);
      this.all.forEach(function(item) {
        if (!other.collides(item))
          ret.add(item);
      });
      return ret;
    },
    get: function(key) {
      return (!(this._map[key] instanceof Array) || this._map[key].length != 1) ? this._map[key] : this._map[key][0];
    },
    getAll: function(keys) {
      keys = keys instanceof Array ? keys : [keys];
      if (keys[0] == '*')
        return this.all;
      var res = new HashArray(this.keyFields);
      for (var key in keys)
        res.add.apply(res, this.getAsArray(keys[key]));
      return res.all;
    },
    getAsArray: function(key) {
      return this._map[key] || [];
    },
    getUniqueRandomIntegers: function(count, min, max) {
      var res = [],
          map = {};
      count = Math.min(Math.max(max - min, 1), count);
      while (res.length < count) {
        var r = Math.floor(min + (Math.random() * (max + 1)));
        if (map[r])
          continue;
        map[r] = true;
        res.push(r);
      }
      return res;
    },
    sample: function(count, keys) {
      var image = this.all,
          ixs = {},
          res = [];
      if (keys)
        image = this.getAll(keys);
      var rand = this.getUniqueRandomIntegers(count, 0, image.length - 1);
      for (var i = 0; i < rand.length; i++)
        res.push(image[rand[i]]);
      return res;
    },
    has: function(key) {
      return this._map.hasOwnProperty(key);
    },
    collides: function(item) {
      for (var k in this.keyFields)
        if (this.has(this.objectAt(item, this.keyFields[k])))
          return true;
      return false;
    },
    hasMultiple: function(key) {
      return this._map[key] instanceof Array;
    },
    removeByKey: function() {
      var removed = [];
      for (var i = 0; i < arguments.length; i++) {
        var key = arguments[i];
        var items = this._map[key].concat();
        if (items) {
          removed = removed.concat(items);
          for (var j in items) {
            var item = items[j];
            for (var ix in this.keyFields) {
              var key2 = this.objectAt(item, this.keyFields[ix]);
              if (key2 && this._map[key2]) {
                var ix = this._map[key2].indexOf(item);
                if (ix != -1) {
                  this._map[key2].splice(ix, 1);
                }
                if (this._map[key2].length == 0)
                  delete this._map[key2];
              }
            }
            this._list.splice(this._list.indexOf(item), 1);
          }
        }
        delete this._map[key];
      }
      if (this.callback) {
        this.callback('removeByKey', removed);
      }
      return this;
    },
    remove: function() {
      for (var i = 0; i < arguments.length; i++) {
        var item = arguments[i];
        for (var ix in this.keyFields) {
          var key = this.objectAt(item, this.keyFields[ix]);
          if (key) {
            var ix = this._map[key].indexOf(item);
            if (ix != -1)
              this._map[key].splice(ix, 1);
            if (this._map[key].length == 0)
              delete this._map[key];
          }
        }
        this._list.splice(this._list.indexOf(item), 1);
      }
      if (this.callback) {
        this.callback('remove', arguments);
      }
      return this;
    },
    removeAll: function() {
      var old = this._list.concat();
      this._map = {};
      this._list = [];
      if (this.callback) {
        this.callback('remove', old);
      }
      return this;
    },
    objectAt: function(obj, path) {
      if (typeof path === 'string') {
        return obj[path];
      }
      var dup = path.concat();
      while (dup.length && obj) {
        obj = obj[dup.shift()];
      }
      return obj;
    },
    forEach: function(keys, callback) {
      keys = keys instanceof Array ? keys : [keys];
      var objs = this.getAll(keys);
      objs.forEach(callback);
      return this;
    },
    forEachDeep: function(keys, key, callback) {
      keys = keys instanceof Array ? keys : [keys];
      var self = this,
          objs = this.getAll(keys);
      objs.forEach(function(item) {
        callback(self.objectAt(item, key), item);
      });
      return this;
    },
    clone: function(callback, ignoreItems) {
      var n = new HashArray(this.keyFields.concat(), callback ? callback : this.callback);
      if (!ignoreItems)
        n.add.apply(n, this.all.concat());
      return n;
    },
    sum: function(keys, key, weightKey) {
      var self = this,
          ret = 0;
      this.forEachDeep(keys, key, function(value, item) {
        if (weightKey !== undefined)
          value *= self.objectAt(item, weightKey);
        ret += value;
      });
      return ret;
    },
    average: function(keys, key, weightKey) {
      var ret = 0,
          tot = 0,
          weightsTotal = 0,
          self = this;
      if (weightKey !== undefined)
        this.forEachDeep(keys, weightKey, function(value) {
          weightsTotal += value;
        });
      this.forEachDeep(keys, key, function(value, item) {
        if (weightKey !== undefined)
          value *= (self.objectAt(item, weightKey) / weightsTotal);
        ret += value;
        tot++;
      });
      return weightKey !== undefined ? ret : ret / tot;
    },
    filter: function(keys, callbackOrKey) {
      var self = this;
      var callback = (typeof(callbackOrKey) == 'function') ? callbackOrKey : defaultCallback;
      var ha = new HashArray(this.keyFields);
      ha.addAll(this.getAll(keys).filter(callback));
      return ha;
      function defaultCallback(item) {
        var val = self.objectAt(item, callbackOrKey);
        return val !== undefined && val !== false;
      }
    }
  });
  Object.defineProperty(HashArray.prototype, 'all', {get: function() {
      return this._list;
    }});
  Object.defineProperty(HashArray.prototype, 'map', {get: function() {
      return this._map;
    }});
  module.exports = HashArray;
  if (typeof window !== 'undefined')
    window.HashArray = HashArray;
  global.define = __define;
  return module.exports;
});

System.register("github:jspm/nodelibs-process@0.1.1/index", ["npm:process@0.10.1"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = System._nodeRequire ? process : require("npm:process@0.10.1");
  global.define = __define;
  return module.exports;
});

System.register("npm:babel-runtime@5.8.24/core-js/object/define-property", ["npm:core-js@0.9.18/library/fn/object/define-property"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = {
    "default": require("npm:core-js@0.9.18/library/fn/object/define-property"),
    __esModule: true
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:gl-matrix@2.3.1", ["npm:gl-matrix@2.3.1/src/gl-matrix"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = require("npm:gl-matrix@2.3.1/src/gl-matrix");
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.18/library/modules/es6.object.to-string", ["npm:core-js@0.9.18/library/modules/$.cof", "npm:core-js@0.9.18/library/modules/$.wks", "npm:core-js@0.9.18/library/modules/$", "npm:core-js@0.9.18/library/modules/$.redef"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var cof = require("npm:core-js@0.9.18/library/modules/$.cof"),
      tmp = {};
  tmp[require("npm:core-js@0.9.18/library/modules/$.wks")('toStringTag')] = 'z';
  if (require("npm:core-js@0.9.18/library/modules/$").FW && cof(tmp) != 'z') {
    require("npm:core-js@0.9.18/library/modules/$.redef")(Object.prototype, 'toString', function toString() {
      return '[object ' + cof.classof(this) + ']';
    }, true);
  }
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.18/library/modules/es6.map", ["npm:core-js@0.9.18/library/modules/$.collection-strong", "npm:core-js@0.9.18/library/modules/$.collection"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var strong = require("npm:core-js@0.9.18/library/modules/$.collection-strong");
  require("npm:core-js@0.9.18/library/modules/$.collection")('Map', function(get) {
    return function Map() {
      return get(this, arguments[0]);
    };
  }, {
    get: function get(key) {
      var entry = strong.getEntry(this, key);
      return entry && entry.v;
    },
    set: function set(key, value) {
      return strong.def(this, key === 0 ? 0 : key, value);
    }
  }, strong, true);
  global.define = __define;
  return module.exports;
});

System.register("npm:babel-runtime@5.8.24/helpers/sliced-to-array", ["npm:babel-runtime@5.8.24/core-js/get-iterator", "npm:babel-runtime@5.8.24/core-js/is-iterable"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  "use strict";
  var _getIterator = require("npm:babel-runtime@5.8.24/core-js/get-iterator")["default"];
  var _isIterable = require("npm:babel-runtime@5.8.24/core-js/is-iterable")["default"];
  exports["default"] = (function() {
    function sliceIterator(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;
      try {
        for (var _i = _getIterator(arr),
            _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i)
            break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"])
            _i["return"]();
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    }
    return function(arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (_isIterable(Object(arr))) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }
    };
  })();
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:babel-runtime@5.8.24/core-js/object/get-own-property-descriptor", ["npm:core-js@0.9.18/library/fn/object/get-own-property-descriptor"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = {
    "default": require("npm:core-js@0.9.18/library/fn/object/get-own-property-descriptor"),
    __esModule: true
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:babel-runtime@5.8.24/core-js/object/set-prototype-of", ["npm:core-js@0.9.18/library/fn/object/set-prototype-of"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = {
    "default": require("npm:core-js@0.9.18/library/fn/object/set-prototype-of"),
    __esModule: true
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:babel-runtime@5.8.24/core-js/array/from", ["npm:core-js@0.9.18/library/fn/array/from"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = {
    "default": require("npm:core-js@0.9.18/library/fn/array/from"),
    __esModule: true
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:hasharray@0.3.0/index", ["npm:hasharray@0.3.0/src/HashArray"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = require("npm:hasharray@0.3.0/src/HashArray");
  global.define = __define;
  return module.exports;
});

System.register("github:jspm/nodelibs-process@0.1.1", ["github:jspm/nodelibs-process@0.1.1/index"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = require("github:jspm/nodelibs-process@0.1.1/index");
  global.define = __define;
  return module.exports;
});

System.register("npm:babel-runtime@5.8.24/helpers/create-class", ["npm:babel-runtime@5.8.24/core-js/object/define-property"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  "use strict";
  var _Object$defineProperty = require("npm:babel-runtime@5.8.24/core-js/object/define-property")["default"];
  exports["default"] = (function() {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        _Object$defineProperty(target, descriptor.key, descriptor);
      }
    }
    return function(Constructor, protoProps, staticProps) {
      if (protoProps)
        defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        defineProperties(Constructor, staticProps);
      return Constructor;
    };
  })();
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:core-js@0.9.18/library/fn/map", ["npm:core-js@0.9.18/library/modules/es6.object.to-string", "npm:core-js@0.9.18/library/modules/es6.string.iterator", "npm:core-js@0.9.18/library/modules/web.dom.iterable", "npm:core-js@0.9.18/library/modules/es6.map", "npm:core-js@0.9.18/library/modules/es7.map.to-json", "npm:core-js@0.9.18/library/modules/$"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  require("npm:core-js@0.9.18/library/modules/es6.object.to-string");
  require("npm:core-js@0.9.18/library/modules/es6.string.iterator");
  require("npm:core-js@0.9.18/library/modules/web.dom.iterable");
  require("npm:core-js@0.9.18/library/modules/es6.map");
  require("npm:core-js@0.9.18/library/modules/es7.map.to-json");
  module.exports = require("npm:core-js@0.9.18/library/modules/$").core.Map;
  global.define = __define;
  return module.exports;
});

System.register("npm:babel-runtime@5.8.24/helpers/get", ["npm:babel-runtime@5.8.24/core-js/object/get-own-property-descriptor"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  "use strict";
  var _Object$getOwnPropertyDescriptor = require("npm:babel-runtime@5.8.24/core-js/object/get-own-property-descriptor")["default"];
  exports["default"] = function get(_x, _x2, _x3) {
    var _again = true;
    _function: while (_again) {
      var object = _x,
          property = _x2,
          receiver = _x3;
      desc = parent = getter = undefined;
      _again = false;
      if (object === null)
        object = Function.prototype;
      var desc = _Object$getOwnPropertyDescriptor(object, property);
      if (desc === undefined) {
        var parent = Object.getPrototypeOf(object);
        if (parent === null) {
          return undefined;
        } else {
          _x = parent;
          _x2 = property;
          _x3 = receiver;
          _again = true;
          continue _function;
        }
      } else if ("value" in desc) {
        return desc.value;
      } else {
        var getter = desc.get;
        if (getter === undefined) {
          return undefined;
        }
        return getter.call(receiver);
      }
    }
  };
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:babel-runtime@5.8.24/helpers/inherits", ["npm:babel-runtime@5.8.24/core-js/object/create", "npm:babel-runtime@5.8.24/core-js/object/set-prototype-of"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  "use strict";
  var _Object$create = require("npm:babel-runtime@5.8.24/core-js/object/create")["default"];
  var _Object$setPrototypeOf = require("npm:babel-runtime@5.8.24/core-js/object/set-prototype-of")["default"];
  exports["default"] = function(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }
    subClass.prototype = _Object$create(superClass && superClass.prototype, {constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }});
    if (superClass)
      _Object$setPrototypeOf ? _Object$setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  };
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:hasharray@0.3.0", ["npm:hasharray@0.3.0/index"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = require("npm:hasharray@0.3.0/index");
  global.define = __define;
  return module.exports;
});

System.register("npm:jquery@2.1.4/dist/jquery", ["github:jspm/nodelibs-process@0.1.1"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  "format cjs";
  (function(process) {
    (function(global, factory) {
      if (typeof module === "object" && typeof module.exports === "object") {
        module.exports = global.document ? factory(global, true) : function(w) {
          if (!w.document) {
            throw new Error("jQuery requires a window with a document");
          }
          return factory(w);
        };
      } else {
        factory(global);
      }
    }(typeof window !== "undefined" ? window : this, function(window, noGlobal) {
      var arr = [];
      var slice = arr.slice;
      var concat = arr.concat;
      var push = arr.push;
      var indexOf = arr.indexOf;
      var class2type = {};
      var toString = class2type.toString;
      var hasOwn = class2type.hasOwnProperty;
      var support = {};
      var document = window.document,
          version = "2.1.4",
          jQuery = function(selector, context) {
            return new jQuery.fn.init(selector, context);
          },
          rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
          rmsPrefix = /^-ms-/,
          rdashAlpha = /-([\da-z])/gi,
          fcamelCase = function(all, letter) {
            return letter.toUpperCase();
          };
      jQuery.fn = jQuery.prototype = {
        jquery: version,
        constructor: jQuery,
        selector: "",
        length: 0,
        toArray: function() {
          return slice.call(this);
        },
        get: function(num) {
          return num != null ? (num < 0 ? this[num + this.length] : this[num]) : slice.call(this);
        },
        pushStack: function(elems) {
          var ret = jQuery.merge(this.constructor(), elems);
          ret.prevObject = this;
          ret.context = this.context;
          return ret;
        },
        each: function(callback, args) {
          return jQuery.each(this, callback, args);
        },
        map: function(callback) {
          return this.pushStack(jQuery.map(this, function(elem, i) {
            return callback.call(elem, i, elem);
          }));
        },
        slice: function() {
          return this.pushStack(slice.apply(this, arguments));
        },
        first: function() {
          return this.eq(0);
        },
        last: function() {
          return this.eq(-1);
        },
        eq: function(i) {
          var len = this.length,
              j = +i + (i < 0 ? len : 0);
          return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
        },
        end: function() {
          return this.prevObject || this.constructor(null);
        },
        push: push,
        sort: arr.sort,
        splice: arr.splice
      };
      jQuery.extend = jQuery.fn.extend = function() {
        var options,
            name,
            src,
            copy,
            copyIsArray,
            clone,
            target = arguments[0] || {},
            i = 1,
            length = arguments.length,
            deep = false;
        if (typeof target === "boolean") {
          deep = target;
          target = arguments[i] || {};
          i++;
        }
        if (typeof target !== "object" && !jQuery.isFunction(target)) {
          target = {};
        }
        if (i === length) {
          target = this;
          i--;
        }
        for (; i < length; i++) {
          if ((options = arguments[i]) != null) {
            for (name in options) {
              src = target[name];
              copy = options[name];
              if (target === copy) {
                continue;
              }
              if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
                if (copyIsArray) {
                  copyIsArray = false;
                  clone = src && jQuery.isArray(src) ? src : [];
                } else {
                  clone = src && jQuery.isPlainObject(src) ? src : {};
                }
                target[name] = jQuery.extend(deep, clone, copy);
              } else if (copy !== undefined) {
                target[name] = copy;
              }
            }
          }
        }
        return target;
      };
      jQuery.extend({
        expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),
        isReady: true,
        error: function(msg) {
          throw new Error(msg);
        },
        noop: function() {},
        isFunction: function(obj) {
          return jQuery.type(obj) === "function";
        },
        isArray: Array.isArray,
        isWindow: function(obj) {
          return obj != null && obj === obj.window;
        },
        isNumeric: function(obj) {
          return !jQuery.isArray(obj) && (obj - parseFloat(obj) + 1) >= 0;
        },
        isPlainObject: function(obj) {
          if (jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow(obj)) {
            return false;
          }
          if (obj.constructor && !hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
            return false;
          }
          return true;
        },
        isEmptyObject: function(obj) {
          var name;
          for (name in obj) {
            return false;
          }
          return true;
        },
        type: function(obj) {
          if (obj == null) {
            return obj + "";
          }
          return typeof obj === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj;
        },
        globalEval: function(code) {
          var script,
              indirect = eval;
          code = jQuery.trim(code);
          if (code) {
            if (code.indexOf("use strict") === 1) {
              script = document.createElement("script");
              script.text = code;
              document.head.appendChild(script).parentNode.removeChild(script);
            } else {
              indirect(code);
            }
          }
        },
        camelCase: function(string) {
          return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
        },
        nodeName: function(elem, name) {
          return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
        },
        each: function(obj, callback, args) {
          var value,
              i = 0,
              length = obj.length,
              isArray = isArraylike(obj);
          if (args) {
            if (isArray) {
              for (; i < length; i++) {
                value = callback.apply(obj[i], args);
                if (value === false) {
                  break;
                }
              }
            } else {
              for (i in obj) {
                value = callback.apply(obj[i], args);
                if (value === false) {
                  break;
                }
              }
            }
          } else {
            if (isArray) {
              for (; i < length; i++) {
                value = callback.call(obj[i], i, obj[i]);
                if (value === false) {
                  break;
                }
              }
            } else {
              for (i in obj) {
                value = callback.call(obj[i], i, obj[i]);
                if (value === false) {
                  break;
                }
              }
            }
          }
          return obj;
        },
        trim: function(text) {
          return text == null ? "" : (text + "").replace(rtrim, "");
        },
        makeArray: function(arr, results) {
          var ret = results || [];
          if (arr != null) {
            if (isArraylike(Object(arr))) {
              jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);
            } else {
              push.call(ret, arr);
            }
          }
          return ret;
        },
        inArray: function(elem, arr, i) {
          return arr == null ? -1 : indexOf.call(arr, elem, i);
        },
        merge: function(first, second) {
          var len = +second.length,
              j = 0,
              i = first.length;
          for (; j < len; j++) {
            first[i++] = second[j];
          }
          first.length = i;
          return first;
        },
        grep: function(elems, callback, invert) {
          var callbackInverse,
              matches = [],
              i = 0,
              length = elems.length,
              callbackExpect = !invert;
          for (; i < length; i++) {
            callbackInverse = !callback(elems[i], i);
            if (callbackInverse !== callbackExpect) {
              matches.push(elems[i]);
            }
          }
          return matches;
        },
        map: function(elems, callback, arg) {
          var value,
              i = 0,
              length = elems.length,
              isArray = isArraylike(elems),
              ret = [];
          if (isArray) {
            for (; i < length; i++) {
              value = callback(elems[i], i, arg);
              if (value != null) {
                ret.push(value);
              }
            }
          } else {
            for (i in elems) {
              value = callback(elems[i], i, arg);
              if (value != null) {
                ret.push(value);
              }
            }
          }
          return concat.apply([], ret);
        },
        guid: 1,
        proxy: function(fn, context) {
          var tmp,
              args,
              proxy;
          if (typeof context === "string") {
            tmp = fn[context];
            context = fn;
            fn = tmp;
          }
          if (!jQuery.isFunction(fn)) {
            return undefined;
          }
          args = slice.call(arguments, 2);
          proxy = function() {
            return fn.apply(context || this, args.concat(slice.call(arguments)));
          };
          proxy.guid = fn.guid = fn.guid || jQuery.guid++;
          return proxy;
        },
        now: Date.now,
        support: support
      });
      jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
        class2type["[object " + name + "]"] = name.toLowerCase();
      });
      function isArraylike(obj) {
        var length = "length" in obj && obj.length,
            type = jQuery.type(obj);
        if (type === "function" || jQuery.isWindow(obj)) {
          return false;
        }
        if (obj.nodeType === 1 && length) {
          return true;
        }
        return type === "array" || length === 0 || typeof length === "number" && length > 0 && (length - 1) in obj;
      }
      var Sizzle = (function(window) {
        var i,
            support,
            Expr,
            getText,
            isXML,
            tokenize,
            compile,
            select,
            outermostContext,
            sortInput,
            hasDuplicate,
            setDocument,
            document,
            docElem,
            documentIsHTML,
            rbuggyQSA,
            rbuggyMatches,
            matches,
            contains,
            expando = "sizzle" + 1 * new Date(),
            preferredDoc = window.document,
            dirruns = 0,
            done = 0,
            classCache = createCache(),
            tokenCache = createCache(),
            compilerCache = createCache(),
            sortOrder = function(a, b) {
              if (a === b) {
                hasDuplicate = true;
              }
              return 0;
            },
            MAX_NEGATIVE = 1 << 31,
            hasOwn = ({}).hasOwnProperty,
            arr = [],
            pop = arr.pop,
            push_native = arr.push,
            push = arr.push,
            slice = arr.slice,
            indexOf = function(list, elem) {
              var i = 0,
                  len = list.length;
              for (; i < len; i++) {
                if (list[i] === elem) {
                  return i;
                }
              }
              return -1;
            },
            booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
            whitespace = "[\\x20\\t\\r\\n\\f]",
            characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",
            identifier = characterEncoding.replace("w", "w#"),
            attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace + "*([*^$|!~]?=)" + whitespace + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]",
            pseudos = ":(" + characterEncoding + ")(?:\\((" + "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" + "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" + ".*" + ")\\)|)",
            rwhitespace = new RegExp(whitespace + "+", "g"),
            rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),
            rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
            rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),
            rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g"),
            rpseudo = new RegExp(pseudos),
            ridentifier = new RegExp("^" + identifier + "$"),
            matchExpr = {
              "ID": new RegExp("^#(" + characterEncoding + ")"),
              "CLASS": new RegExp("^\\.(" + characterEncoding + ")"),
              "TAG": new RegExp("^(" + characterEncoding.replace("w", "w*") + ")"),
              "ATTR": new RegExp("^" + attributes),
              "PSEUDO": new RegExp("^" + pseudos),
              "CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
              "bool": new RegExp("^(?:" + booleans + ")$", "i"),
              "needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
            },
            rinputs = /^(?:input|select|textarea|button)$/i,
            rheader = /^h\d$/i,
            rnative = /^[^{]+\{\s*\[native \w/,
            rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
            rsibling = /[+~]/,
            rescape = /'|\\/g,
            runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"),
            funescape = function(_, escaped, escapedWhitespace) {
              var high = "0x" + escaped - 0x10000;
              return high !== high || escapedWhitespace ? escaped : high < 0 ? String.fromCharCode(high + 0x10000) : String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
            },
            unloadHandler = function() {
              setDocument();
            };
        try {
          push.apply((arr = slice.call(preferredDoc.childNodes)), preferredDoc.childNodes);
          arr[preferredDoc.childNodes.length].nodeType;
        } catch (e) {
          push = {apply: arr.length ? function(target, els) {
              push_native.apply(target, slice.call(els));
            } : function(target, els) {
              var j = target.length,
                  i = 0;
              while ((target[j++] = els[i++])) {}
              target.length = j - 1;
            }};
        }
        function Sizzle(selector, context, results, seed) {
          var match,
              elem,
              m,
              nodeType,
              i,
              groups,
              old,
              nid,
              newContext,
              newSelector;
          if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
            setDocument(context);
          }
          context = context || document;
          results = results || [];
          nodeType = context.nodeType;
          if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
            return results;
          }
          if (!seed && documentIsHTML) {
            if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
              if ((m = match[1])) {
                if (nodeType === 9) {
                  elem = context.getElementById(m);
                  if (elem && elem.parentNode) {
                    if (elem.id === m) {
                      results.push(elem);
                      return results;
                    }
                  } else {
                    return results;
                  }
                } else {
                  if (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) && contains(context, elem) && elem.id === m) {
                    results.push(elem);
                    return results;
                  }
                }
              } else if (match[2]) {
                push.apply(results, context.getElementsByTagName(selector));
                return results;
              } else if ((m = match[3]) && support.getElementsByClassName) {
                push.apply(results, context.getElementsByClassName(m));
                return results;
              }
            }
            if (support.qsa && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
              nid = old = expando;
              newContext = context;
              newSelector = nodeType !== 1 && selector;
              if (nodeType === 1 && context.nodeName.toLowerCase() !== "object") {
                groups = tokenize(selector);
                if ((old = context.getAttribute("id"))) {
                  nid = old.replace(rescape, "\\$&");
                } else {
                  context.setAttribute("id", nid);
                }
                nid = "[id='" + nid + "'] ";
                i = groups.length;
                while (i--) {
                  groups[i] = nid + toSelector(groups[i]);
                }
                newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
                newSelector = groups.join(",");
              }
              if (newSelector) {
                try {
                  push.apply(results, newContext.querySelectorAll(newSelector));
                  return results;
                } catch (qsaError) {} finally {
                  if (!old) {
                    context.removeAttribute("id");
                  }
                }
              }
            }
          }
          return select(selector.replace(rtrim, "$1"), context, results, seed);
        }
        function createCache() {
          var keys = [];
          function cache(key, value) {
            if (keys.push(key + " ") > Expr.cacheLength) {
              delete cache[keys.shift()];
            }
            return (cache[key + " "] = value);
          }
          return cache;
        }
        function markFunction(fn) {
          fn[expando] = true;
          return fn;
        }
        function assert(fn) {
          var div = document.createElement("div");
          try {
            return !!fn(div);
          } catch (e) {
            return false;
          } finally {
            if (div.parentNode) {
              div.parentNode.removeChild(div);
            }
            div = null;
          }
        }
        function addHandle(attrs, handler) {
          var arr = attrs.split("|"),
              i = attrs.length;
          while (i--) {
            Expr.attrHandle[arr[i]] = handler;
          }
        }
        function siblingCheck(a, b) {
          var cur = b && a,
              diff = cur && a.nodeType === 1 && b.nodeType === 1 && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE);
          if (diff) {
            return diff;
          }
          if (cur) {
            while ((cur = cur.nextSibling)) {
              if (cur === b) {
                return -1;
              }
            }
          }
          return a ? 1 : -1;
        }
        function createInputPseudo(type) {
          return function(elem) {
            var name = elem.nodeName.toLowerCase();
            return name === "input" && elem.type === type;
          };
        }
        function createButtonPseudo(type) {
          return function(elem) {
            var name = elem.nodeName.toLowerCase();
            return (name === "input" || name === "button") && elem.type === type;
          };
        }
        function createPositionalPseudo(fn) {
          return markFunction(function(argument) {
            argument = +argument;
            return markFunction(function(seed, matches) {
              var j,
                  matchIndexes = fn([], seed.length, argument),
                  i = matchIndexes.length;
              while (i--) {
                if (seed[(j = matchIndexes[i])]) {
                  seed[j] = !(matches[j] = seed[j]);
                }
              }
            });
          });
        }
        function testContext(context) {
          return context && typeof context.getElementsByTagName !== "undefined" && context;
        }
        support = Sizzle.support = {};
        isXML = Sizzle.isXML = function(elem) {
          var documentElement = elem && (elem.ownerDocument || elem).documentElement;
          return documentElement ? documentElement.nodeName !== "HTML" : false;
        };
        setDocument = Sizzle.setDocument = function(node) {
          var hasCompare,
              parent,
              doc = node ? node.ownerDocument || node : preferredDoc;
          if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
            return document;
          }
          document = doc;
          docElem = doc.documentElement;
          parent = doc.defaultView;
          if (parent && parent !== parent.top) {
            if (parent.addEventListener) {
              parent.addEventListener("unload", unloadHandler, false);
            } else if (parent.attachEvent) {
              parent.attachEvent("onunload", unloadHandler);
            }
          }
          documentIsHTML = !isXML(doc);
          support.attributes = assert(function(div) {
            div.className = "i";
            return !div.getAttribute("className");
          });
          support.getElementsByTagName = assert(function(div) {
            div.appendChild(doc.createComment(""));
            return !div.getElementsByTagName("*").length;
          });
          support.getElementsByClassName = rnative.test(doc.getElementsByClassName);
          support.getById = assert(function(div) {
            docElem.appendChild(div).id = expando;
            return !doc.getElementsByName || !doc.getElementsByName(expando).length;
          });
          if (support.getById) {
            Expr.find["ID"] = function(id, context) {
              if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                var m = context.getElementById(id);
                return m && m.parentNode ? [m] : [];
              }
            };
            Expr.filter["ID"] = function(id) {
              var attrId = id.replace(runescape, funescape);
              return function(elem) {
                return elem.getAttribute("id") === attrId;
              };
            };
          } else {
            delete Expr.find["ID"];
            Expr.filter["ID"] = function(id) {
              var attrId = id.replace(runescape, funescape);
              return function(elem) {
                var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
                return node && node.value === attrId;
              };
            };
          }
          Expr.find["TAG"] = support.getElementsByTagName ? function(tag, context) {
            if (typeof context.getElementsByTagName !== "undefined") {
              return context.getElementsByTagName(tag);
            } else if (support.qsa) {
              return context.querySelectorAll(tag);
            }
          } : function(tag, context) {
            var elem,
                tmp = [],
                i = 0,
                results = context.getElementsByTagName(tag);
            if (tag === "*") {
              while ((elem = results[i++])) {
                if (elem.nodeType === 1) {
                  tmp.push(elem);
                }
              }
              return tmp;
            }
            return results;
          };
          Expr.find["CLASS"] = support.getElementsByClassName && function(className, context) {
            if (documentIsHTML) {
              return context.getElementsByClassName(className);
            }
          };
          rbuggyMatches = [];
          rbuggyQSA = [];
          if ((support.qsa = rnative.test(doc.querySelectorAll))) {
            assert(function(div) {
              docElem.appendChild(div).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\f]' msallowcapture=''>" + "<option selected=''></option></select>";
              if (div.querySelectorAll("[msallowcapture^='']").length) {
                rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
              }
              if (!div.querySelectorAll("[selected]").length) {
                rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
              }
              if (!div.querySelectorAll("[id~=" + expando + "-]").length) {
                rbuggyQSA.push("~=");
              }
              if (!div.querySelectorAll(":checked").length) {
                rbuggyQSA.push(":checked");
              }
              if (!div.querySelectorAll("a#" + expando + "+*").length) {
                rbuggyQSA.push(".#.+[+~]");
              }
            });
            assert(function(div) {
              var input = doc.createElement("input");
              input.setAttribute("type", "hidden");
              div.appendChild(input).setAttribute("name", "D");
              if (div.querySelectorAll("[name=d]").length) {
                rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
              }
              if (!div.querySelectorAll(":enabled").length) {
                rbuggyQSA.push(":enabled", ":disabled");
              }
              div.querySelectorAll("*,:x");
              rbuggyQSA.push(",.*:");
            });
          }
          if ((support.matchesSelector = rnative.test((matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)))) {
            assert(function(div) {
              support.disconnectedMatch = matches.call(div, "div");
              matches.call(div, "[s!='']:x");
              rbuggyMatches.push("!=", pseudos);
            });
          }
          rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
          rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));
          hasCompare = rnative.test(docElem.compareDocumentPosition);
          contains = hasCompare || rnative.test(docElem.contains) ? function(a, b) {
            var adown = a.nodeType === 9 ? a.documentElement : a,
                bup = b && b.parentNode;
            return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
          } : function(a, b) {
            if (b) {
              while ((b = b.parentNode)) {
                if (b === a) {
                  return true;
                }
              }
            }
            return false;
          };
          sortOrder = hasCompare ? function(a, b) {
            if (a === b) {
              hasDuplicate = true;
              return 0;
            }
            var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
            if (compare) {
              return compare;
            }
            compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1;
            if (compare & 1 || (!support.sortDetached && b.compareDocumentPosition(a) === compare)) {
              if (a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
                return -1;
              }
              if (b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
                return 1;
              }
              return sortInput ? (indexOf(sortInput, a) - indexOf(sortInput, b)) : 0;
            }
            return compare & 4 ? -1 : 1;
          } : function(a, b) {
            if (a === b) {
              hasDuplicate = true;
              return 0;
            }
            var cur,
                i = 0,
                aup = a.parentNode,
                bup = b.parentNode,
                ap = [a],
                bp = [b];
            if (!aup || !bup) {
              return a === doc ? -1 : b === doc ? 1 : aup ? -1 : bup ? 1 : sortInput ? (indexOf(sortInput, a) - indexOf(sortInput, b)) : 0;
            } else if (aup === bup) {
              return siblingCheck(a, b);
            }
            cur = a;
            while ((cur = cur.parentNode)) {
              ap.unshift(cur);
            }
            cur = b;
            while ((cur = cur.parentNode)) {
              bp.unshift(cur);
            }
            while (ap[i] === bp[i]) {
              i++;
            }
            return i ? siblingCheck(ap[i], bp[i]) : ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
          };
          return doc;
        };
        Sizzle.matches = function(expr, elements) {
          return Sizzle(expr, null, null, elements);
        };
        Sizzle.matchesSelector = function(elem, expr) {
          if ((elem.ownerDocument || elem) !== document) {
            setDocument(elem);
          }
          expr = expr.replace(rattributeQuotes, "='$1']");
          if (support.matchesSelector && documentIsHTML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
            try {
              var ret = matches.call(elem, expr);
              if (ret || support.disconnectedMatch || elem.document && elem.document.nodeType !== 11) {
                return ret;
              }
            } catch (e) {}
          }
          return Sizzle(expr, document, null, [elem]).length > 0;
        };
        Sizzle.contains = function(context, elem) {
          if ((context.ownerDocument || context) !== document) {
            setDocument(context);
          }
          return contains(context, elem);
        };
        Sizzle.attr = function(elem, name) {
          if ((elem.ownerDocument || elem) !== document) {
            setDocument(elem);
          }
          var fn = Expr.attrHandle[name.toLowerCase()],
              val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
          return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
        };
        Sizzle.error = function(msg) {
          throw new Error("Syntax error, unrecognized expression: " + msg);
        };
        Sizzle.uniqueSort = function(results) {
          var elem,
              duplicates = [],
              j = 0,
              i = 0;
          hasDuplicate = !support.detectDuplicates;
          sortInput = !support.sortStable && results.slice(0);
          results.sort(sortOrder);
          if (hasDuplicate) {
            while ((elem = results[i++])) {
              if (elem === results[i]) {
                j = duplicates.push(i);
              }
            }
            while (j--) {
              results.splice(duplicates[j], 1);
            }
          }
          sortInput = null;
          return results;
        };
        getText = Sizzle.getText = function(elem) {
          var node,
              ret = "",
              i = 0,
              nodeType = elem.nodeType;
          if (!nodeType) {
            while ((node = elem[i++])) {
              ret += getText(node);
            }
          } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
            if (typeof elem.textContent === "string") {
              return elem.textContent;
            } else {
              for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                ret += getText(elem);
              }
            }
          } else if (nodeType === 3 || nodeType === 4) {
            return elem.nodeValue;
          }
          return ret;
        };
        Expr = Sizzle.selectors = {
          cacheLength: 50,
          createPseudo: markFunction,
          match: matchExpr,
          attrHandle: {},
          find: {},
          relative: {
            ">": {
              dir: "parentNode",
              first: true
            },
            " ": {dir: "parentNode"},
            "+": {
              dir: "previousSibling",
              first: true
            },
            "~": {dir: "previousSibling"}
          },
          preFilter: {
            "ATTR": function(match) {
              match[1] = match[1].replace(runescape, funescape);
              match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);
              if (match[2] === "~=") {
                match[3] = " " + match[3] + " ";
              }
              return match.slice(0, 4);
            },
            "CHILD": function(match) {
              match[1] = match[1].toLowerCase();
              if (match[1].slice(0, 3) === "nth") {
                if (!match[3]) {
                  Sizzle.error(match[0]);
                }
                match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
                match[5] = +((match[7] + match[8]) || match[3] === "odd");
              } else if (match[3]) {
                Sizzle.error(match[0]);
              }
              return match;
            },
            "PSEUDO": function(match) {
              var excess,
                  unquoted = !match[6] && match[2];
              if (matchExpr["CHILD"].test(match[0])) {
                return null;
              }
              if (match[3]) {
                match[2] = match[4] || match[5] || "";
              } else if (unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) && (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
                match[0] = match[0].slice(0, excess);
                match[2] = unquoted.slice(0, excess);
              }
              return match.slice(0, 3);
            }
          },
          filter: {
            "TAG": function(nodeNameSelector) {
              var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
              return nodeNameSelector === "*" ? function() {
                return true;
              } : function(elem) {
                return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
              };
            },
            "CLASS": function(className) {
              var pattern = classCache[className + " "];
              return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function(elem) {
                return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
              });
            },
            "ATTR": function(name, operator, check) {
              return function(elem) {
                var result = Sizzle.attr(elem, name);
                if (result == null) {
                  return operator === "!=";
                }
                if (!operator) {
                  return true;
                }
                result += "";
                return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
              };
            },
            "CHILD": function(type, what, argument, first, last) {
              var simple = type.slice(0, 3) !== "nth",
                  forward = type.slice(-4) !== "last",
                  ofType = what === "of-type";
              return first === 1 && last === 0 ? function(elem) {
                return !!elem.parentNode;
              } : function(elem, context, xml) {
                var cache,
                    outerCache,
                    node,
                    diff,
                    nodeIndex,
                    start,
                    dir = simple !== forward ? "nextSibling" : "previousSibling",
                    parent = elem.parentNode,
                    name = ofType && elem.nodeName.toLowerCase(),
                    useCache = !xml && !ofType;
                if (parent) {
                  if (simple) {
                    while (dir) {
                      node = elem;
                      while ((node = node[dir])) {
                        if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                          return false;
                        }
                      }
                      start = dir = type === "only" && !start && "nextSibling";
                    }
                    return true;
                  }
                  start = [forward ? parent.firstChild : parent.lastChild];
                  if (forward && useCache) {
                    outerCache = parent[expando] || (parent[expando] = {});
                    cache = outerCache[type] || [];
                    nodeIndex = cache[0] === dirruns && cache[1];
                    diff = cache[0] === dirruns && cache[2];
                    node = nodeIndex && parent.childNodes[nodeIndex];
                    while ((node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop())) {
                      if (node.nodeType === 1 && ++diff && node === elem) {
                        outerCache[type] = [dirruns, nodeIndex, diff];
                        break;
                      }
                    }
                  } else if (useCache && (cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns) {
                    diff = cache[1];
                  } else {
                    while ((node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop())) {
                      if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                        if (useCache) {
                          (node[expando] || (node[expando] = {}))[type] = [dirruns, diff];
                        }
                        if (node === elem) {
                          break;
                        }
                      }
                    }
                  }
                  diff -= last;
                  return diff === first || (diff % first === 0 && diff / first >= 0);
                }
              };
            },
            "PSEUDO": function(pseudo, argument) {
              var args,
                  fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);
              if (fn[expando]) {
                return fn(argument);
              }
              if (fn.length > 1) {
                args = [pseudo, pseudo, "", argument];
                return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function(seed, matches) {
                  var idx,
                      matched = fn(seed, argument),
                      i = matched.length;
                  while (i--) {
                    idx = indexOf(seed, matched[i]);
                    seed[idx] = !(matches[idx] = matched[i]);
                  }
                }) : function(elem) {
                  return fn(elem, 0, args);
                };
              }
              return fn;
            }
          },
          pseudos: {
            "not": markFunction(function(selector) {
              var input = [],
                  results = [],
                  matcher = compile(selector.replace(rtrim, "$1"));
              return matcher[expando] ? markFunction(function(seed, matches, context, xml) {
                var elem,
                    unmatched = matcher(seed, null, xml, []),
                    i = seed.length;
                while (i--) {
                  if ((elem = unmatched[i])) {
                    seed[i] = !(matches[i] = elem);
                  }
                }
              }) : function(elem, context, xml) {
                input[0] = elem;
                matcher(input, null, xml, results);
                input[0] = null;
                return !results.pop();
              };
            }),
            "has": markFunction(function(selector) {
              return function(elem) {
                return Sizzle(selector, elem).length > 0;
              };
            }),
            "contains": markFunction(function(text) {
              text = text.replace(runescape, funescape);
              return function(elem) {
                return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
              };
            }),
            "lang": markFunction(function(lang) {
              if (!ridentifier.test(lang || "")) {
                Sizzle.error("unsupported lang: " + lang);
              }
              lang = lang.replace(runescape, funescape).toLowerCase();
              return function(elem) {
                var elemLang;
                do {
                  if ((elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang"))) {
                    elemLang = elemLang.toLowerCase();
                    return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
                  }
                } while ((elem = elem.parentNode) && elem.nodeType === 1);
                return false;
              };
            }),
            "target": function(elem) {
              var hash = window.location && window.location.hash;
              return hash && hash.slice(1) === elem.id;
            },
            "root": function(elem) {
              return elem === docElem;
            },
            "focus": function(elem) {
              return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
            },
            "enabled": function(elem) {
              return elem.disabled === false;
            },
            "disabled": function(elem) {
              return elem.disabled === true;
            },
            "checked": function(elem) {
              var nodeName = elem.nodeName.toLowerCase();
              return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
            },
            "selected": function(elem) {
              if (elem.parentNode) {
                elem.parentNode.selectedIndex;
              }
              return elem.selected === true;
            },
            "empty": function(elem) {
              for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                if (elem.nodeType < 6) {
                  return false;
                }
              }
              return true;
            },
            "parent": function(elem) {
              return !Expr.pseudos["empty"](elem);
            },
            "header": function(elem) {
              return rheader.test(elem.nodeName);
            },
            "input": function(elem) {
              return rinputs.test(elem.nodeName);
            },
            "button": function(elem) {
              var name = elem.nodeName.toLowerCase();
              return name === "input" && elem.type === "button" || name === "button";
            },
            "text": function(elem) {
              var attr;
              return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && ((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
            },
            "first": createPositionalPseudo(function() {
              return [0];
            }),
            "last": createPositionalPseudo(function(matchIndexes, length) {
              return [length - 1];
            }),
            "eq": createPositionalPseudo(function(matchIndexes, length, argument) {
              return [argument < 0 ? argument + length : argument];
            }),
            "even": createPositionalPseudo(function(matchIndexes, length) {
              var i = 0;
              for (; i < length; i += 2) {
                matchIndexes.push(i);
              }
              return matchIndexes;
            }),
            "odd": createPositionalPseudo(function(matchIndexes, length) {
              var i = 1;
              for (; i < length; i += 2) {
                matchIndexes.push(i);
              }
              return matchIndexes;
            }),
            "lt": createPositionalPseudo(function(matchIndexes, length, argument) {
              var i = argument < 0 ? argument + length : argument;
              for (; --i >= 0; ) {
                matchIndexes.push(i);
              }
              return matchIndexes;
            }),
            "gt": createPositionalPseudo(function(matchIndexes, length, argument) {
              var i = argument < 0 ? argument + length : argument;
              for (; ++i < length; ) {
                matchIndexes.push(i);
              }
              return matchIndexes;
            })
          }
        };
        Expr.pseudos["nth"] = Expr.pseudos["eq"];
        for (i in {
          radio: true,
          checkbox: true,
          file: true,
          password: true,
          image: true
        }) {
          Expr.pseudos[i] = createInputPseudo(i);
        }
        for (i in {
          submit: true,
          reset: true
        }) {
          Expr.pseudos[i] = createButtonPseudo(i);
        }
        function setFilters() {}
        setFilters.prototype = Expr.filters = Expr.pseudos;
        Expr.setFilters = new setFilters();
        tokenize = Sizzle.tokenize = function(selector, parseOnly) {
          var matched,
              match,
              tokens,
              type,
              soFar,
              groups,
              preFilters,
              cached = tokenCache[selector + " "];
          if (cached) {
            return parseOnly ? 0 : cached.slice(0);
          }
          soFar = selector;
          groups = [];
          preFilters = Expr.preFilter;
          while (soFar) {
            if (!matched || (match = rcomma.exec(soFar))) {
              if (match) {
                soFar = soFar.slice(match[0].length) || soFar;
              }
              groups.push((tokens = []));
            }
            matched = false;
            if ((match = rcombinators.exec(soFar))) {
              matched = match.shift();
              tokens.push({
                value: matched,
                type: match[0].replace(rtrim, " ")
              });
              soFar = soFar.slice(matched.length);
            }
            for (type in Expr.filter) {
              if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
                matched = match.shift();
                tokens.push({
                  value: matched,
                  type: type,
                  matches: match
                });
                soFar = soFar.slice(matched.length);
              }
            }
            if (!matched) {
              break;
            }
          }
          return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : tokenCache(selector, groups).slice(0);
        };
        function toSelector(tokens) {
          var i = 0,
              len = tokens.length,
              selector = "";
          for (; i < len; i++) {
            selector += tokens[i].value;
          }
          return selector;
        }
        function addCombinator(matcher, combinator, base) {
          var dir = combinator.dir,
              checkNonElements = base && dir === "parentNode",
              doneName = done++;
          return combinator.first ? function(elem, context, xml) {
            while ((elem = elem[dir])) {
              if (elem.nodeType === 1 || checkNonElements) {
                return matcher(elem, context, xml);
              }
            }
          } : function(elem, context, xml) {
            var oldCache,
                outerCache,
                newCache = [dirruns, doneName];
            if (xml) {
              while ((elem = elem[dir])) {
                if (elem.nodeType === 1 || checkNonElements) {
                  if (matcher(elem, context, xml)) {
                    return true;
                  }
                }
              }
            } else {
              while ((elem = elem[dir])) {
                if (elem.nodeType === 1 || checkNonElements) {
                  outerCache = elem[expando] || (elem[expando] = {});
                  if ((oldCache = outerCache[dir]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                    return (newCache[2] = oldCache[2]);
                  } else {
                    outerCache[dir] = newCache;
                    if ((newCache[2] = matcher(elem, context, xml))) {
                      return true;
                    }
                  }
                }
              }
            }
          };
        }
        function elementMatcher(matchers) {
          return matchers.length > 1 ? function(elem, context, xml) {
            var i = matchers.length;
            while (i--) {
              if (!matchers[i](elem, context, xml)) {
                return false;
              }
            }
            return true;
          } : matchers[0];
        }
        function multipleContexts(selector, contexts, results) {
          var i = 0,
              len = contexts.length;
          for (; i < len; i++) {
            Sizzle(selector, contexts[i], results);
          }
          return results;
        }
        function condense(unmatched, map, filter, context, xml) {
          var elem,
              newUnmatched = [],
              i = 0,
              len = unmatched.length,
              mapped = map != null;
          for (; i < len; i++) {
            if ((elem = unmatched[i])) {
              if (!filter || filter(elem, context, xml)) {
                newUnmatched.push(elem);
                if (mapped) {
                  map.push(i);
                }
              }
            }
          }
          return newUnmatched;
        }
        function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
          if (postFilter && !postFilter[expando]) {
            postFilter = setMatcher(postFilter);
          }
          if (postFinder && !postFinder[expando]) {
            postFinder = setMatcher(postFinder, postSelector);
          }
          return markFunction(function(seed, results, context, xml) {
            var temp,
                i,
                elem,
                preMap = [],
                postMap = [],
                preexisting = results.length,
                elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),
                matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,
                matcherOut = matcher ? postFinder || (seed ? preFilter : preexisting || postFilter) ? [] : results : matcherIn;
            if (matcher) {
              matcher(matcherIn, matcherOut, context, xml);
            }
            if (postFilter) {
              temp = condense(matcherOut, postMap);
              postFilter(temp, [], context, xml);
              i = temp.length;
              while (i--) {
                if ((elem = temp[i])) {
                  matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
                }
              }
            }
            if (seed) {
              if (postFinder || preFilter) {
                if (postFinder) {
                  temp = [];
                  i = matcherOut.length;
                  while (i--) {
                    if ((elem = matcherOut[i])) {
                      temp.push((matcherIn[i] = elem));
                    }
                  }
                  postFinder(null, (matcherOut = []), temp, xml);
                }
                i = matcherOut.length;
                while (i--) {
                  if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {
                    seed[temp] = !(results[temp] = elem);
                  }
                }
              }
            } else {
              matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
              if (postFinder) {
                postFinder(null, results, matcherOut, xml);
              } else {
                push.apply(results, matcherOut);
              }
            }
          });
        }
        function matcherFromTokens(tokens) {
          var checkContext,
              matcher,
              j,
              len = tokens.length,
              leadingRelative = Expr.relative[tokens[0].type],
              implicitRelative = leadingRelative || Expr.relative[" "],
              i = leadingRelative ? 1 : 0,
              matchContext = addCombinator(function(elem) {
                return elem === checkContext;
              }, implicitRelative, true),
              matchAnyContext = addCombinator(function(elem) {
                return indexOf(checkContext, elem) > -1;
              }, implicitRelative, true),
              matchers = [function(elem, context, xml) {
                var ret = (!leadingRelative && (xml || context !== outermostContext)) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
                checkContext = null;
                return ret;
              }];
          for (; i < len; i++) {
            if ((matcher = Expr.relative[tokens[i].type])) {
              matchers = [addCombinator(elementMatcher(matchers), matcher)];
            } else {
              matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);
              if (matcher[expando]) {
                j = ++i;
                for (; j < len; j++) {
                  if (Expr.relative[tokens[j].type]) {
                    break;
                  }
                }
                return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(tokens.slice(0, i - 1).concat({value: tokens[i - 2].type === " " ? "*" : ""})).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens((tokens = tokens.slice(j))), j < len && toSelector(tokens));
              }
              matchers.push(matcher);
            }
          }
          return elementMatcher(matchers);
        }
        function matcherFromGroupMatchers(elementMatchers, setMatchers) {
          var bySet = setMatchers.length > 0,
              byElement = elementMatchers.length > 0,
              superMatcher = function(seed, context, xml, results, outermost) {
                var elem,
                    j,
                    matcher,
                    matchedCount = 0,
                    i = "0",
                    unmatched = seed && [],
                    setMatched = [],
                    contextBackup = outermostContext,
                    elems = seed || byElement && Expr.find["TAG"]("*", outermost),
                    dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
                    len = elems.length;
                if (outermost) {
                  outermostContext = context !== document && context;
                }
                for (; i !== len && (elem = elems[i]) != null; i++) {
                  if (byElement && elem) {
                    j = 0;
                    while ((matcher = elementMatchers[j++])) {
                      if (matcher(elem, context, xml)) {
                        results.push(elem);
                        break;
                      }
                    }
                    if (outermost) {
                      dirruns = dirrunsUnique;
                    }
                  }
                  if (bySet) {
                    if ((elem = !matcher && elem)) {
                      matchedCount--;
                    }
                    if (seed) {
                      unmatched.push(elem);
                    }
                  }
                }
                matchedCount += i;
                if (bySet && i !== matchedCount) {
                  j = 0;
                  while ((matcher = setMatchers[j++])) {
                    matcher(unmatched, setMatched, context, xml);
                  }
                  if (seed) {
                    if (matchedCount > 0) {
                      while (i--) {
                        if (!(unmatched[i] || setMatched[i])) {
                          setMatched[i] = pop.call(results);
                        }
                      }
                    }
                    setMatched = condense(setMatched);
                  }
                  push.apply(results, setMatched);
                  if (outermost && !seed && setMatched.length > 0 && (matchedCount + setMatchers.length) > 1) {
                    Sizzle.uniqueSort(results);
                  }
                }
                if (outermost) {
                  dirruns = dirrunsUnique;
                  outermostContext = contextBackup;
                }
                return unmatched;
              };
          return bySet ? markFunction(superMatcher) : superMatcher;
        }
        compile = Sizzle.compile = function(selector, match) {
          var i,
              setMatchers = [],
              elementMatchers = [],
              cached = compilerCache[selector + " "];
          if (!cached) {
            if (!match) {
              match = tokenize(selector);
            }
            i = match.length;
            while (i--) {
              cached = matcherFromTokens(match[i]);
              if (cached[expando]) {
                setMatchers.push(cached);
              } else {
                elementMatchers.push(cached);
              }
            }
            cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
            cached.selector = selector;
          }
          return cached;
        };
        select = Sizzle.select = function(selector, context, results, seed) {
          var i,
              tokens,
              token,
              type,
              find,
              compiled = typeof selector === "function" && selector,
              match = !seed && tokenize((selector = compiled.selector || selector));
          results = results || [];
          if (match.length === 1) {
            tokens = match[0] = match[0].slice(0);
            if (tokens.length > 2 && (token = tokens[0]).type === "ID" && support.getById && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
              context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
              if (!context) {
                return results;
              } else if (compiled) {
                context = context.parentNode;
              }
              selector = selector.slice(tokens.shift().value.length);
            }
            i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
            while (i--) {
              token = tokens[i];
              if (Expr.relative[(type = token.type)]) {
                break;
              }
              if ((find = Expr.find[type])) {
                if ((seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context))) {
                  tokens.splice(i, 1);
                  selector = seed.length && toSelector(tokens);
                  if (!selector) {
                    push.apply(results, seed);
                    return results;
                  }
                  break;
                }
              }
            }
          }
          (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, rsibling.test(selector) && testContext(context.parentNode) || context);
          return results;
        };
        support.sortStable = expando.split("").sort(sortOrder).join("") === expando;
        support.detectDuplicates = !!hasDuplicate;
        setDocument();
        support.sortDetached = assert(function(div1) {
          return div1.compareDocumentPosition(document.createElement("div")) & 1;
        });
        if (!assert(function(div) {
          div.innerHTML = "<a href='#'></a>";
          return div.firstChild.getAttribute("href") === "#";
        })) {
          addHandle("type|href|height|width", function(elem, name, isXML) {
            if (!isXML) {
              return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
            }
          });
        }
        if (!support.attributes || !assert(function(div) {
          div.innerHTML = "<input/>";
          div.firstChild.setAttribute("value", "");
          return div.firstChild.getAttribute("value") === "";
        })) {
          addHandle("value", function(elem, name, isXML) {
            if (!isXML && elem.nodeName.toLowerCase() === "input") {
              return elem.defaultValue;
            }
          });
        }
        if (!assert(function(div) {
          return div.getAttribute("disabled") == null;
        })) {
          addHandle(booleans, function(elem, name, isXML) {
            var val;
            if (!isXML) {
              return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
            }
          });
        }
        return Sizzle;
      })(window);
      jQuery.find = Sizzle;
      jQuery.expr = Sizzle.selectors;
      jQuery.expr[":"] = jQuery.expr.pseudos;
      jQuery.unique = Sizzle.uniqueSort;
      jQuery.text = Sizzle.getText;
      jQuery.isXMLDoc = Sizzle.isXML;
      jQuery.contains = Sizzle.contains;
      var rneedsContext = jQuery.expr.match.needsContext;
      var rsingleTag = (/^<(\w+)\s*\/?>(?:<\/\1>|)$/);
      var risSimple = /^.[^:#\[\.,]*$/;
      function winnow(elements, qualifier, not) {
        if (jQuery.isFunction(qualifier)) {
          return jQuery.grep(elements, function(elem, i) {
            return !!qualifier.call(elem, i, elem) !== not;
          });
        }
        if (qualifier.nodeType) {
          return jQuery.grep(elements, function(elem) {
            return (elem === qualifier) !== not;
          });
        }
        if (typeof qualifier === "string") {
          if (risSimple.test(qualifier)) {
            return jQuery.filter(qualifier, elements, not);
          }
          qualifier = jQuery.filter(qualifier, elements);
        }
        return jQuery.grep(elements, function(elem) {
          return (indexOf.call(qualifier, elem) >= 0) !== not;
        });
      }
      jQuery.filter = function(expr, elems, not) {
        var elem = elems[0];
        if (not) {
          expr = ":not(" + expr + ")";
        }
        return elems.length === 1 && elem.nodeType === 1 ? jQuery.find.matchesSelector(elem, expr) ? [elem] : [] : jQuery.find.matches(expr, jQuery.grep(elems, function(elem) {
          return elem.nodeType === 1;
        }));
      };
      jQuery.fn.extend({
        find: function(selector) {
          var i,
              len = this.length,
              ret = [],
              self = this;
          if (typeof selector !== "string") {
            return this.pushStack(jQuery(selector).filter(function() {
              for (i = 0; i < len; i++) {
                if (jQuery.contains(self[i], this)) {
                  return true;
                }
              }
            }));
          }
          for (i = 0; i < len; i++) {
            jQuery.find(selector, self[i], ret);
          }
          ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);
          ret.selector = this.selector ? this.selector + " " + selector : selector;
          return ret;
        },
        filter: function(selector) {
          return this.pushStack(winnow(this, selector || [], false));
        },
        not: function(selector) {
          return this.pushStack(winnow(this, selector || [], true));
        },
        is: function(selector) {
          return !!winnow(this, typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
        }
      });
      var rootjQuery,
          rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
          init = jQuery.fn.init = function(selector, context) {
            var match,
                elem;
            if (!selector) {
              return this;
            }
            if (typeof selector === "string") {
              if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {
                match = [null, selector, null];
              } else {
                match = rquickExpr.exec(selector);
              }
              if (match && (match[1] || !context)) {
                if (match[1]) {
                  context = context instanceof jQuery ? context[0] : context;
                  jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));
                  if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
                    for (match in context) {
                      if (jQuery.isFunction(this[match])) {
                        this[match](context[match]);
                      } else {
                        this.attr(match, context[match]);
                      }
                    }
                  }
                  return this;
                } else {
                  elem = document.getElementById(match[2]);
                  if (elem && elem.parentNode) {
                    this.length = 1;
                    this[0] = elem;
                  }
                  this.context = document;
                  this.selector = selector;
                  return this;
                }
              } else if (!context || context.jquery) {
                return (context || rootjQuery).find(selector);
              } else {
                return this.constructor(context).find(selector);
              }
            } else if (selector.nodeType) {
              this.context = this[0] = selector;
              this.length = 1;
              return this;
            } else if (jQuery.isFunction(selector)) {
              return typeof rootjQuery.ready !== "undefined" ? rootjQuery.ready(selector) : selector(jQuery);
            }
            if (selector.selector !== undefined) {
              this.selector = selector.selector;
              this.context = selector.context;
            }
            return jQuery.makeArray(selector, this);
          };
      init.prototype = jQuery.fn;
      rootjQuery = jQuery(document);
      var rparentsprev = /^(?:parents|prev(?:Until|All))/,
          guaranteedUnique = {
            children: true,
            contents: true,
            next: true,
            prev: true
          };
      jQuery.extend({
        dir: function(elem, dir, until) {
          var matched = [],
              truncate = until !== undefined;
          while ((elem = elem[dir]) && elem.nodeType !== 9) {
            if (elem.nodeType === 1) {
              if (truncate && jQuery(elem).is(until)) {
                break;
              }
              matched.push(elem);
            }
          }
          return matched;
        },
        sibling: function(n, elem) {
          var matched = [];
          for (; n; n = n.nextSibling) {
            if (n.nodeType === 1 && n !== elem) {
              matched.push(n);
            }
          }
          return matched;
        }
      });
      jQuery.fn.extend({
        has: function(target) {
          var targets = jQuery(target, this),
              l = targets.length;
          return this.filter(function() {
            var i = 0;
            for (; i < l; i++) {
              if (jQuery.contains(this, targets[i])) {
                return true;
              }
            }
          });
        },
        closest: function(selectors, context) {
          var cur,
              i = 0,
              l = this.length,
              matched = [],
              pos = rneedsContext.test(selectors) || typeof selectors !== "string" ? jQuery(selectors, context || this.context) : 0;
          for (; i < l; i++) {
            for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
              if (cur.nodeType < 11 && (pos ? pos.index(cur) > -1 : cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
                matched.push(cur);
                break;
              }
            }
          }
          return this.pushStack(matched.length > 1 ? jQuery.unique(matched) : matched);
        },
        index: function(elem) {
          if (!elem) {
            return (this[0] && this[0].parentNode) ? this.first().prevAll().length : -1;
          }
          if (typeof elem === "string") {
            return indexOf.call(jQuery(elem), this[0]);
          }
          return indexOf.call(this, elem.jquery ? elem[0] : elem);
        },
        add: function(selector, context) {
          return this.pushStack(jQuery.unique(jQuery.merge(this.get(), jQuery(selector, context))));
        },
        addBack: function(selector) {
          return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
        }
      });
      function sibling(cur, dir) {
        while ((cur = cur[dir]) && cur.nodeType !== 1) {}
        return cur;
      }
      jQuery.each({
        parent: function(elem) {
          var parent = elem.parentNode;
          return parent && parent.nodeType !== 11 ? parent : null;
        },
        parents: function(elem) {
          return jQuery.dir(elem, "parentNode");
        },
        parentsUntil: function(elem, i, until) {
          return jQuery.dir(elem, "parentNode", until);
        },
        next: function(elem) {
          return sibling(elem, "nextSibling");
        },
        prev: function(elem) {
          return sibling(elem, "previousSibling");
        },
        nextAll: function(elem) {
          return jQuery.dir(elem, "nextSibling");
        },
        prevAll: function(elem) {
          return jQuery.dir(elem, "previousSibling");
        },
        nextUntil: function(elem, i, until) {
          return jQuery.dir(elem, "nextSibling", until);
        },
        prevUntil: function(elem, i, until) {
          return jQuery.dir(elem, "previousSibling", until);
        },
        siblings: function(elem) {
          return jQuery.sibling((elem.parentNode || {}).firstChild, elem);
        },
        children: function(elem) {
          return jQuery.sibling(elem.firstChild);
        },
        contents: function(elem) {
          return elem.contentDocument || jQuery.merge([], elem.childNodes);
        }
      }, function(name, fn) {
        jQuery.fn[name] = function(until, selector) {
          var matched = jQuery.map(this, fn, until);
          if (name.slice(-5) !== "Until") {
            selector = until;
          }
          if (selector && typeof selector === "string") {
            matched = jQuery.filter(selector, matched);
          }
          if (this.length > 1) {
            if (!guaranteedUnique[name]) {
              jQuery.unique(matched);
            }
            if (rparentsprev.test(name)) {
              matched.reverse();
            }
          }
          return this.pushStack(matched);
        };
      });
      var rnotwhite = (/\S+/g);
      var optionsCache = {};
      function createOptions(options) {
        var object = optionsCache[options] = {};
        jQuery.each(options.match(rnotwhite) || [], function(_, flag) {
          object[flag] = true;
        });
        return object;
      }
      jQuery.Callbacks = function(options) {
        options = typeof options === "string" ? (optionsCache[options] || createOptions(options)) : jQuery.extend({}, options);
        var memory,
            fired,
            firing,
            firingStart,
            firingLength,
            firingIndex,
            list = [],
            stack = !options.once && [],
            fire = function(data) {
              memory = options.memory && data;
              fired = true;
              firingIndex = firingStart || 0;
              firingStart = 0;
              firingLength = list.length;
              firing = true;
              for (; list && firingIndex < firingLength; firingIndex++) {
                if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {
                  memory = false;
                  break;
                }
              }
              firing = false;
              if (list) {
                if (stack) {
                  if (stack.length) {
                    fire(stack.shift());
                  }
                } else if (memory) {
                  list = [];
                } else {
                  self.disable();
                }
              }
            },
            self = {
              add: function() {
                if (list) {
                  var start = list.length;
                  (function add(args) {
                    jQuery.each(args, function(_, arg) {
                      var type = jQuery.type(arg);
                      if (type === "function") {
                        if (!options.unique || !self.has(arg)) {
                          list.push(arg);
                        }
                      } else if (arg && arg.length && type !== "string") {
                        add(arg);
                      }
                    });
                  })(arguments);
                  if (firing) {
                    firingLength = list.length;
                  } else if (memory) {
                    firingStart = start;
                    fire(memory);
                  }
                }
                return this;
              },
              remove: function() {
                if (list) {
                  jQuery.each(arguments, function(_, arg) {
                    var index;
                    while ((index = jQuery.inArray(arg, list, index)) > -1) {
                      list.splice(index, 1);
                      if (firing) {
                        if (index <= firingLength) {
                          firingLength--;
                        }
                        if (index <= firingIndex) {
                          firingIndex--;
                        }
                      }
                    }
                  });
                }
                return this;
              },
              has: function(fn) {
                return fn ? jQuery.inArray(fn, list) > -1 : !!(list && list.length);
              },
              empty: function() {
                list = [];
                firingLength = 0;
                return this;
              },
              disable: function() {
                list = stack = memory = undefined;
                return this;
              },
              disabled: function() {
                return !list;
              },
              lock: function() {
                stack = undefined;
                if (!memory) {
                  self.disable();
                }
                return this;
              },
              locked: function() {
                return !stack;
              },
              fireWith: function(context, args) {
                if (list && (!fired || stack)) {
                  args = args || [];
                  args = [context, args.slice ? args.slice() : args];
                  if (firing) {
                    stack.push(args);
                  } else {
                    fire(args);
                  }
                }
                return this;
              },
              fire: function() {
                self.fireWith(this, arguments);
                return this;
              },
              fired: function() {
                return !!fired;
              }
            };
        return self;
      };
      jQuery.extend({
        Deferred: function(func) {
          var tuples = [["resolve", "done", jQuery.Callbacks("once memory"), "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), "rejected"], ["notify", "progress", jQuery.Callbacks("memory")]],
              state = "pending",
              promise = {
                state: function() {
                  return state;
                },
                always: function() {
                  deferred.done(arguments).fail(arguments);
                  return this;
                },
                then: function() {
                  var fns = arguments;
                  return jQuery.Deferred(function(newDefer) {
                    jQuery.each(tuples, function(i, tuple) {
                      var fn = jQuery.isFunction(fns[i]) && fns[i];
                      deferred[tuple[1]](function() {
                        var returned = fn && fn.apply(this, arguments);
                        if (returned && jQuery.isFunction(returned.promise)) {
                          returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);
                        } else {
                          newDefer[tuple[0] + "With"](this === promise ? newDefer.promise() : this, fn ? [returned] : arguments);
                        }
                      });
                    });
                    fns = null;
                  }).promise();
                },
                promise: function(obj) {
                  return obj != null ? jQuery.extend(obj, promise) : promise;
                }
              },
              deferred = {};
          promise.pipe = promise.then;
          jQuery.each(tuples, function(i, tuple) {
            var list = tuple[2],
                stateString = tuple[3];
            promise[tuple[1]] = list.add;
            if (stateString) {
              list.add(function() {
                state = stateString;
              }, tuples[i ^ 1][2].disable, tuples[2][2].lock);
            }
            deferred[tuple[0]] = function() {
              deferred[tuple[0] + "With"](this === deferred ? promise : this, arguments);
              return this;
            };
            deferred[tuple[0] + "With"] = list.fireWith;
          });
          promise.promise(deferred);
          if (func) {
            func.call(deferred, deferred);
          }
          return deferred;
        },
        when: function(subordinate) {
          var i = 0,
              resolveValues = slice.call(arguments),
              length = resolveValues.length,
              remaining = length !== 1 || (subordinate && jQuery.isFunction(subordinate.promise)) ? length : 0,
              deferred = remaining === 1 ? subordinate : jQuery.Deferred(),
              updateFunc = function(i, contexts, values) {
                return function(value) {
                  contexts[i] = this;
                  values[i] = arguments.length > 1 ? slice.call(arguments) : value;
                  if (values === progressValues) {
                    deferred.notifyWith(contexts, values);
                  } else if (!(--remaining)) {
                    deferred.resolveWith(contexts, values);
                  }
                };
              },
              progressValues,
              progressContexts,
              resolveContexts;
          if (length > 1) {
            progressValues = new Array(length);
            progressContexts = new Array(length);
            resolveContexts = new Array(length);
            for (; i < length; i++) {
              if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
                resolveValues[i].promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFunc(i, progressContexts, progressValues));
              } else {
                --remaining;
              }
            }
          }
          if (!remaining) {
            deferred.resolveWith(resolveContexts, resolveValues);
          }
          return deferred.promise();
        }
      });
      var readyList;
      jQuery.fn.ready = function(fn) {
        jQuery.ready.promise().done(fn);
        return this;
      };
      jQuery.extend({
        isReady: false,
        readyWait: 1,
        holdReady: function(hold) {
          if (hold) {
            jQuery.readyWait++;
          } else {
            jQuery.ready(true);
          }
        },
        ready: function(wait) {
          if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
            return ;
          }
          jQuery.isReady = true;
          if (wait !== true && --jQuery.readyWait > 0) {
            return ;
          }
          readyList.resolveWith(document, [jQuery]);
          if (jQuery.fn.triggerHandler) {
            jQuery(document).triggerHandler("ready");
            jQuery(document).off("ready");
          }
        }
      });
      function completed() {
        document.removeEventListener("DOMContentLoaded", completed, false);
        window.removeEventListener("load", completed, false);
        jQuery.ready();
      }
      jQuery.ready.promise = function(obj) {
        if (!readyList) {
          readyList = jQuery.Deferred();
          if (document.readyState === "complete") {
            setTimeout(jQuery.ready);
          } else {
            document.addEventListener("DOMContentLoaded", completed, false);
            window.addEventListener("load", completed, false);
          }
        }
        return readyList.promise(obj);
      };
      jQuery.ready.promise();
      var access = jQuery.access = function(elems, fn, key, value, chainable, emptyGet, raw) {
        var i = 0,
            len = elems.length,
            bulk = key == null;
        if (jQuery.type(key) === "object") {
          chainable = true;
          for (i in key) {
            jQuery.access(elems, fn, i, key[i], true, emptyGet, raw);
          }
        } else if (value !== undefined) {
          chainable = true;
          if (!jQuery.isFunction(value)) {
            raw = true;
          }
          if (bulk) {
            if (raw) {
              fn.call(elems, value);
              fn = null;
            } else {
              bulk = fn;
              fn = function(elem, key, value) {
                return bulk.call(jQuery(elem), value);
              };
            }
          }
          if (fn) {
            for (; i < len; i++) {
              fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
            }
          }
        }
        return chainable ? elems : bulk ? fn.call(elems) : len ? fn(elems[0], key) : emptyGet;
      };
      jQuery.acceptData = function(owner) {
        return owner.nodeType === 1 || owner.nodeType === 9 || !(+owner.nodeType);
      };
      function Data() {
        Object.defineProperty(this.cache = {}, 0, {get: function() {
            return {};
          }});
        this.expando = jQuery.expando + Data.uid++;
      }
      Data.uid = 1;
      Data.accepts = jQuery.acceptData;
      Data.prototype = {
        key: function(owner) {
          if (!Data.accepts(owner)) {
            return 0;
          }
          var descriptor = {},
              unlock = owner[this.expando];
          if (!unlock) {
            unlock = Data.uid++;
            try {
              descriptor[this.expando] = {value: unlock};
              Object.defineProperties(owner, descriptor);
            } catch (e) {
              descriptor[this.expando] = unlock;
              jQuery.extend(owner, descriptor);
            }
          }
          if (!this.cache[unlock]) {
            this.cache[unlock] = {};
          }
          return unlock;
        },
        set: function(owner, data, value) {
          var prop,
              unlock = this.key(owner),
              cache = this.cache[unlock];
          if (typeof data === "string") {
            cache[data] = value;
          } else {
            if (jQuery.isEmptyObject(cache)) {
              jQuery.extend(this.cache[unlock], data);
            } else {
              for (prop in data) {
                cache[prop] = data[prop];
              }
            }
          }
          return cache;
        },
        get: function(owner, key) {
          var cache = this.cache[this.key(owner)];
          return key === undefined ? cache : cache[key];
        },
        access: function(owner, key, value) {
          var stored;
          if (key === undefined || ((key && typeof key === "string") && value === undefined)) {
            stored = this.get(owner, key);
            return stored !== undefined ? stored : this.get(owner, jQuery.camelCase(key));
          }
          this.set(owner, key, value);
          return value !== undefined ? value : key;
        },
        remove: function(owner, key) {
          var i,
              name,
              camel,
              unlock = this.key(owner),
              cache = this.cache[unlock];
          if (key === undefined) {
            this.cache[unlock] = {};
          } else {
            if (jQuery.isArray(key)) {
              name = key.concat(key.map(jQuery.camelCase));
            } else {
              camel = jQuery.camelCase(key);
              if (key in cache) {
                name = [key, camel];
              } else {
                name = camel;
                name = name in cache ? [name] : (name.match(rnotwhite) || []);
              }
            }
            i = name.length;
            while (i--) {
              delete cache[name[i]];
            }
          }
        },
        hasData: function(owner) {
          return !jQuery.isEmptyObject(this.cache[owner[this.expando]] || {});
        },
        discard: function(owner) {
          if (owner[this.expando]) {
            delete this.cache[owner[this.expando]];
          }
        }
      };
      var data_priv = new Data();
      var data_user = new Data();
      var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
          rmultiDash = /([A-Z])/g;
      function dataAttr(elem, key, data) {
        var name;
        if (data === undefined && elem.nodeType === 1) {
          name = "data-" + key.replace(rmultiDash, "-$1").toLowerCase();
          data = elem.getAttribute(name);
          if (typeof data === "string") {
            try {
              data = data === "true" ? true : data === "false" ? false : data === "null" ? null : +data + "" === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data;
            } catch (e) {}
            data_user.set(elem, key, data);
          } else {
            data = undefined;
          }
        }
        return data;
      }
      jQuery.extend({
        hasData: function(elem) {
          return data_user.hasData(elem) || data_priv.hasData(elem);
        },
        data: function(elem, name, data) {
          return data_user.access(elem, name, data);
        },
        removeData: function(elem, name) {
          data_user.remove(elem, name);
        },
        _data: function(elem, name, data) {
          return data_priv.access(elem, name, data);
        },
        _removeData: function(elem, name) {
          data_priv.remove(elem, name);
        }
      });
      jQuery.fn.extend({
        data: function(key, value) {
          var i,
              name,
              data,
              elem = this[0],
              attrs = elem && elem.attributes;
          if (key === undefined) {
            if (this.length) {
              data = data_user.get(elem);
              if (elem.nodeType === 1 && !data_priv.get(elem, "hasDataAttrs")) {
                i = attrs.length;
                while (i--) {
                  if (attrs[i]) {
                    name = attrs[i].name;
                    if (name.indexOf("data-") === 0) {
                      name = jQuery.camelCase(name.slice(5));
                      dataAttr(elem, name, data[name]);
                    }
                  }
                }
                data_priv.set(elem, "hasDataAttrs", true);
              }
            }
            return data;
          }
          if (typeof key === "object") {
            return this.each(function() {
              data_user.set(this, key);
            });
          }
          return access(this, function(value) {
            var data,
                camelKey = jQuery.camelCase(key);
            if (elem && value === undefined) {
              data = data_user.get(elem, key);
              if (data !== undefined) {
                return data;
              }
              data = data_user.get(elem, camelKey);
              if (data !== undefined) {
                return data;
              }
              data = dataAttr(elem, camelKey, undefined);
              if (data !== undefined) {
                return data;
              }
              return ;
            }
            this.each(function() {
              var data = data_user.get(this, camelKey);
              data_user.set(this, camelKey, value);
              if (key.indexOf("-") !== -1 && data !== undefined) {
                data_user.set(this, key, value);
              }
            });
          }, null, value, arguments.length > 1, null, true);
        },
        removeData: function(key) {
          return this.each(function() {
            data_user.remove(this, key);
          });
        }
      });
      jQuery.extend({
        queue: function(elem, type, data) {
          var queue;
          if (elem) {
            type = (type || "fx") + "queue";
            queue = data_priv.get(elem, type);
            if (data) {
              if (!queue || jQuery.isArray(data)) {
                queue = data_priv.access(elem, type, jQuery.makeArray(data));
              } else {
                queue.push(data);
              }
            }
            return queue || [];
          }
        },
        dequeue: function(elem, type) {
          type = type || "fx";
          var queue = jQuery.queue(elem, type),
              startLength = queue.length,
              fn = queue.shift(),
              hooks = jQuery._queueHooks(elem, type),
              next = function() {
                jQuery.dequeue(elem, type);
              };
          if (fn === "inprogress") {
            fn = queue.shift();
            startLength--;
          }
          if (fn) {
            if (type === "fx") {
              queue.unshift("inprogress");
            }
            delete hooks.stop;
            fn.call(elem, next, hooks);
          }
          if (!startLength && hooks) {
            hooks.empty.fire();
          }
        },
        _queueHooks: function(elem, type) {
          var key = type + "queueHooks";
          return data_priv.get(elem, key) || data_priv.access(elem, key, {empty: jQuery.Callbacks("once memory").add(function() {
              data_priv.remove(elem, [type + "queue", key]);
            })});
        }
      });
      jQuery.fn.extend({
        queue: function(type, data) {
          var setter = 2;
          if (typeof type !== "string") {
            data = type;
            type = "fx";
            setter--;
          }
          if (arguments.length < setter) {
            return jQuery.queue(this[0], type);
          }
          return data === undefined ? this : this.each(function() {
            var queue = jQuery.queue(this, type, data);
            jQuery._queueHooks(this, type);
            if (type === "fx" && queue[0] !== "inprogress") {
              jQuery.dequeue(this, type);
            }
          });
        },
        dequeue: function(type) {
          return this.each(function() {
            jQuery.dequeue(this, type);
          });
        },
        clearQueue: function(type) {
          return this.queue(type || "fx", []);
        },
        promise: function(type, obj) {
          var tmp,
              count = 1,
              defer = jQuery.Deferred(),
              elements = this,
              i = this.length,
              resolve = function() {
                if (!(--count)) {
                  defer.resolveWith(elements, [elements]);
                }
              };
          if (typeof type !== "string") {
            obj = type;
            type = undefined;
          }
          type = type || "fx";
          while (i--) {
            tmp = data_priv.get(elements[i], type + "queueHooks");
            if (tmp && tmp.empty) {
              count++;
              tmp.empty.add(resolve);
            }
          }
          resolve();
          return defer.promise(obj);
        }
      });
      var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;
      var cssExpand = ["Top", "Right", "Bottom", "Left"];
      var isHidden = function(elem, el) {
        elem = el || elem;
        return jQuery.css(elem, "display") === "none" || !jQuery.contains(elem.ownerDocument, elem);
      };
      var rcheckableType = (/^(?:checkbox|radio)$/i);
      (function() {
        var fragment = document.createDocumentFragment(),
            div = fragment.appendChild(document.createElement("div")),
            input = document.createElement("input");
        input.setAttribute("type", "radio");
        input.setAttribute("checked", "checked");
        input.setAttribute("name", "t");
        div.appendChild(input);
        support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;
        div.innerHTML = "<textarea>x</textarea>";
        support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
      })();
      var strundefined = typeof undefined;
      support.focusinBubbles = "onfocusin" in window;
      var rkeyEvent = /^key/,
          rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,
          rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
          rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;
      function returnTrue() {
        return true;
      }
      function returnFalse() {
        return false;
      }
      function safeActiveElement() {
        try {
          return document.activeElement;
        } catch (err) {}
      }
      jQuery.event = {
        global: {},
        add: function(elem, types, handler, data, selector) {
          var handleObjIn,
              eventHandle,
              tmp,
              events,
              t,
              handleObj,
              special,
              handlers,
              type,
              namespaces,
              origType,
              elemData = data_priv.get(elem);
          if (!elemData) {
            return ;
          }
          if (handler.handler) {
            handleObjIn = handler;
            handler = handleObjIn.handler;
            selector = handleObjIn.selector;
          }
          if (!handler.guid) {
            handler.guid = jQuery.guid++;
          }
          if (!(events = elemData.events)) {
            events = elemData.events = {};
          }
          if (!(eventHandle = elemData.handle)) {
            eventHandle = elemData.handle = function(e) {
              return typeof jQuery !== strundefined && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;
            };
          }
          types = (types || "").match(rnotwhite) || [""];
          t = types.length;
          while (t--) {
            tmp = rtypenamespace.exec(types[t]) || [];
            type = origType = tmp[1];
            namespaces = (tmp[2] || "").split(".").sort();
            if (!type) {
              continue;
            }
            special = jQuery.event.special[type] || {};
            type = (selector ? special.delegateType : special.bindType) || type;
            special = jQuery.event.special[type] || {};
            handleObj = jQuery.extend({
              type: type,
              origType: origType,
              data: data,
              handler: handler,
              guid: handler.guid,
              selector: selector,
              needsContext: selector && jQuery.expr.match.needsContext.test(selector),
              namespace: namespaces.join(".")
            }, handleObjIn);
            if (!(handlers = events[type])) {
              handlers = events[type] = [];
              handlers.delegateCount = 0;
              if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                if (elem.addEventListener) {
                  elem.addEventListener(type, eventHandle, false);
                }
              }
            }
            if (special.add) {
              special.add.call(elem, handleObj);
              if (!handleObj.handler.guid) {
                handleObj.handler.guid = handler.guid;
              }
            }
            if (selector) {
              handlers.splice(handlers.delegateCount++, 0, handleObj);
            } else {
              handlers.push(handleObj);
            }
            jQuery.event.global[type] = true;
          }
        },
        remove: function(elem, types, handler, selector, mappedTypes) {
          var j,
              origCount,
              tmp,
              events,
              t,
              handleObj,
              special,
              handlers,
              type,
              namespaces,
              origType,
              elemData = data_priv.hasData(elem) && data_priv.get(elem);
          if (!elemData || !(events = elemData.events)) {
            return ;
          }
          types = (types || "").match(rnotwhite) || [""];
          t = types.length;
          while (t--) {
            tmp = rtypenamespace.exec(types[t]) || [];
            type = origType = tmp[1];
            namespaces = (tmp[2] || "").split(".").sort();
            if (!type) {
              for (type in events) {
                jQuery.event.remove(elem, type + types[t], handler, selector, true);
              }
              continue;
            }
            special = jQuery.event.special[type] || {};
            type = (selector ? special.delegateType : special.bindType) || type;
            handlers = events[type] || [];
            tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");
            origCount = j = handlers.length;
            while (j--) {
              handleObj = handlers[j];
              if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
                handlers.splice(j, 1);
                if (handleObj.selector) {
                  handlers.delegateCount--;
                }
                if (special.remove) {
                  special.remove.call(elem, handleObj);
                }
              }
            }
            if (origCount && !handlers.length) {
              if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
                jQuery.removeEvent(elem, type, elemData.handle);
              }
              delete events[type];
            }
          }
          if (jQuery.isEmptyObject(events)) {
            delete elemData.handle;
            data_priv.remove(elem, "events");
          }
        },
        trigger: function(event, data, elem, onlyHandlers) {
          var i,
              cur,
              tmp,
              bubbleType,
              ontype,
              handle,
              special,
              eventPath = [elem || document],
              type = hasOwn.call(event, "type") ? event.type : event,
              namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
          cur = tmp = elem = elem || document;
          if (elem.nodeType === 3 || elem.nodeType === 8) {
            return ;
          }
          if (rfocusMorph.test(type + jQuery.event.triggered)) {
            return ;
          }
          if (type.indexOf(".") >= 0) {
            namespaces = type.split(".");
            type = namespaces.shift();
            namespaces.sort();
          }
          ontype = type.indexOf(":") < 0 && "on" + type;
          event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === "object" && event);
          event.isTrigger = onlyHandlers ? 2 : 3;
          event.namespace = namespaces.join(".");
          event.namespace_re = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
          event.result = undefined;
          if (!event.target) {
            event.target = elem;
          }
          data = data == null ? [event] : jQuery.makeArray(data, [event]);
          special = jQuery.event.special[type] || {};
          if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
            return ;
          }
          if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {
            bubbleType = special.delegateType || type;
            if (!rfocusMorph.test(bubbleType + type)) {
              cur = cur.parentNode;
            }
            for (; cur; cur = cur.parentNode) {
              eventPath.push(cur);
              tmp = cur;
            }
            if (tmp === (elem.ownerDocument || document)) {
              eventPath.push(tmp.defaultView || tmp.parentWindow || window);
            }
          }
          i = 0;
          while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
            event.type = i > 1 ? bubbleType : special.bindType || type;
            handle = (data_priv.get(cur, "events") || {})[event.type] && data_priv.get(cur, "handle");
            if (handle) {
              handle.apply(cur, data);
            }
            handle = ontype && cur[ontype];
            if (handle && handle.apply && jQuery.acceptData(cur)) {
              event.result = handle.apply(cur, data);
              if (event.result === false) {
                event.preventDefault();
              }
            }
          }
          event.type = type;
          if (!onlyHandlers && !event.isDefaultPrevented()) {
            if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && jQuery.acceptData(elem)) {
              if (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {
                tmp = elem[ontype];
                if (tmp) {
                  elem[ontype] = null;
                }
                jQuery.event.triggered = type;
                elem[type]();
                jQuery.event.triggered = undefined;
                if (tmp) {
                  elem[ontype] = tmp;
                }
              }
            }
          }
          return event.result;
        },
        dispatch: function(event) {
          event = jQuery.event.fix(event);
          var i,
              j,
              ret,
              matched,
              handleObj,
              handlerQueue = [],
              args = slice.call(arguments),
              handlers = (data_priv.get(this, "events") || {})[event.type] || [],
              special = jQuery.event.special[event.type] || {};
          args[0] = event;
          event.delegateTarget = this;
          if (special.preDispatch && special.preDispatch.call(this, event) === false) {
            return ;
          }
          handlerQueue = jQuery.event.handlers.call(this, event, handlers);
          i = 0;
          while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
            event.currentTarget = matched.elem;
            j = 0;
            while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
              if (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {
                event.handleObj = handleObj;
                event.data = handleObj.data;
                ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
                if (ret !== undefined) {
                  if ((event.result = ret) === false) {
                    event.preventDefault();
                    event.stopPropagation();
                  }
                }
              }
            }
          }
          if (special.postDispatch) {
            special.postDispatch.call(this, event);
          }
          return event.result;
        },
        handlers: function(event, handlers) {
          var i,
              matches,
              sel,
              handleObj,
              handlerQueue = [],
              delegateCount = handlers.delegateCount,
              cur = event.target;
          if (delegateCount && cur.nodeType && (!event.button || event.type !== "click")) {
            for (; cur !== this; cur = cur.parentNode || this) {
              if (cur.disabled !== true || event.type !== "click") {
                matches = [];
                for (i = 0; i < delegateCount; i++) {
                  handleObj = handlers[i];
                  sel = handleObj.selector + " ";
                  if (matches[sel] === undefined) {
                    matches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) >= 0 : jQuery.find(sel, this, null, [cur]).length;
                  }
                  if (matches[sel]) {
                    matches.push(handleObj);
                  }
                }
                if (matches.length) {
                  handlerQueue.push({
                    elem: cur,
                    handlers: matches
                  });
                }
              }
            }
          }
          if (delegateCount < handlers.length) {
            handlerQueue.push({
              elem: this,
              handlers: handlers.slice(delegateCount)
            });
          }
          return handlerQueue;
        },
        props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
        fixHooks: {},
        keyHooks: {
          props: "char charCode key keyCode".split(" "),
          filter: function(event, original) {
            if (event.which == null) {
              event.which = original.charCode != null ? original.charCode : original.keyCode;
            }
            return event;
          }
        },
        mouseHooks: {
          props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
          filter: function(event, original) {
            var eventDoc,
                doc,
                body,
                button = original.button;
            if (event.pageX == null && original.clientX != null) {
              eventDoc = event.target.ownerDocument || document;
              doc = eventDoc.documentElement;
              body = eventDoc.body;
              event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
              event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
            }
            if (!event.which && button !== undefined) {
              event.which = (button & 1 ? 1 : (button & 2 ? 3 : (button & 4 ? 2 : 0)));
            }
            return event;
          }
        },
        fix: function(event) {
          if (event[jQuery.expando]) {
            return event;
          }
          var i,
              prop,
              copy,
              type = event.type,
              originalEvent = event,
              fixHook = this.fixHooks[type];
          if (!fixHook) {
            this.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {};
          }
          copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;
          event = new jQuery.Event(originalEvent);
          i = copy.length;
          while (i--) {
            prop = copy[i];
            event[prop] = originalEvent[prop];
          }
          if (!event.target) {
            event.target = document;
          }
          if (event.target.nodeType === 3) {
            event.target = event.target.parentNode;
          }
          return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
        },
        special: {
          load: {noBubble: true},
          focus: {
            trigger: function() {
              if (this !== safeActiveElement() && this.focus) {
                this.focus();
                return false;
              }
            },
            delegateType: "focusin"
          },
          blur: {
            trigger: function() {
              if (this === safeActiveElement() && this.blur) {
                this.blur();
                return false;
              }
            },
            delegateType: "focusout"
          },
          click: {
            trigger: function() {
              if (this.type === "checkbox" && this.click && jQuery.nodeName(this, "input")) {
                this.click();
                return false;
              }
            },
            _default: function(event) {
              return jQuery.nodeName(event.target, "a");
            }
          },
          beforeunload: {postDispatch: function(event) {
              if (event.result !== undefined && event.originalEvent) {
                event.originalEvent.returnValue = event.result;
              }
            }}
        },
        simulate: function(type, elem, event, bubble) {
          var e = jQuery.extend(new jQuery.Event(), event, {
            type: type,
            isSimulated: true,
            originalEvent: {}
          });
          if (bubble) {
            jQuery.event.trigger(e, null, elem);
          } else {
            jQuery.event.dispatch.call(elem, e);
          }
          if (e.isDefaultPrevented()) {
            event.preventDefault();
          }
        }
      };
      jQuery.removeEvent = function(elem, type, handle) {
        if (elem.removeEventListener) {
          elem.removeEventListener(type, handle, false);
        }
      };
      jQuery.Event = function(src, props) {
        if (!(this instanceof jQuery.Event)) {
          return new jQuery.Event(src, props);
        }
        if (src && src.type) {
          this.originalEvent = src;
          this.type = src.type;
          this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && src.returnValue === false ? returnTrue : returnFalse;
        } else {
          this.type = src;
        }
        if (props) {
          jQuery.extend(this, props);
        }
        this.timeStamp = src && src.timeStamp || jQuery.now();
        this[jQuery.expando] = true;
      };
      jQuery.Event.prototype = {
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse,
        preventDefault: function() {
          var e = this.originalEvent;
          this.isDefaultPrevented = returnTrue;
          if (e && e.preventDefault) {
            e.preventDefault();
          }
        },
        stopPropagation: function() {
          var e = this.originalEvent;
          this.isPropagationStopped = returnTrue;
          if (e && e.stopPropagation) {
            e.stopPropagation();
          }
        },
        stopImmediatePropagation: function() {
          var e = this.originalEvent;
          this.isImmediatePropagationStopped = returnTrue;
          if (e && e.stopImmediatePropagation) {
            e.stopImmediatePropagation();
          }
          this.stopPropagation();
        }
      };
      jQuery.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout",
        pointerenter: "pointerover",
        pointerleave: "pointerout"
      }, function(orig, fix) {
        jQuery.event.special[orig] = {
          delegateType: fix,
          bindType: fix,
          handle: function(event) {
            var ret,
                target = this,
                related = event.relatedTarget,
                handleObj = event.handleObj;
            if (!related || (related !== target && !jQuery.contains(target, related))) {
              event.type = handleObj.origType;
              ret = handleObj.handler.apply(this, arguments);
              event.type = fix;
            }
            return ret;
          }
        };
      });
      if (!support.focusinBubbles) {
        jQuery.each({
          focus: "focusin",
          blur: "focusout"
        }, function(orig, fix) {
          var handler = function(event) {
            jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true);
          };
          jQuery.event.special[fix] = {
            setup: function() {
              var doc = this.ownerDocument || this,
                  attaches = data_priv.access(doc, fix);
              if (!attaches) {
                doc.addEventListener(orig, handler, true);
              }
              data_priv.access(doc, fix, (attaches || 0) + 1);
            },
            teardown: function() {
              var doc = this.ownerDocument || this,
                  attaches = data_priv.access(doc, fix) - 1;
              if (!attaches) {
                doc.removeEventListener(orig, handler, true);
                data_priv.remove(doc, fix);
              } else {
                data_priv.access(doc, fix, attaches);
              }
            }
          };
        });
      }
      jQuery.fn.extend({
        on: function(types, selector, data, fn, one) {
          var origFn,
              type;
          if (typeof types === "object") {
            if (typeof selector !== "string") {
              data = data || selector;
              selector = undefined;
            }
            for (type in types) {
              this.on(type, selector, data, types[type], one);
            }
            return this;
          }
          if (data == null && fn == null) {
            fn = selector;
            data = selector = undefined;
          } else if (fn == null) {
            if (typeof selector === "string") {
              fn = data;
              data = undefined;
            } else {
              fn = data;
              data = selector;
              selector = undefined;
            }
          }
          if (fn === false) {
            fn = returnFalse;
          } else if (!fn) {
            return this;
          }
          if (one === 1) {
            origFn = fn;
            fn = function(event) {
              jQuery().off(event);
              return origFn.apply(this, arguments);
            };
            fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
          }
          return this.each(function() {
            jQuery.event.add(this, types, fn, data, selector);
          });
        },
        one: function(types, selector, data, fn) {
          return this.on(types, selector, data, fn, 1);
        },
        off: function(types, selector, fn) {
          var handleObj,
              type;
          if (types && types.preventDefault && types.handleObj) {
            handleObj = types.handleObj;
            jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
            return this;
          }
          if (typeof types === "object") {
            for (type in types) {
              this.off(type, selector, types[type]);
            }
            return this;
          }
          if (selector === false || typeof selector === "function") {
            fn = selector;
            selector = undefined;
          }
          if (fn === false) {
            fn = returnFalse;
          }
          return this.each(function() {
            jQuery.event.remove(this, types, fn, selector);
          });
        },
        trigger: function(type, data) {
          return this.each(function() {
            jQuery.event.trigger(type, data, this);
          });
        },
        triggerHandler: function(type, data) {
          var elem = this[0];
          if (elem) {
            return jQuery.event.trigger(type, data, elem, true);
          }
        }
      });
      var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
          rtagName = /<([\w:]+)/,
          rhtml = /<|&#?\w+;/,
          rnoInnerhtml = /<(?:script|style|link)/i,
          rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
          rscriptType = /^$|\/(?:java|ecma)script/i,
          rscriptTypeMasked = /^true\/(.*)/,
          rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
          wrapMap = {
            option: [1, "<select multiple='multiple'>", "</select>"],
            thead: [1, "<table>", "</table>"],
            col: [2, "<table><colgroup>", "</colgroup></table>"],
            tr: [2, "<table><tbody>", "</tbody></table>"],
            td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
            _default: [0, "", ""]
          };
      wrapMap.optgroup = wrapMap.option;
      wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
      wrapMap.th = wrapMap.td;
      function manipulationTarget(elem, content) {
        return jQuery.nodeName(elem, "table") && jQuery.nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr") ? elem.getElementsByTagName("tbody")[0] || elem.appendChild(elem.ownerDocument.createElement("tbody")) : elem;
      }
      function disableScript(elem) {
        elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
        return elem;
      }
      function restoreScript(elem) {
        var match = rscriptTypeMasked.exec(elem.type);
        if (match) {
          elem.type = match[1];
        } else {
          elem.removeAttribute("type");
        }
        return elem;
      }
      function setGlobalEval(elems, refElements) {
        var i = 0,
            l = elems.length;
        for (; i < l; i++) {
          data_priv.set(elems[i], "globalEval", !refElements || data_priv.get(refElements[i], "globalEval"));
        }
      }
      function cloneCopyEvent(src, dest) {
        var i,
            l,
            type,
            pdataOld,
            pdataCur,
            udataOld,
            udataCur,
            events;
        if (dest.nodeType !== 1) {
          return ;
        }
        if (data_priv.hasData(src)) {
          pdataOld = data_priv.access(src);
          pdataCur = data_priv.set(dest, pdataOld);
          events = pdataOld.events;
          if (events) {
            delete pdataCur.handle;
            pdataCur.events = {};
            for (type in events) {
              for (i = 0, l = events[type].length; i < l; i++) {
                jQuery.event.add(dest, type, events[type][i]);
              }
            }
          }
        }
        if (data_user.hasData(src)) {
          udataOld = data_user.access(src);
          udataCur = jQuery.extend({}, udataOld);
          data_user.set(dest, udataCur);
        }
      }
      function getAll(context, tag) {
        var ret = context.getElementsByTagName ? context.getElementsByTagName(tag || "*") : context.querySelectorAll ? context.querySelectorAll(tag || "*") : [];
        return tag === undefined || tag && jQuery.nodeName(context, tag) ? jQuery.merge([context], ret) : ret;
      }
      function fixInput(src, dest) {
        var nodeName = dest.nodeName.toLowerCase();
        if (nodeName === "input" && rcheckableType.test(src.type)) {
          dest.checked = src.checked;
        } else if (nodeName === "input" || nodeName === "textarea") {
          dest.defaultValue = src.defaultValue;
        }
      }
      jQuery.extend({
        clone: function(elem, dataAndEvents, deepDataAndEvents) {
          var i,
              l,
              srcElements,
              destElements,
              clone = elem.cloneNode(true),
              inPage = jQuery.contains(elem.ownerDocument, elem);
          if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
            destElements = getAll(clone);
            srcElements = getAll(elem);
            for (i = 0, l = srcElements.length; i < l; i++) {
              fixInput(srcElements[i], destElements[i]);
            }
          }
          if (dataAndEvents) {
            if (deepDataAndEvents) {
              srcElements = srcElements || getAll(elem);
              destElements = destElements || getAll(clone);
              for (i = 0, l = srcElements.length; i < l; i++) {
                cloneCopyEvent(srcElements[i], destElements[i]);
              }
            } else {
              cloneCopyEvent(elem, clone);
            }
          }
          destElements = getAll(clone, "script");
          if (destElements.length > 0) {
            setGlobalEval(destElements, !inPage && getAll(elem, "script"));
          }
          return clone;
        },
        buildFragment: function(elems, context, scripts, selection) {
          var elem,
              tmp,
              tag,
              wrap,
              contains,
              j,
              fragment = context.createDocumentFragment(),
              nodes = [],
              i = 0,
              l = elems.length;
          for (; i < l; i++) {
            elem = elems[i];
            if (elem || elem === 0) {
              if (jQuery.type(elem) === "object") {
                jQuery.merge(nodes, elem.nodeType ? [elem] : elem);
              } else if (!rhtml.test(elem)) {
                nodes.push(context.createTextNode(elem));
              } else {
                tmp = tmp || fragment.appendChild(context.createElement("div"));
                tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
                wrap = wrapMap[tag] || wrapMap._default;
                tmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag, "<$1></$2>") + wrap[2];
                j = wrap[0];
                while (j--) {
                  tmp = tmp.lastChild;
                }
                jQuery.merge(nodes, tmp.childNodes);
                tmp = fragment.firstChild;
                tmp.textContent = "";
              }
            }
          }
          fragment.textContent = "";
          i = 0;
          while ((elem = nodes[i++])) {
            if (selection && jQuery.inArray(elem, selection) !== -1) {
              continue;
            }
            contains = jQuery.contains(elem.ownerDocument, elem);
            tmp = getAll(fragment.appendChild(elem), "script");
            if (contains) {
              setGlobalEval(tmp);
            }
            if (scripts) {
              j = 0;
              while ((elem = tmp[j++])) {
                if (rscriptType.test(elem.type || "")) {
                  scripts.push(elem);
                }
              }
            }
          }
          return fragment;
        },
        cleanData: function(elems) {
          var data,
              elem,
              type,
              key,
              special = jQuery.event.special,
              i = 0;
          for (; (elem = elems[i]) !== undefined; i++) {
            if (jQuery.acceptData(elem)) {
              key = elem[data_priv.expando];
              if (key && (data = data_priv.cache[key])) {
                if (data.events) {
                  for (type in data.events) {
                    if (special[type]) {
                      jQuery.event.remove(elem, type);
                    } else {
                      jQuery.removeEvent(elem, type, data.handle);
                    }
                  }
                }
                if (data_priv.cache[key]) {
                  delete data_priv.cache[key];
                }
              }
            }
            delete data_user.cache[elem[data_user.expando]];
          }
        }
      });
      jQuery.fn.extend({
        text: function(value) {
          return access(this, function(value) {
            return value === undefined ? jQuery.text(this) : this.empty().each(function() {
              if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                this.textContent = value;
              }
            });
          }, null, value, arguments.length);
        },
        append: function() {
          return this.domManip(arguments, function(elem) {
            if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
              var target = manipulationTarget(this, elem);
              target.appendChild(elem);
            }
          });
        },
        prepend: function() {
          return this.domManip(arguments, function(elem) {
            if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
              var target = manipulationTarget(this, elem);
              target.insertBefore(elem, target.firstChild);
            }
          });
        },
        before: function() {
          return this.domManip(arguments, function(elem) {
            if (this.parentNode) {
              this.parentNode.insertBefore(elem, this);
            }
          });
        },
        after: function() {
          return this.domManip(arguments, function(elem) {
            if (this.parentNode) {
              this.parentNode.insertBefore(elem, this.nextSibling);
            }
          });
        },
        remove: function(selector, keepData) {
          var elem,
              elems = selector ? jQuery.filter(selector, this) : this,
              i = 0;
          for (; (elem = elems[i]) != null; i++) {
            if (!keepData && elem.nodeType === 1) {
              jQuery.cleanData(getAll(elem));
            }
            if (elem.parentNode) {
              if (keepData && jQuery.contains(elem.ownerDocument, elem)) {
                setGlobalEval(getAll(elem, "script"));
              }
              elem.parentNode.removeChild(elem);
            }
          }
          return this;
        },
        empty: function() {
          var elem,
              i = 0;
          for (; (elem = this[i]) != null; i++) {
            if (elem.nodeType === 1) {
              jQuery.cleanData(getAll(elem, false));
              elem.textContent = "";
            }
          }
          return this;
        },
        clone: function(dataAndEvents, deepDataAndEvents) {
          dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
          deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
          return this.map(function() {
            return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
          });
        },
        html: function(value) {
          return access(this, function(value) {
            var elem = this[0] || {},
                i = 0,
                l = this.length;
            if (value === undefined && elem.nodeType === 1) {
              return elem.innerHTML;
            }
            if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {
              value = value.replace(rxhtmlTag, "<$1></$2>");
              try {
                for (; i < l; i++) {
                  elem = this[i] || {};
                  if (elem.nodeType === 1) {
                    jQuery.cleanData(getAll(elem, false));
                    elem.innerHTML = value;
                  }
                }
                elem = 0;
              } catch (e) {}
            }
            if (elem) {
              this.empty().append(value);
            }
          }, null, value, arguments.length);
        },
        replaceWith: function() {
          var arg = arguments[0];
          this.domManip(arguments, function(elem) {
            arg = this.parentNode;
            jQuery.cleanData(getAll(this));
            if (arg) {
              arg.replaceChild(elem, this);
            }
          });
          return arg && (arg.length || arg.nodeType) ? this : this.remove();
        },
        detach: function(selector) {
          return this.remove(selector, true);
        },
        domManip: function(args, callback) {
          args = concat.apply([], args);
          var fragment,
              first,
              scripts,
              hasScripts,
              node,
              doc,
              i = 0,
              l = this.length,
              set = this,
              iNoClone = l - 1,
              value = args[0],
              isFunction = jQuery.isFunction(value);
          if (isFunction || (l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value))) {
            return this.each(function(index) {
              var self = set.eq(index);
              if (isFunction) {
                args[0] = value.call(this, index, self.html());
              }
              self.domManip(args, callback);
            });
          }
          if (l) {
            fragment = jQuery.buildFragment(args, this[0].ownerDocument, false, this);
            first = fragment.firstChild;
            if (fragment.childNodes.length === 1) {
              fragment = first;
            }
            if (first) {
              scripts = jQuery.map(getAll(fragment, "script"), disableScript);
              hasScripts = scripts.length;
              for (; i < l; i++) {
                node = fragment;
                if (i !== iNoClone) {
                  node = jQuery.clone(node, true, true);
                  if (hasScripts) {
                    jQuery.merge(scripts, getAll(node, "script"));
                  }
                }
                callback.call(this[i], node, i);
              }
              if (hasScripts) {
                doc = scripts[scripts.length - 1].ownerDocument;
                jQuery.map(scripts, restoreScript);
                for (i = 0; i < hasScripts; i++) {
                  node = scripts[i];
                  if (rscriptType.test(node.type || "") && !data_priv.access(node, "globalEval") && jQuery.contains(doc, node)) {
                    if (node.src) {
                      if (jQuery._evalUrl) {
                        jQuery._evalUrl(node.src);
                      }
                    } else {
                      jQuery.globalEval(node.textContent.replace(rcleanScript, ""));
                    }
                  }
                }
              }
            }
          }
          return this;
        }
      });
      jQuery.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
      }, function(name, original) {
        jQuery.fn[name] = function(selector) {
          var elems,
              ret = [],
              insert = jQuery(selector),
              last = insert.length - 1,
              i = 0;
          for (; i <= last; i++) {
            elems = i === last ? this : this.clone(true);
            jQuery(insert[i])[original](elems);
            push.apply(ret, elems.get());
          }
          return this.pushStack(ret);
        };
      });
      var iframe,
          elemdisplay = {};
      function actualDisplay(name, doc) {
        var style,
            elem = jQuery(doc.createElement(name)).appendTo(doc.body),
            display = window.getDefaultComputedStyle && (style = window.getDefaultComputedStyle(elem[0])) ? style.display : jQuery.css(elem[0], "display");
        elem.detach();
        return display;
      }
      function defaultDisplay(nodeName) {
        var doc = document,
            display = elemdisplay[nodeName];
        if (!display) {
          display = actualDisplay(nodeName, doc);
          if (display === "none" || !display) {
            iframe = (iframe || jQuery("<iframe frameborder='0' width='0' height='0'/>")).appendTo(doc.documentElement);
            doc = iframe[0].contentDocument;
            doc.write();
            doc.close();
            display = actualDisplay(nodeName, doc);
            iframe.detach();
          }
          elemdisplay[nodeName] = display;
        }
        return display;
      }
      var rmargin = (/^margin/);
      var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");
      var getStyles = function(elem) {
        if (elem.ownerDocument.defaultView.opener) {
          return elem.ownerDocument.defaultView.getComputedStyle(elem, null);
        }
        return window.getComputedStyle(elem, null);
      };
      function curCSS(elem, name, computed) {
        var width,
            minWidth,
            maxWidth,
            ret,
            style = elem.style;
        computed = computed || getStyles(elem);
        if (computed) {
          ret = computed.getPropertyValue(name) || computed[name];
        }
        if (computed) {
          if (ret === "" && !jQuery.contains(elem.ownerDocument, elem)) {
            ret = jQuery.style(elem, name);
          }
          if (rnumnonpx.test(ret) && rmargin.test(name)) {
            width = style.width;
            minWidth = style.minWidth;
            maxWidth = style.maxWidth;
            style.minWidth = style.maxWidth = style.width = ret;
            ret = computed.width;
            style.width = width;
            style.minWidth = minWidth;
            style.maxWidth = maxWidth;
          }
        }
        return ret !== undefined ? ret + "" : ret;
      }
      function addGetHookIf(conditionFn, hookFn) {
        return {get: function() {
            if (conditionFn()) {
              delete this.get;
              return ;
            }
            return (this.get = hookFn).apply(this, arguments);
          }};
      }
      (function() {
        var pixelPositionVal,
            boxSizingReliableVal,
            docElem = document.documentElement,
            container = document.createElement("div"),
            div = document.createElement("div");
        if (!div.style) {
          return ;
        }
        div.style.backgroundClip = "content-box";
        div.cloneNode(true).style.backgroundClip = "";
        support.clearCloneStyle = div.style.backgroundClip === "content-box";
        container.style.cssText = "border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;" + "position:absolute";
        container.appendChild(div);
        function computePixelPositionAndBoxSizingReliable() {
          div.style.cssText = "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" + "box-sizing:border-box;display:block;margin-top:1%;top:1%;" + "border:1px;padding:1px;width:4px;position:absolute";
          div.innerHTML = "";
          docElem.appendChild(container);
          var divStyle = window.getComputedStyle(div, null);
          pixelPositionVal = divStyle.top !== "1%";
          boxSizingReliableVal = divStyle.width === "4px";
          docElem.removeChild(container);
        }
        if (window.getComputedStyle) {
          jQuery.extend(support, {
            pixelPosition: function() {
              computePixelPositionAndBoxSizingReliable();
              return pixelPositionVal;
            },
            boxSizingReliable: function() {
              if (boxSizingReliableVal == null) {
                computePixelPositionAndBoxSizingReliable();
              }
              return boxSizingReliableVal;
            },
            reliableMarginRight: function() {
              var ret,
                  marginDiv = div.appendChild(document.createElement("div"));
              marginDiv.style.cssText = div.style.cssText = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" + "box-sizing:content-box;display:block;margin:0;border:0;padding:0";
              marginDiv.style.marginRight = marginDiv.style.width = "0";
              div.style.width = "1px";
              docElem.appendChild(container);
              ret = !parseFloat(window.getComputedStyle(marginDiv, null).marginRight);
              docElem.removeChild(container);
              div.removeChild(marginDiv);
              return ret;
            }
          });
        }
      })();
      jQuery.swap = function(elem, options, callback, args) {
        var ret,
            name,
            old = {};
        for (name in options) {
          old[name] = elem.style[name];
          elem.style[name] = options[name];
        }
        ret = callback.apply(elem, args || []);
        for (name in options) {
          elem.style[name] = old[name];
        }
        return ret;
      };
      var rdisplayswap = /^(none|table(?!-c[ea]).+)/,
          rnumsplit = new RegExp("^(" + pnum + ")(.*)$", "i"),
          rrelNum = new RegExp("^([+-])=(" + pnum + ")", "i"),
          cssShow = {
            position: "absolute",
            visibility: "hidden",
            display: "block"
          },
          cssNormalTransform = {
            letterSpacing: "0",
            fontWeight: "400"
          },
          cssPrefixes = ["Webkit", "O", "Moz", "ms"];
      function vendorPropName(style, name) {
        if (name in style) {
          return name;
        }
        var capName = name[0].toUpperCase() + name.slice(1),
            origName = name,
            i = cssPrefixes.length;
        while (i--) {
          name = cssPrefixes[i] + capName;
          if (name in style) {
            return name;
          }
        }
        return origName;
      }
      function setPositiveNumber(elem, value, subtract) {
        var matches = rnumsplit.exec(value);
        return matches ? Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || "px") : value;
      }
      function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
        var i = extra === (isBorderBox ? "border" : "content") ? 4 : name === "width" ? 1 : 0,
            val = 0;
        for (; i < 4; i += 2) {
          if (extra === "margin") {
            val += jQuery.css(elem, extra + cssExpand[i], true, styles);
          }
          if (isBorderBox) {
            if (extra === "content") {
              val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
            }
            if (extra !== "margin") {
              val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
            }
          } else {
            val += jQuery.css(elem, "padding" + cssExpand[i], true, styles);
            if (extra !== "padding") {
              val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
            }
          }
        }
        return val;
      }
      function getWidthOrHeight(elem, name, extra) {
        var valueIsBorderBox = true,
            val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
            styles = getStyles(elem),
            isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box";
        if (val <= 0 || val == null) {
          val = curCSS(elem, name, styles);
          if (val < 0 || val == null) {
            val = elem.style[name];
          }
          if (rnumnonpx.test(val)) {
            return val;
          }
          valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);
          val = parseFloat(val) || 0;
        }
        return (val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles)) + "px";
      }
      function showHide(elements, show) {
        var display,
            elem,
            hidden,
            values = [],
            index = 0,
            length = elements.length;
        for (; index < length; index++) {
          elem = elements[index];
          if (!elem.style) {
            continue;
          }
          values[index] = data_priv.get(elem, "olddisplay");
          display = elem.style.display;
          if (show) {
            if (!values[index] && display === "none") {
              elem.style.display = "";
            }
            if (elem.style.display === "" && isHidden(elem)) {
              values[index] = data_priv.access(elem, "olddisplay", defaultDisplay(elem.nodeName));
            }
          } else {
            hidden = isHidden(elem);
            if (display !== "none" || !hidden) {
              data_priv.set(elem, "olddisplay", hidden ? display : jQuery.css(elem, "display"));
            }
          }
        }
        for (index = 0; index < length; index++) {
          elem = elements[index];
          if (!elem.style) {
            continue;
          }
          if (!show || elem.style.display === "none" || elem.style.display === "") {
            elem.style.display = show ? values[index] || "" : "none";
          }
        }
        return elements;
      }
      jQuery.extend({
        cssHooks: {opacity: {get: function(elem, computed) {
              if (computed) {
                var ret = curCSS(elem, "opacity");
                return ret === "" ? "1" : ret;
              }
            }}},
        cssNumber: {
          "columnCount": true,
          "fillOpacity": true,
          "flexGrow": true,
          "flexShrink": true,
          "fontWeight": true,
          "lineHeight": true,
          "opacity": true,
          "order": true,
          "orphans": true,
          "widows": true,
          "zIndex": true,
          "zoom": true
        },
        cssProps: {"float": "cssFloat"},
        style: function(elem, name, value, extra) {
          if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
            return ;
          }
          var ret,
              type,
              hooks,
              origName = jQuery.camelCase(name),
              style = elem.style;
          name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName));
          hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
          if (value !== undefined) {
            type = typeof value;
            if (type === "string" && (ret = rrelNum.exec(value))) {
              value = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name));
              type = "number";
            }
            if (value == null || value !== value) {
              return ;
            }
            if (type === "number" && !jQuery.cssNumber[origName]) {
              value += "px";
            }
            if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
              style[name] = "inherit";
            }
            if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
              style[name] = value;
            }
          } else {
            if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
              return ret;
            }
            return style[name];
          }
        },
        css: function(elem, name, extra, styles) {
          var val,
              num,
              hooks,
              origName = jQuery.camelCase(name);
          name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName));
          hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
          if (hooks && "get" in hooks) {
            val = hooks.get(elem, true, extra);
          }
          if (val === undefined) {
            val = curCSS(elem, name, styles);
          }
          if (val === "normal" && name in cssNormalTransform) {
            val = cssNormalTransform[name];
          }
          if (extra === "" || extra) {
            num = parseFloat(val);
            return extra === true || jQuery.isNumeric(num) ? num || 0 : val;
          }
          return val;
        }
      });
      jQuery.each(["height", "width"], function(i, name) {
        jQuery.cssHooks[name] = {
          get: function(elem, computed, extra) {
            if (computed) {
              return rdisplayswap.test(jQuery.css(elem, "display")) && elem.offsetWidth === 0 ? jQuery.swap(elem, cssShow, function() {
                return getWidthOrHeight(elem, name, extra);
              }) : getWidthOrHeight(elem, name, extra);
            }
          },
          set: function(elem, value, extra) {
            var styles = extra && getStyles(elem);
            return setPositiveNumber(elem, value, extra ? augmentWidthOrHeight(elem, name, extra, jQuery.css(elem, "boxSizing", false, styles) === "border-box", styles) : 0);
          }
        };
      });
      jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight, function(elem, computed) {
        if (computed) {
          return jQuery.swap(elem, {"display": "inline-block"}, curCSS, [elem, "marginRight"]);
        }
      });
      jQuery.each({
        margin: "",
        padding: "",
        border: "Width"
      }, function(prefix, suffix) {
        jQuery.cssHooks[prefix + suffix] = {expand: function(value) {
            var i = 0,
                expanded = {},
                parts = typeof value === "string" ? value.split(" ") : [value];
            for (; i < 4; i++) {
              expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
            }
            return expanded;
          }};
        if (!rmargin.test(prefix)) {
          jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
        }
      });
      jQuery.fn.extend({
        css: function(name, value) {
          return access(this, function(elem, name, value) {
            var styles,
                len,
                map = {},
                i = 0;
            if (jQuery.isArray(name)) {
              styles = getStyles(elem);
              len = name.length;
              for (; i < len; i++) {
                map[name[i]] = jQuery.css(elem, name[i], false, styles);
              }
              return map;
            }
            return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
          }, name, value, arguments.length > 1);
        },
        show: function() {
          return showHide(this, true);
        },
        hide: function() {
          return showHide(this);
        },
        toggle: function(state) {
          if (typeof state === "boolean") {
            return state ? this.show() : this.hide();
          }
          return this.each(function() {
            if (isHidden(this)) {
              jQuery(this).show();
            } else {
              jQuery(this).hide();
            }
          });
        }
      });
      function Tween(elem, options, prop, end, easing) {
        return new Tween.prototype.init(elem, options, prop, end, easing);
      }
      jQuery.Tween = Tween;
      Tween.prototype = {
        constructor: Tween,
        init: function(elem, options, prop, end, easing, unit) {
          this.elem = elem;
          this.prop = prop;
          this.easing = easing || "swing";
          this.options = options;
          this.start = this.now = this.cur();
          this.end = end;
          this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
        },
        cur: function() {
          var hooks = Tween.propHooks[this.prop];
          return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
        },
        run: function(percent) {
          var eased,
              hooks = Tween.propHooks[this.prop];
          if (this.options.duration) {
            this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
          } else {
            this.pos = eased = percent;
          }
          this.now = (this.end - this.start) * eased + this.start;
          if (this.options.step) {
            this.options.step.call(this.elem, this.now, this);
          }
          if (hooks && hooks.set) {
            hooks.set(this);
          } else {
            Tween.propHooks._default.set(this);
          }
          return this;
        }
      };
      Tween.prototype.init.prototype = Tween.prototype;
      Tween.propHooks = {_default: {
          get: function(tween) {
            var result;
            if (tween.elem[tween.prop] != null && (!tween.elem.style || tween.elem.style[tween.prop] == null)) {
              return tween.elem[tween.prop];
            }
            result = jQuery.css(tween.elem, tween.prop, "");
            return !result || result === "auto" ? 0 : result;
          },
          set: function(tween) {
            if (jQuery.fx.step[tween.prop]) {
              jQuery.fx.step[tween.prop](tween);
            } else if (tween.elem.style && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
              jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
            } else {
              tween.elem[tween.prop] = tween.now;
            }
          }
        }};
      Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {set: function(tween) {
          if (tween.elem.nodeType && tween.elem.parentNode) {
            tween.elem[tween.prop] = tween.now;
          }
        }};
      jQuery.easing = {
        linear: function(p) {
          return p;
        },
        swing: function(p) {
          return 0.5 - Math.cos(p * Math.PI) / 2;
        }
      };
      jQuery.fx = Tween.prototype.init;
      jQuery.fx.step = {};
      var fxNow,
          timerId,
          rfxtypes = /^(?:toggle|show|hide)$/,
          rfxnum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i"),
          rrun = /queueHooks$/,
          animationPrefilters = [defaultPrefilter],
          tweeners = {"*": [function(prop, value) {
              var tween = this.createTween(prop, value),
                  target = tween.cur(),
                  parts = rfxnum.exec(value),
                  unit = parts && parts[3] || (jQuery.cssNumber[prop] ? "" : "px"),
                  start = (jQuery.cssNumber[prop] || unit !== "px" && +target) && rfxnum.exec(jQuery.css(tween.elem, prop)),
                  scale = 1,
                  maxIterations = 20;
              if (start && start[3] !== unit) {
                unit = unit || start[3];
                parts = parts || [];
                start = +target || 1;
                do {
                  scale = scale || ".5";
                  start = start / scale;
                  jQuery.style(tween.elem, prop, start + unit);
                } while (scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations);
              }
              if (parts) {
                start = tween.start = +start || +target || 0;
                tween.unit = unit;
                tween.end = parts[1] ? start + (parts[1] + 1) * parts[2] : +parts[2];
              }
              return tween;
            }]};
      function createFxNow() {
        setTimeout(function() {
          fxNow = undefined;
        });
        return (fxNow = jQuery.now());
      }
      function genFx(type, includeWidth) {
        var which,
            i = 0,
            attrs = {height: type};
        includeWidth = includeWidth ? 1 : 0;
        for (; i < 4; i += 2 - includeWidth) {
          which = cssExpand[i];
          attrs["margin" + which] = attrs["padding" + which] = type;
        }
        if (includeWidth) {
          attrs.opacity = attrs.width = type;
        }
        return attrs;
      }
      function createTween(value, prop, animation) {
        var tween,
            collection = (tweeners[prop] || []).concat(tweeners["*"]),
            index = 0,
            length = collection.length;
        for (; index < length; index++) {
          if ((tween = collection[index].call(animation, prop, value))) {
            return tween;
          }
        }
      }
      function defaultPrefilter(elem, props, opts) {
        var prop,
            value,
            toggle,
            tween,
            hooks,
            oldfire,
            display,
            checkDisplay,
            anim = this,
            orig = {},
            style = elem.style,
            hidden = elem.nodeType && isHidden(elem),
            dataShow = data_priv.get(elem, "fxshow");
        if (!opts.queue) {
          hooks = jQuery._queueHooks(elem, "fx");
          if (hooks.unqueued == null) {
            hooks.unqueued = 0;
            oldfire = hooks.empty.fire;
            hooks.empty.fire = function() {
              if (!hooks.unqueued) {
                oldfire();
              }
            };
          }
          hooks.unqueued++;
          anim.always(function() {
            anim.always(function() {
              hooks.unqueued--;
              if (!jQuery.queue(elem, "fx").length) {
                hooks.empty.fire();
              }
            });
          });
        }
        if (elem.nodeType === 1 && ("height" in props || "width" in props)) {
          opts.overflow = [style.overflow, style.overflowX, style.overflowY];
          display = jQuery.css(elem, "display");
          checkDisplay = display === "none" ? data_priv.get(elem, "olddisplay") || defaultDisplay(elem.nodeName) : display;
          if (checkDisplay === "inline" && jQuery.css(elem, "float") === "none") {
            style.display = "inline-block";
          }
        }
        if (opts.overflow) {
          style.overflow = "hidden";
          anim.always(function() {
            style.overflow = opts.overflow[0];
            style.overflowX = opts.overflow[1];
            style.overflowY = opts.overflow[2];
          });
        }
        for (prop in props) {
          value = props[prop];
          if (rfxtypes.exec(value)) {
            delete props[prop];
            toggle = toggle || value === "toggle";
            if (value === (hidden ? "hide" : "show")) {
              if (value === "show" && dataShow && dataShow[prop] !== undefined) {
                hidden = true;
              } else {
                continue;
              }
            }
            orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
          } else {
            display = undefined;
          }
        }
        if (!jQuery.isEmptyObject(orig)) {
          if (dataShow) {
            if ("hidden" in dataShow) {
              hidden = dataShow.hidden;
            }
          } else {
            dataShow = data_priv.access(elem, "fxshow", {});
          }
          if (toggle) {
            dataShow.hidden = !hidden;
          }
          if (hidden) {
            jQuery(elem).show();
          } else {
            anim.done(function() {
              jQuery(elem).hide();
            });
          }
          anim.done(function() {
            var prop;
            data_priv.remove(elem, "fxshow");
            for (prop in orig) {
              jQuery.style(elem, prop, orig[prop]);
            }
          });
          for (prop in orig) {
            tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
            if (!(prop in dataShow)) {
              dataShow[prop] = tween.start;
              if (hidden) {
                tween.end = tween.start;
                tween.start = prop === "width" || prop === "height" ? 1 : 0;
              }
            }
          }
        } else if ((display === "none" ? defaultDisplay(elem.nodeName) : display) === "inline") {
          style.display = display;
        }
      }
      function propFilter(props, specialEasing) {
        var index,
            name,
            easing,
            value,
            hooks;
        for (index in props) {
          name = jQuery.camelCase(index);
          easing = specialEasing[name];
          value = props[index];
          if (jQuery.isArray(value)) {
            easing = value[1];
            value = props[index] = value[0];
          }
          if (index !== name) {
            props[name] = value;
            delete props[index];
          }
          hooks = jQuery.cssHooks[name];
          if (hooks && "expand" in hooks) {
            value = hooks.expand(value);
            delete props[name];
            for (index in value) {
              if (!(index in props)) {
                props[index] = value[index];
                specialEasing[index] = easing;
              }
            }
          } else {
            specialEasing[name] = easing;
          }
        }
      }
      function Animation(elem, properties, options) {
        var result,
            stopped,
            index = 0,
            length = animationPrefilters.length,
            deferred = jQuery.Deferred().always(function() {
              delete tick.elem;
            }),
            tick = function() {
              if (stopped) {
                return false;
              }
              var currentTime = fxNow || createFxNow(),
                  remaining = Math.max(0, animation.startTime + animation.duration - currentTime),
                  temp = remaining / animation.duration || 0,
                  percent = 1 - temp,
                  index = 0,
                  length = animation.tweens.length;
              for (; index < length; index++) {
                animation.tweens[index].run(percent);
              }
              deferred.notifyWith(elem, [animation, percent, remaining]);
              if (percent < 1 && length) {
                return remaining;
              } else {
                deferred.resolveWith(elem, [animation]);
                return false;
              }
            },
            animation = deferred.promise({
              elem: elem,
              props: jQuery.extend({}, properties),
              opts: jQuery.extend(true, {specialEasing: {}}, options),
              originalProperties: properties,
              originalOptions: options,
              startTime: fxNow || createFxNow(),
              duration: options.duration,
              tweens: [],
              createTween: function(prop, end) {
                var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
                animation.tweens.push(tween);
                return tween;
              },
              stop: function(gotoEnd) {
                var index = 0,
                    length = gotoEnd ? animation.tweens.length : 0;
                if (stopped) {
                  return this;
                }
                stopped = true;
                for (; index < length; index++) {
                  animation.tweens[index].run(1);
                }
                if (gotoEnd) {
                  deferred.resolveWith(elem, [animation, gotoEnd]);
                } else {
                  deferred.rejectWith(elem, [animation, gotoEnd]);
                }
                return this;
              }
            }),
            props = animation.props;
        propFilter(props, animation.opts.specialEasing);
        for (; index < length; index++) {
          result = animationPrefilters[index].call(animation, elem, props, animation.opts);
          if (result) {
            return result;
          }
        }
        jQuery.map(props, createTween, animation);
        if (jQuery.isFunction(animation.opts.start)) {
          animation.opts.start.call(elem, animation);
        }
        jQuery.fx.timer(jQuery.extend(tick, {
          elem: elem,
          anim: animation,
          queue: animation.opts.queue
        }));
        return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
      }
      jQuery.Animation = jQuery.extend(Animation, {
        tweener: function(props, callback) {
          if (jQuery.isFunction(props)) {
            callback = props;
            props = ["*"];
          } else {
            props = props.split(" ");
          }
          var prop,
              index = 0,
              length = props.length;
          for (; index < length; index++) {
            prop = props[index];
            tweeners[prop] = tweeners[prop] || [];
            tweeners[prop].unshift(callback);
          }
        },
        prefilter: function(callback, prepend) {
          if (prepend) {
            animationPrefilters.unshift(callback);
          } else {
            animationPrefilters.push(callback);
          }
        }
      });
      jQuery.speed = function(speed, easing, fn) {
        var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
          complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
          duration: speed,
          easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
        };
        opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;
        if (opt.queue == null || opt.queue === true) {
          opt.queue = "fx";
        }
        opt.old = opt.complete;
        opt.complete = function() {
          if (jQuery.isFunction(opt.old)) {
            opt.old.call(this);
          }
          if (opt.queue) {
            jQuery.dequeue(this, opt.queue);
          }
        };
        return opt;
      };
      jQuery.fn.extend({
        fadeTo: function(speed, to, easing, callback) {
          return this.filter(isHidden).css("opacity", 0).show().end().animate({opacity: to}, speed, easing, callback);
        },
        animate: function(prop, speed, easing, callback) {
          var empty = jQuery.isEmptyObject(prop),
              optall = jQuery.speed(speed, easing, callback),
              doAnimation = function() {
                var anim = Animation(this, jQuery.extend({}, prop), optall);
                if (empty || data_priv.get(this, "finish")) {
                  anim.stop(true);
                }
              };
          doAnimation.finish = doAnimation;
          return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
        },
        stop: function(type, clearQueue, gotoEnd) {
          var stopQueue = function(hooks) {
            var stop = hooks.stop;
            delete hooks.stop;
            stop(gotoEnd);
          };
          if (typeof type !== "string") {
            gotoEnd = clearQueue;
            clearQueue = type;
            type = undefined;
          }
          if (clearQueue && type !== false) {
            this.queue(type || "fx", []);
          }
          return this.each(function() {
            var dequeue = true,
                index = type != null && type + "queueHooks",
                timers = jQuery.timers,
                data = data_priv.get(this);
            if (index) {
              if (data[index] && data[index].stop) {
                stopQueue(data[index]);
              }
            } else {
              for (index in data) {
                if (data[index] && data[index].stop && rrun.test(index)) {
                  stopQueue(data[index]);
                }
              }
            }
            for (index = timers.length; index--; ) {
              if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
                timers[index].anim.stop(gotoEnd);
                dequeue = false;
                timers.splice(index, 1);
              }
            }
            if (dequeue || !gotoEnd) {
              jQuery.dequeue(this, type);
            }
          });
        },
        finish: function(type) {
          if (type !== false) {
            type = type || "fx";
          }
          return this.each(function() {
            var index,
                data = data_priv.get(this),
                queue = data[type + "queue"],
                hooks = data[type + "queueHooks"],
                timers = jQuery.timers,
                length = queue ? queue.length : 0;
            data.finish = true;
            jQuery.queue(this, type, []);
            if (hooks && hooks.stop) {
              hooks.stop.call(this, true);
            }
            for (index = timers.length; index--; ) {
              if (timers[index].elem === this && timers[index].queue === type) {
                timers[index].anim.stop(true);
                timers.splice(index, 1);
              }
            }
            for (index = 0; index < length; index++) {
              if (queue[index] && queue[index].finish) {
                queue[index].finish.call(this);
              }
            }
            delete data.finish;
          });
        }
      });
      jQuery.each(["toggle", "show", "hide"], function(i, name) {
        var cssFn = jQuery.fn[name];
        jQuery.fn[name] = function(speed, easing, callback) {
          return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
        };
      });
      jQuery.each({
        slideDown: genFx("show"),
        slideUp: genFx("hide"),
        slideToggle: genFx("toggle"),
        fadeIn: {opacity: "show"},
        fadeOut: {opacity: "hide"},
        fadeToggle: {opacity: "toggle"}
      }, function(name, props) {
        jQuery.fn[name] = function(speed, easing, callback) {
          return this.animate(props, speed, easing, callback);
        };
      });
      jQuery.timers = [];
      jQuery.fx.tick = function() {
        var timer,
            i = 0,
            timers = jQuery.timers;
        fxNow = jQuery.now();
        for (; i < timers.length; i++) {
          timer = timers[i];
          if (!timer() && timers[i] === timer) {
            timers.splice(i--, 1);
          }
        }
        if (!timers.length) {
          jQuery.fx.stop();
        }
        fxNow = undefined;
      };
      jQuery.fx.timer = function(timer) {
        jQuery.timers.push(timer);
        if (timer()) {
          jQuery.fx.start();
        } else {
          jQuery.timers.pop();
        }
      };
      jQuery.fx.interval = 13;
      jQuery.fx.start = function() {
        if (!timerId) {
          timerId = setInterval(jQuery.fx.tick, jQuery.fx.interval);
        }
      };
      jQuery.fx.stop = function() {
        clearInterval(timerId);
        timerId = null;
      };
      jQuery.fx.speeds = {
        slow: 600,
        fast: 200,
        _default: 400
      };
      jQuery.fn.delay = function(time, type) {
        time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
        type = type || "fx";
        return this.queue(type, function(next, hooks) {
          var timeout = setTimeout(next, time);
          hooks.stop = function() {
            clearTimeout(timeout);
          };
        });
      };
      (function() {
        var input = document.createElement("input"),
            select = document.createElement("select"),
            opt = select.appendChild(document.createElement("option"));
        input.type = "checkbox";
        support.checkOn = input.value !== "";
        support.optSelected = opt.selected;
        select.disabled = true;
        support.optDisabled = !opt.disabled;
        input = document.createElement("input");
        input.value = "t";
        input.type = "radio";
        support.radioValue = input.value === "t";
      })();
      var nodeHook,
          boolHook,
          attrHandle = jQuery.expr.attrHandle;
      jQuery.fn.extend({
        attr: function(name, value) {
          return access(this, jQuery.attr, name, value, arguments.length > 1);
        },
        removeAttr: function(name) {
          return this.each(function() {
            jQuery.removeAttr(this, name);
          });
        }
      });
      jQuery.extend({
        attr: function(elem, name, value) {
          var hooks,
              ret,
              nType = elem.nodeType;
          if (!elem || nType === 3 || nType === 8 || nType === 2) {
            return ;
          }
          if (typeof elem.getAttribute === strundefined) {
            return jQuery.prop(elem, name, value);
          }
          if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
            name = name.toLowerCase();
            hooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name) ? boolHook : nodeHook);
          }
          if (value !== undefined) {
            if (value === null) {
              jQuery.removeAttr(elem, name);
            } else if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
              return ret;
            } else {
              elem.setAttribute(name, value + "");
              return value;
            }
          } else if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
            return ret;
          } else {
            ret = jQuery.find.attr(elem, name);
            return ret == null ? undefined : ret;
          }
        },
        removeAttr: function(elem, value) {
          var name,
              propName,
              i = 0,
              attrNames = value && value.match(rnotwhite);
          if (attrNames && elem.nodeType === 1) {
            while ((name = attrNames[i++])) {
              propName = jQuery.propFix[name] || name;
              if (jQuery.expr.match.bool.test(name)) {
                elem[propName] = false;
              }
              elem.removeAttribute(name);
            }
          }
        },
        attrHooks: {type: {set: function(elem, value) {
              if (!support.radioValue && value === "radio" && jQuery.nodeName(elem, "input")) {
                var val = elem.value;
                elem.setAttribute("type", value);
                if (val) {
                  elem.value = val;
                }
                return value;
              }
            }}}
      });
      boolHook = {set: function(elem, value, name) {
          if (value === false) {
            jQuery.removeAttr(elem, name);
          } else {
            elem.setAttribute(name, name);
          }
          return name;
        }};
      jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function(i, name) {
        var getter = attrHandle[name] || jQuery.find.attr;
        attrHandle[name] = function(elem, name, isXML) {
          var ret,
              handle;
          if (!isXML) {
            handle = attrHandle[name];
            attrHandle[name] = ret;
            ret = getter(elem, name, isXML) != null ? name.toLowerCase() : null;
            attrHandle[name] = handle;
          }
          return ret;
        };
      });
      var rfocusable = /^(?:input|select|textarea|button)$/i;
      jQuery.fn.extend({
        prop: function(name, value) {
          return access(this, jQuery.prop, name, value, arguments.length > 1);
        },
        removeProp: function(name) {
          return this.each(function() {
            delete this[jQuery.propFix[name] || name];
          });
        }
      });
      jQuery.extend({
        propFix: {
          "for": "htmlFor",
          "class": "className"
        },
        prop: function(elem, name, value) {
          var ret,
              hooks,
              notxml,
              nType = elem.nodeType;
          if (!elem || nType === 3 || nType === 8 || nType === 2) {
            return ;
          }
          notxml = nType !== 1 || !jQuery.isXMLDoc(elem);
          if (notxml) {
            name = jQuery.propFix[name] || name;
            hooks = jQuery.propHooks[name];
          }
          if (value !== undefined) {
            return hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined ? ret : (elem[name] = value);
          } else {
            return hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null ? ret : elem[name];
          }
        },
        propHooks: {tabIndex: {get: function(elem) {
              return elem.hasAttribute("tabindex") || rfocusable.test(elem.nodeName) || elem.href ? elem.tabIndex : -1;
            }}}
      });
      if (!support.optSelected) {
        jQuery.propHooks.selected = {get: function(elem) {
            var parent = elem.parentNode;
            if (parent && parent.parentNode) {
              parent.parentNode.selectedIndex;
            }
            return null;
          }};
      }
      jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function() {
        jQuery.propFix[this.toLowerCase()] = this;
      });
      var rclass = /[\t\r\n\f]/g;
      jQuery.fn.extend({
        addClass: function(value) {
          var classes,
              elem,
              cur,
              clazz,
              j,
              finalValue,
              proceed = typeof value === "string" && value,
              i = 0,
              len = this.length;
          if (jQuery.isFunction(value)) {
            return this.each(function(j) {
              jQuery(this).addClass(value.call(this, j, this.className));
            });
          }
          if (proceed) {
            classes = (value || "").match(rnotwhite) || [];
            for (; i < len; i++) {
              elem = this[i];
              cur = elem.nodeType === 1 && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : " ");
              if (cur) {
                j = 0;
                while ((clazz = classes[j++])) {
                  if (cur.indexOf(" " + clazz + " ") < 0) {
                    cur += clazz + " ";
                  }
                }
                finalValue = jQuery.trim(cur);
                if (elem.className !== finalValue) {
                  elem.className = finalValue;
                }
              }
            }
          }
          return this;
        },
        removeClass: function(value) {
          var classes,
              elem,
              cur,
              clazz,
              j,
              finalValue,
              proceed = arguments.length === 0 || typeof value === "string" && value,
              i = 0,
              len = this.length;
          if (jQuery.isFunction(value)) {
            return this.each(function(j) {
              jQuery(this).removeClass(value.call(this, j, this.className));
            });
          }
          if (proceed) {
            classes = (value || "").match(rnotwhite) || [];
            for (; i < len; i++) {
              elem = this[i];
              cur = elem.nodeType === 1 && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : "");
              if (cur) {
                j = 0;
                while ((clazz = classes[j++])) {
                  while (cur.indexOf(" " + clazz + " ") >= 0) {
                    cur = cur.replace(" " + clazz + " ", " ");
                  }
                }
                finalValue = value ? jQuery.trim(cur) : "";
                if (elem.className !== finalValue) {
                  elem.className = finalValue;
                }
              }
            }
          }
          return this;
        },
        toggleClass: function(value, stateVal) {
          var type = typeof value;
          if (typeof stateVal === "boolean" && type === "string") {
            return stateVal ? this.addClass(value) : this.removeClass(value);
          }
          if (jQuery.isFunction(value)) {
            return this.each(function(i) {
              jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);
            });
          }
          return this.each(function() {
            if (type === "string") {
              var className,
                  i = 0,
                  self = jQuery(this),
                  classNames = value.match(rnotwhite) || [];
              while ((className = classNames[i++])) {
                if (self.hasClass(className)) {
                  self.removeClass(className);
                } else {
                  self.addClass(className);
                }
              }
            } else if (type === strundefined || type === "boolean") {
              if (this.className) {
                data_priv.set(this, "__className__", this.className);
              }
              this.className = this.className || value === false ? "" : data_priv.get(this, "__className__") || "";
            }
          });
        },
        hasClass: function(selector) {
          var className = " " + selector + " ",
              i = 0,
              l = this.length;
          for (; i < l; i++) {
            if (this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf(className) >= 0) {
              return true;
            }
          }
          return false;
        }
      });
      var rreturn = /\r/g;
      jQuery.fn.extend({val: function(value) {
          var hooks,
              ret,
              isFunction,
              elem = this[0];
          if (!arguments.length) {
            if (elem) {
              hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
              if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
                return ret;
              }
              ret = elem.value;
              return typeof ret === "string" ? ret.replace(rreturn, "") : ret == null ? "" : ret;
            }
            return ;
          }
          isFunction = jQuery.isFunction(value);
          return this.each(function(i) {
            var val;
            if (this.nodeType !== 1) {
              return ;
            }
            if (isFunction) {
              val = value.call(this, i, jQuery(this).val());
            } else {
              val = value;
            }
            if (val == null) {
              val = "";
            } else if (typeof val === "number") {
              val += "";
            } else if (jQuery.isArray(val)) {
              val = jQuery.map(val, function(value) {
                return value == null ? "" : value + "";
              });
            }
            hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
            if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
              this.value = val;
            }
          });
        }});
      jQuery.extend({valHooks: {
          option: {get: function(elem) {
              var val = jQuery.find.attr(elem, "value");
              return val != null ? val : jQuery.trim(jQuery.text(elem));
            }},
          select: {
            get: function(elem) {
              var value,
                  option,
                  options = elem.options,
                  index = elem.selectedIndex,
                  one = elem.type === "select-one" || index < 0,
                  values = one ? null : [],
                  max = one ? index + 1 : options.length,
                  i = index < 0 ? max : one ? index : 0;
              for (; i < max; i++) {
                option = options[i];
                if ((option.selected || i === index) && (support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, "optgroup"))) {
                  value = jQuery(option).val();
                  if (one) {
                    return value;
                  }
                  values.push(value);
                }
              }
              return values;
            },
            set: function(elem, value) {
              var optionSet,
                  option,
                  options = elem.options,
                  values = jQuery.makeArray(value),
                  i = options.length;
              while (i--) {
                option = options[i];
                if ((option.selected = jQuery.inArray(option.value, values) >= 0)) {
                  optionSet = true;
                }
              }
              if (!optionSet) {
                elem.selectedIndex = -1;
              }
              return values;
            }
          }
        }});
      jQuery.each(["radio", "checkbox"], function() {
        jQuery.valHooks[this] = {set: function(elem, value) {
            if (jQuery.isArray(value)) {
              return (elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0);
            }
          }};
        if (!support.checkOn) {
          jQuery.valHooks[this].get = function(elem) {
            return elem.getAttribute("value") === null ? "on" : elem.value;
          };
        }
      });
      jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup error contextmenu").split(" "), function(i, name) {
        jQuery.fn[name] = function(data, fn) {
          return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
        };
      });
      jQuery.fn.extend({
        hover: function(fnOver, fnOut) {
          return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
        },
        bind: function(types, data, fn) {
          return this.on(types, null, data, fn);
        },
        unbind: function(types, fn) {
          return this.off(types, null, fn);
        },
        delegate: function(selector, types, data, fn) {
          return this.on(types, selector, data, fn);
        },
        undelegate: function(selector, types, fn) {
          return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
        }
      });
      var nonce = jQuery.now();
      var rquery = (/\?/);
      jQuery.parseJSON = function(data) {
        return JSON.parse(data + "");
      };
      jQuery.parseXML = function(data) {
        var xml,
            tmp;
        if (!data || typeof data !== "string") {
          return null;
        }
        try {
          tmp = new DOMParser();
          xml = tmp.parseFromString(data, "text/xml");
        } catch (e) {
          xml = undefined;
        }
        if (!xml || xml.getElementsByTagName("parsererror").length) {
          jQuery.error("Invalid XML: " + data);
        }
        return xml;
      };
      var rhash = /#.*$/,
          rts = /([?&])_=[^&]*/,
          rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
          rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
          rnoContent = /^(?:GET|HEAD)$/,
          rprotocol = /^\/\//,
          rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,
          prefilters = {},
          transports = {},
          allTypes = "*/".concat("*"),
          ajaxLocation = window.location.href,
          ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];
      function addToPrefiltersOrTransports(structure) {
        return function(dataTypeExpression, func) {
          if (typeof dataTypeExpression !== "string") {
            func = dataTypeExpression;
            dataTypeExpression = "*";
          }
          var dataType,
              i = 0,
              dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];
          if (jQuery.isFunction(func)) {
            while ((dataType = dataTypes[i++])) {
              if (dataType[0] === "+") {
                dataType = dataType.slice(1) || "*";
                (structure[dataType] = structure[dataType] || []).unshift(func);
              } else {
                (structure[dataType] = structure[dataType] || []).push(func);
              }
            }
          }
        };
      }
      function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
        var inspected = {},
            seekingTransport = (structure === transports);
        function inspect(dataType) {
          var selected;
          inspected[dataType] = true;
          jQuery.each(structure[dataType] || [], function(_, prefilterOrFactory) {
            var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
            if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
              options.dataTypes.unshift(dataTypeOrTransport);
              inspect(dataTypeOrTransport);
              return false;
            } else if (seekingTransport) {
              return !(selected = dataTypeOrTransport);
            }
          });
          return selected;
        }
        return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
      }
      function ajaxExtend(target, src) {
        var key,
            deep,
            flatOptions = jQuery.ajaxSettings.flatOptions || {};
        for (key in src) {
          if (src[key] !== undefined) {
            (flatOptions[key] ? target : (deep || (deep = {})))[key] = src[key];
          }
        }
        if (deep) {
          jQuery.extend(true, target, deep);
        }
        return target;
      }
      function ajaxHandleResponses(s, jqXHR, responses) {
        var ct,
            type,
            finalDataType,
            firstDataType,
            contents = s.contents,
            dataTypes = s.dataTypes;
        while (dataTypes[0] === "*") {
          dataTypes.shift();
          if (ct === undefined) {
            ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
          }
        }
        if (ct) {
          for (type in contents) {
            if (contents[type] && contents[type].test(ct)) {
              dataTypes.unshift(type);
              break;
            }
          }
        }
        if (dataTypes[0] in responses) {
          finalDataType = dataTypes[0];
        } else {
          for (type in responses) {
            if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
              finalDataType = type;
              break;
            }
            if (!firstDataType) {
              firstDataType = type;
            }
          }
          finalDataType = finalDataType || firstDataType;
        }
        if (finalDataType) {
          if (finalDataType !== dataTypes[0]) {
            dataTypes.unshift(finalDataType);
          }
          return responses[finalDataType];
        }
      }
      function ajaxConvert(s, response, jqXHR, isSuccess) {
        var conv2,
            current,
            conv,
            tmp,
            prev,
            converters = {},
            dataTypes = s.dataTypes.slice();
        if (dataTypes[1]) {
          for (conv in s.converters) {
            converters[conv.toLowerCase()] = s.converters[conv];
          }
        }
        current = dataTypes.shift();
        while (current) {
          if (s.responseFields[current]) {
            jqXHR[s.responseFields[current]] = response;
          }
          if (!prev && isSuccess && s.dataFilter) {
            response = s.dataFilter(response, s.dataType);
          }
          prev = current;
          current = dataTypes.shift();
          if (current) {
            if (current === "*") {
              current = prev;
            } else if (prev !== "*" && prev !== current) {
              conv = converters[prev + " " + current] || converters["* " + current];
              if (!conv) {
                for (conv2 in converters) {
                  tmp = conv2.split(" ");
                  if (tmp[1] === current) {
                    conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
                    if (conv) {
                      if (conv === true) {
                        conv = converters[conv2];
                      } else if (converters[conv2] !== true) {
                        current = tmp[0];
                        dataTypes.unshift(tmp[1]);
                      }
                      break;
                    }
                  }
                }
              }
              if (conv !== true) {
                if (conv && s["throws"]) {
                  response = conv(response);
                } else {
                  try {
                    response = conv(response);
                  } catch (e) {
                    return {
                      state: "parsererror",
                      error: conv ? e : "No conversion from " + prev + " to " + current
                    };
                  }
                }
              }
            }
          }
        }
        return {
          state: "success",
          data: response
        };
      }
      jQuery.extend({
        active: 0,
        lastModified: {},
        etag: {},
        ajaxSettings: {
          url: ajaxLocation,
          type: "GET",
          isLocal: rlocalProtocol.test(ajaxLocParts[1]),
          global: true,
          processData: true,
          async: true,
          contentType: "application/x-www-form-urlencoded; charset=UTF-8",
          accepts: {
            "*": allTypes,
            text: "text/plain",
            html: "text/html",
            xml: "application/xml, text/xml",
            json: "application/json, text/javascript"
          },
          contents: {
            xml: /xml/,
            html: /html/,
            json: /json/
          },
          responseFields: {
            xml: "responseXML",
            text: "responseText",
            json: "responseJSON"
          },
          converters: {
            "* text": String,
            "text html": true,
            "text json": jQuery.parseJSON,
            "text xml": jQuery.parseXML
          },
          flatOptions: {
            url: true,
            context: true
          }
        },
        ajaxSetup: function(target, settings) {
          return settings ? ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : ajaxExtend(jQuery.ajaxSettings, target);
        },
        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
        ajaxTransport: addToPrefiltersOrTransports(transports),
        ajax: function(url, options) {
          if (typeof url === "object") {
            options = url;
            url = undefined;
          }
          options = options || {};
          var transport,
              cacheURL,
              responseHeadersString,
              responseHeaders,
              timeoutTimer,
              parts,
              fireGlobals,
              i,
              s = jQuery.ajaxSetup({}, options),
              callbackContext = s.context || s,
              globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,
              deferred = jQuery.Deferred(),
              completeDeferred = jQuery.Callbacks("once memory"),
              statusCode = s.statusCode || {},
              requestHeaders = {},
              requestHeadersNames = {},
              state = 0,
              strAbort = "canceled",
              jqXHR = {
                readyState: 0,
                getResponseHeader: function(key) {
                  var match;
                  if (state === 2) {
                    if (!responseHeaders) {
                      responseHeaders = {};
                      while ((match = rheaders.exec(responseHeadersString))) {
                        responseHeaders[match[1].toLowerCase()] = match[2];
                      }
                    }
                    match = responseHeaders[key.toLowerCase()];
                  }
                  return match == null ? null : match;
                },
                getAllResponseHeaders: function() {
                  return state === 2 ? responseHeadersString : null;
                },
                setRequestHeader: function(name, value) {
                  var lname = name.toLowerCase();
                  if (!state) {
                    name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
                    requestHeaders[name] = value;
                  }
                  return this;
                },
                overrideMimeType: function(type) {
                  if (!state) {
                    s.mimeType = type;
                  }
                  return this;
                },
                statusCode: function(map) {
                  var code;
                  if (map) {
                    if (state < 2) {
                      for (code in map) {
                        statusCode[code] = [statusCode[code], map[code]];
                      }
                    } else {
                      jqXHR.always(map[jqXHR.status]);
                    }
                  }
                  return this;
                },
                abort: function(statusText) {
                  var finalText = statusText || strAbort;
                  if (transport) {
                    transport.abort(finalText);
                  }
                  done(0, finalText);
                  return this;
                }
              };
          deferred.promise(jqXHR).complete = completeDeferred.add;
          jqXHR.success = jqXHR.done;
          jqXHR.error = jqXHR.fail;
          s.url = ((url || s.url || ajaxLocation) + "").replace(rhash, "").replace(rprotocol, ajaxLocParts[1] + "//");
          s.type = options.method || options.type || s.method || s.type;
          s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().match(rnotwhite) || [""];
          if (s.crossDomain == null) {
            parts = rurl.exec(s.url.toLowerCase());
            s.crossDomain = !!(parts && (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] || (parts[3] || (parts[1] === "http:" ? "80" : "443")) !== (ajaxLocParts[3] || (ajaxLocParts[1] === "http:" ? "80" : "443"))));
          }
          if (s.data && s.processData && typeof s.data !== "string") {
            s.data = jQuery.param(s.data, s.traditional);
          }
          inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
          if (state === 2) {
            return jqXHR;
          }
          fireGlobals = jQuery.event && s.global;
          if (fireGlobals && jQuery.active++ === 0) {
            jQuery.event.trigger("ajaxStart");
          }
          s.type = s.type.toUpperCase();
          s.hasContent = !rnoContent.test(s.type);
          cacheURL = s.url;
          if (!s.hasContent) {
            if (s.data) {
              cacheURL = (s.url += (rquery.test(cacheURL) ? "&" : "?") + s.data);
              delete s.data;
            }
            if (s.cache === false) {
              s.url = rts.test(cacheURL) ? cacheURL.replace(rts, "$1_=" + nonce++) : cacheURL + (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce++;
            }
          }
          if (s.ifModified) {
            if (jQuery.lastModified[cacheURL]) {
              jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
            }
            if (jQuery.etag[cacheURL]) {
              jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
            }
          }
          if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
            jqXHR.setRequestHeader("Content-Type", s.contentType);
          }
          jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);
          for (i in s.headers) {
            jqXHR.setRequestHeader(i, s.headers[i]);
          }
          if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {
            return jqXHR.abort();
          }
          strAbort = "abort";
          for (i in {
            success: 1,
            error: 1,
            complete: 1
          }) {
            jqXHR[i](s[i]);
          }
          transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
          if (!transport) {
            done(-1, "No Transport");
          } else {
            jqXHR.readyState = 1;
            if (fireGlobals) {
              globalEventContext.trigger("ajaxSend", [jqXHR, s]);
            }
            if (s.async && s.timeout > 0) {
              timeoutTimer = setTimeout(function() {
                jqXHR.abort("timeout");
              }, s.timeout);
            }
            try {
              state = 1;
              transport.send(requestHeaders, done);
            } catch (e) {
              if (state < 2) {
                done(-1, e);
              } else {
                throw e;
              }
            }
          }
          function done(status, nativeStatusText, responses, headers) {
            var isSuccess,
                success,
                error,
                response,
                modified,
                statusText = nativeStatusText;
            if (state === 2) {
              return ;
            }
            state = 2;
            if (timeoutTimer) {
              clearTimeout(timeoutTimer);
            }
            transport = undefined;
            responseHeadersString = headers || "";
            jqXHR.readyState = status > 0 ? 4 : 0;
            isSuccess = status >= 200 && status < 300 || status === 304;
            if (responses) {
              response = ajaxHandleResponses(s, jqXHR, responses);
            }
            response = ajaxConvert(s, response, jqXHR, isSuccess);
            if (isSuccess) {
              if (s.ifModified) {
                modified = jqXHR.getResponseHeader("Last-Modified");
                if (modified) {
                  jQuery.lastModified[cacheURL] = modified;
                }
                modified = jqXHR.getResponseHeader("etag");
                if (modified) {
                  jQuery.etag[cacheURL] = modified;
                }
              }
              if (status === 204 || s.type === "HEAD") {
                statusText = "nocontent";
              } else if (status === 304) {
                statusText = "notmodified";
              } else {
                statusText = response.state;
                success = response.data;
                error = response.error;
                isSuccess = !error;
              }
            } else {
              error = statusText;
              if (status || !statusText) {
                statusText = "error";
                if (status < 0) {
                  status = 0;
                }
              }
            }
            jqXHR.status = status;
            jqXHR.statusText = (nativeStatusText || statusText) + "";
            if (isSuccess) {
              deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
            } else {
              deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
            }
            jqXHR.statusCode(statusCode);
            statusCode = undefined;
            if (fireGlobals) {
              globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
            }
            completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);
            if (fireGlobals) {
              globalEventContext.trigger("ajaxComplete", [jqXHR, s]);
              if (!(--jQuery.active)) {
                jQuery.event.trigger("ajaxStop");
              }
            }
          }
          return jqXHR;
        },
        getJSON: function(url, data, callback) {
          return jQuery.get(url, data, callback, "json");
        },
        getScript: function(url, callback) {
          return jQuery.get(url, undefined, callback, "script");
        }
      });
      jQuery.each(["get", "post"], function(i, method) {
        jQuery[method] = function(url, data, callback, type) {
          if (jQuery.isFunction(data)) {
            type = type || callback;
            callback = data;
            data = undefined;
          }
          return jQuery.ajax({
            url: url,
            type: method,
            dataType: type,
            data: data,
            success: callback
          });
        };
      });
      jQuery._evalUrl = function(url) {
        return jQuery.ajax({
          url: url,
          type: "GET",
          dataType: "script",
          async: false,
          global: false,
          "throws": true
        });
      };
      jQuery.fn.extend({
        wrapAll: function(html) {
          var wrap;
          if (jQuery.isFunction(html)) {
            return this.each(function(i) {
              jQuery(this).wrapAll(html.call(this, i));
            });
          }
          if (this[0]) {
            wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
            if (this[0].parentNode) {
              wrap.insertBefore(this[0]);
            }
            wrap.map(function() {
              var elem = this;
              while (elem.firstElementChild) {
                elem = elem.firstElementChild;
              }
              return elem;
            }).append(this);
          }
          return this;
        },
        wrapInner: function(html) {
          if (jQuery.isFunction(html)) {
            return this.each(function(i) {
              jQuery(this).wrapInner(html.call(this, i));
            });
          }
          return this.each(function() {
            var self = jQuery(this),
                contents = self.contents();
            if (contents.length) {
              contents.wrapAll(html);
            } else {
              self.append(html);
            }
          });
        },
        wrap: function(html) {
          var isFunction = jQuery.isFunction(html);
          return this.each(function(i) {
            jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
          });
        },
        unwrap: function() {
          return this.parent().each(function() {
            if (!jQuery.nodeName(this, "body")) {
              jQuery(this).replaceWith(this.childNodes);
            }
          }).end();
        }
      });
      jQuery.expr.filters.hidden = function(elem) {
        return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;
      };
      jQuery.expr.filters.visible = function(elem) {
        return !jQuery.expr.filters.hidden(elem);
      };
      var r20 = /%20/g,
          rbracket = /\[\]$/,
          rCRLF = /\r?\n/g,
          rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
          rsubmittable = /^(?:input|select|textarea|keygen)/i;
      function buildParams(prefix, obj, traditional, add) {
        var name;
        if (jQuery.isArray(obj)) {
          jQuery.each(obj, function(i, v) {
            if (traditional || rbracket.test(prefix)) {
              add(prefix, v);
            } else {
              buildParams(prefix + "[" + (typeof v === "object" ? i : "") + "]", v, traditional, add);
            }
          });
        } else if (!traditional && jQuery.type(obj) === "object") {
          for (name in obj) {
            buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
          }
        } else {
          add(prefix, obj);
        }
      }
      jQuery.param = function(a, traditional) {
        var prefix,
            s = [],
            add = function(key, value) {
              value = jQuery.isFunction(value) ? value() : (value == null ? "" : value);
              s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value);
            };
        if (traditional === undefined) {
          traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
        }
        if (jQuery.isArray(a) || (a.jquery && !jQuery.isPlainObject(a))) {
          jQuery.each(a, function() {
            add(this.name, this.value);
          });
        } else {
          for (prefix in a) {
            buildParams(prefix, a[prefix], traditional, add);
          }
        }
        return s.join("&").replace(r20, "+");
      };
      jQuery.fn.extend({
        serialize: function() {
          return jQuery.param(this.serializeArray());
        },
        serializeArray: function() {
          return this.map(function() {
            var elements = jQuery.prop(this, "elements");
            return elements ? jQuery.makeArray(elements) : this;
          }).filter(function() {
            var type = this.type;
            return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
          }).map(function(i, elem) {
            var val = jQuery(this).val();
            return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function(val) {
              return {
                name: elem.name,
                value: val.replace(rCRLF, "\r\n")
              };
            }) : {
              name: elem.name,
              value: val.replace(rCRLF, "\r\n")
            };
          }).get();
        }
      });
      jQuery.ajaxSettings.xhr = function() {
        try {
          return new XMLHttpRequest();
        } catch (e) {}
      };
      var xhrId = 0,
          xhrCallbacks = {},
          xhrSuccessStatus = {
            0: 200,
            1223: 204
          },
          xhrSupported = jQuery.ajaxSettings.xhr();
      if (window.attachEvent) {
        window.attachEvent("onunload", function() {
          for (var key in xhrCallbacks) {
            xhrCallbacks[key]();
          }
        });
      }
      support.cors = !!xhrSupported && ("withCredentials" in xhrSupported);
      support.ajax = xhrSupported = !!xhrSupported;
      jQuery.ajaxTransport(function(options) {
        var callback;
        if (support.cors || xhrSupported && !options.crossDomain) {
          return {
            send: function(headers, complete) {
              var i,
                  xhr = options.xhr(),
                  id = ++xhrId;
              xhr.open(options.type, options.url, options.async, options.username, options.password);
              if (options.xhrFields) {
                for (i in options.xhrFields) {
                  xhr[i] = options.xhrFields[i];
                }
              }
              if (options.mimeType && xhr.overrideMimeType) {
                xhr.overrideMimeType(options.mimeType);
              }
              if (!options.crossDomain && !headers["X-Requested-With"]) {
                headers["X-Requested-With"] = "XMLHttpRequest";
              }
              for (i in headers) {
                xhr.setRequestHeader(i, headers[i]);
              }
              callback = function(type) {
                return function() {
                  if (callback) {
                    delete xhrCallbacks[id];
                    callback = xhr.onload = xhr.onerror = null;
                    if (type === "abort") {
                      xhr.abort();
                    } else if (type === "error") {
                      complete(xhr.status, xhr.statusText);
                    } else {
                      complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, typeof xhr.responseText === "string" ? {text: xhr.responseText} : undefined, xhr.getAllResponseHeaders());
                    }
                  }
                };
              };
              xhr.onload = callback();
              xhr.onerror = callback("error");
              callback = xhrCallbacks[id] = callback("abort");
              try {
                xhr.send(options.hasContent && options.data || null);
              } catch (e) {
                if (callback) {
                  throw e;
                }
              }
            },
            abort: function() {
              if (callback) {
                callback();
              }
            }
          };
        }
      });
      jQuery.ajaxSetup({
        accepts: {script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},
        contents: {script: /(?:java|ecma)script/},
        converters: {"text script": function(text) {
            jQuery.globalEval(text);
            return text;
          }}
      });
      jQuery.ajaxPrefilter("script", function(s) {
        if (s.cache === undefined) {
          s.cache = false;
        }
        if (s.crossDomain) {
          s.type = "GET";
        }
      });
      jQuery.ajaxTransport("script", function(s) {
        if (s.crossDomain) {
          var script,
              callback;
          return {
            send: function(_, complete) {
              script = jQuery("<script>").prop({
                async: true,
                charset: s.scriptCharset,
                src: s.url
              }).on("load error", callback = function(evt) {
                script.remove();
                callback = null;
                if (evt) {
                  complete(evt.type === "error" ? 404 : 200, evt.type);
                }
              });
              document.head.appendChild(script[0]);
            },
            abort: function() {
              if (callback) {
                callback();
              }
            }
          };
        }
      });
      var oldCallbacks = [],
          rjsonp = /(=)\?(?=&|$)|\?\?/;
      jQuery.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function() {
          var callback = oldCallbacks.pop() || (jQuery.expando + "_" + (nonce++));
          this[callback] = true;
          return callback;
        }
      });
      jQuery.ajaxPrefilter("json jsonp", function(s, originalSettings, jqXHR) {
        var callbackName,
            overwritten,
            responseContainer,
            jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && !(s.contentType || "").indexOf("application/x-www-form-urlencoded") && rjsonp.test(s.data) && "data");
        if (jsonProp || s.dataTypes[0] === "jsonp") {
          callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
          if (jsonProp) {
            s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
          } else if (s.jsonp !== false) {
            s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
          }
          s.converters["script json"] = function() {
            if (!responseContainer) {
              jQuery.error(callbackName + " was not called");
            }
            return responseContainer[0];
          };
          s.dataTypes[0] = "json";
          overwritten = window[callbackName];
          window[callbackName] = function() {
            responseContainer = arguments;
          };
          jqXHR.always(function() {
            window[callbackName] = overwritten;
            if (s[callbackName]) {
              s.jsonpCallback = originalSettings.jsonpCallback;
              oldCallbacks.push(callbackName);
            }
            if (responseContainer && jQuery.isFunction(overwritten)) {
              overwritten(responseContainer[0]);
            }
            responseContainer = overwritten = undefined;
          });
          return "script";
        }
      });
      jQuery.parseHTML = function(data, context, keepScripts) {
        if (!data || typeof data !== "string") {
          return null;
        }
        if (typeof context === "boolean") {
          keepScripts = context;
          context = false;
        }
        context = context || document;
        var parsed = rsingleTag.exec(data),
            scripts = !keepScripts && [];
        if (parsed) {
          return [context.createElement(parsed[1])];
        }
        parsed = jQuery.buildFragment([data], context, scripts);
        if (scripts && scripts.length) {
          jQuery(scripts).remove();
        }
        return jQuery.merge([], parsed.childNodes);
      };
      var _load = jQuery.fn.load;
      jQuery.fn.load = function(url, params, callback) {
        if (typeof url !== "string" && _load) {
          return _load.apply(this, arguments);
        }
        var selector,
            type,
            response,
            self = this,
            off = url.indexOf(" ");
        if (off >= 0) {
          selector = jQuery.trim(url.slice(off));
          url = url.slice(0, off);
        }
        if (jQuery.isFunction(params)) {
          callback = params;
          params = undefined;
        } else if (params && typeof params === "object") {
          type = "POST";
        }
        if (self.length > 0) {
          jQuery.ajax({
            url: url,
            type: type,
            dataType: "html",
            data: params
          }).done(function(responseText) {
            response = arguments;
            self.html(selector ? jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) : responseText);
          }).complete(callback && function(jqXHR, status) {
            self.each(callback, response || [jqXHR.responseText, status, jqXHR]);
          });
        }
        return this;
      };
      jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function(i, type) {
        jQuery.fn[type] = function(fn) {
          return this.on(type, fn);
        };
      });
      jQuery.expr.filters.animated = function(elem) {
        return jQuery.grep(jQuery.timers, function(fn) {
          return elem === fn.elem;
        }).length;
      };
      var docElem = window.document.documentElement;
      function getWindow(elem) {
        return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 && elem.defaultView;
      }
      jQuery.offset = {setOffset: function(elem, options, i) {
          var curPosition,
              curLeft,
              curCSSTop,
              curTop,
              curOffset,
              curCSSLeft,
              calculatePosition,
              position = jQuery.css(elem, "position"),
              curElem = jQuery(elem),
              props = {};
          if (position === "static") {
            elem.style.position = "relative";
          }
          curOffset = curElem.offset();
          curCSSTop = jQuery.css(elem, "top");
          curCSSLeft = jQuery.css(elem, "left");
          calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1;
          if (calculatePosition) {
            curPosition = curElem.position();
            curTop = curPosition.top;
            curLeft = curPosition.left;
          } else {
            curTop = parseFloat(curCSSTop) || 0;
            curLeft = parseFloat(curCSSLeft) || 0;
          }
          if (jQuery.isFunction(options)) {
            options = options.call(elem, i, curOffset);
          }
          if (options.top != null) {
            props.top = (options.top - curOffset.top) + curTop;
          }
          if (options.left != null) {
            props.left = (options.left - curOffset.left) + curLeft;
          }
          if ("using" in options) {
            options.using.call(elem, props);
          } else {
            curElem.css(props);
          }
        }};
      jQuery.fn.extend({
        offset: function(options) {
          if (arguments.length) {
            return options === undefined ? this : this.each(function(i) {
              jQuery.offset.setOffset(this, options, i);
            });
          }
          var docElem,
              win,
              elem = this[0],
              box = {
                top: 0,
                left: 0
              },
              doc = elem && elem.ownerDocument;
          if (!doc) {
            return ;
          }
          docElem = doc.documentElement;
          if (!jQuery.contains(docElem, elem)) {
            return box;
          }
          if (typeof elem.getBoundingClientRect !== strundefined) {
            box = elem.getBoundingClientRect();
          }
          win = getWindow(doc);
          return {
            top: box.top + win.pageYOffset - docElem.clientTop,
            left: box.left + win.pageXOffset - docElem.clientLeft
          };
        },
        position: function() {
          if (!this[0]) {
            return ;
          }
          var offsetParent,
              offset,
              elem = this[0],
              parentOffset = {
                top: 0,
                left: 0
              };
          if (jQuery.css(elem, "position") === "fixed") {
            offset = elem.getBoundingClientRect();
          } else {
            offsetParent = this.offsetParent();
            offset = this.offset();
            if (!jQuery.nodeName(offsetParent[0], "html")) {
              parentOffset = offsetParent.offset();
            }
            parentOffset.top += jQuery.css(offsetParent[0], "borderTopWidth", true);
            parentOffset.left += jQuery.css(offsetParent[0], "borderLeftWidth", true);
          }
          return {
            top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
            left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
          };
        },
        offsetParent: function() {
          return this.map(function() {
            var offsetParent = this.offsetParent || docElem;
            while (offsetParent && (!jQuery.nodeName(offsetParent, "html") && jQuery.css(offsetParent, "position") === "static")) {
              offsetParent = offsetParent.offsetParent;
            }
            return offsetParent || docElem;
          });
        }
      });
      jQuery.each({
        scrollLeft: "pageXOffset",
        scrollTop: "pageYOffset"
      }, function(method, prop) {
        var top = "pageYOffset" === prop;
        jQuery.fn[method] = function(val) {
          return access(this, function(elem, method, val) {
            var win = getWindow(elem);
            if (val === undefined) {
              return win ? win[prop] : elem[method];
            }
            if (win) {
              win.scrollTo(!top ? val : window.pageXOffset, top ? val : window.pageYOffset);
            } else {
              elem[method] = val;
            }
          }, method, val, arguments.length, null);
        };
      });
      jQuery.each(["top", "left"], function(i, prop) {
        jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function(elem, computed) {
          if (computed) {
            computed = curCSS(elem, prop);
            return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
          }
        });
      });
      jQuery.each({
        Height: "height",
        Width: "width"
      }, function(name, type) {
        jQuery.each({
          padding: "inner" + name,
          content: type,
          "": "outer" + name
        }, function(defaultExtra, funcName) {
          jQuery.fn[funcName] = function(margin, value) {
            var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
                extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
            return access(this, function(elem, type, value) {
              var doc;
              if (jQuery.isWindow(elem)) {
                return elem.document.documentElement["client" + name];
              }
              if (elem.nodeType === 9) {
                doc = elem.documentElement;
                return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
              }
              return value === undefined ? jQuery.css(elem, type, extra) : jQuery.style(elem, type, value, extra);
            }, type, chainable ? margin : undefined, chainable, null);
          };
        });
      });
      jQuery.fn.size = function() {
        return this.length;
      };
      jQuery.fn.andSelf = jQuery.fn.addBack;
      if (typeof define === "function" && define.amd) {
        define("jquery", [], function() {
          return jQuery;
        });
      }
      var _jQuery = window.jQuery,
          _$ = window.$;
      jQuery.noConflict = function(deep) {
        if (window.$ === jQuery) {
          window.$ = _$;
        }
        if (deep && window.jQuery === jQuery) {
          window.jQuery = _jQuery;
        }
        return jQuery;
      };
      if (typeof noGlobal === strundefined) {
        window.jQuery = window.$ = jQuery;
      }
      return jQuery;
    }));
  })(require("github:jspm/nodelibs-process@0.1.1"));
  global.define = __define;
  return module.exports;
});

System.register("npm:babel-runtime@5.8.24/core-js/map", ["npm:core-js@0.9.18/library/fn/map"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = {
    "default": require("npm:core-js@0.9.18/library/fn/map"),
    __esModule: true
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:trie-search@0.1.1/src/TrieSearch", ["npm:hasharray@0.3.0"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var HashArray = require("npm:hasharray@0.3.0");
  var MAX_CACHE_SIZE = 64;
  var TrieSearch = function(keyFields, options) {
    this.options = options || {};
    this.options.ignoreCase = (this.options.ignoreCase === undefined) ? true : this.options.ignoreCase;
    this.options.maxCacheSize = this.options.maxCacheSize || MAX_CACHE_SIZE;
    this.options.cache = this.options.hasOwnProperty('cache') ? this.options.cache : true;
    this.options.splitOnRegEx = this.options.hasOwnProperty('splitOnRegEx') ? this.options.splitOnRegEx : /\s/g;
    this.keyFields = keyFields ? (keyFields instanceof Array ? keyFields : [keyFields]) : [];
    this.root = {};
    this.size = 0;
    this.getCache = new HashArray('key');
  };
  TrieSearch.prototype = {
    add: function(obj) {
      if (this.options.cache)
        this.clearCache();
      for (var k in this.keyFields) {
        var key = this.keyFields[k],
            val = obj[key];
        if (!val)
          continue;
        val = val.toString();
        val = this.options.ignoreCase ? val.toLowerCase() : val;
        if (this.options.splitOnRegEx !== undefined) {
          phrases = val.split(this.options.splitOnRegEx);
          for (var i = 0,
              l = phrases.length; i < l; i++)
            this.map(phrases[i], obj);
        } else
          this.map(val, obj);
      }
    },
    reset: function() {
      this.root = {};
      this.size = 0;
    },
    clearCache: function() {
      this.getCache = new HashArray('key');
    },
    cleanCache: function() {
      while (this.getCache.all.length > this.options.maxCacheSize)
        this.getCache.remove(this.getCache.all[0]);
    },
    addFromObject: function(obj, valueField) {
      if (this.options.cache)
        this.clearCache();
      valueField = valueField || 'value';
      if (this.keyFields.indexOf('_key_') == -1)
        this.keyFields.push('_key_');
      for (var key in obj) {
        var o = {_key_: key};
        o[valueField] = obj[key];
        this.add(o);
      }
    },
    map: function(key, value) {
      if (this.options.cache)
        this.clearCache();
      var keyArr = this.keyToArr(key),
          self = this;
      insert(keyArr, value, this.root);
      function insert(keyArr, value, node) {
        if (keyArr.length == 0) {
          node['value'] = node['value'] || [];
          node['value'].push(value);
          return ;
        }
        var k = keyArr.shift();
        if (!node[k])
          self.size++;
        node[k] = node[k] || {};
        insert(keyArr, value, node[k]);
      }
    },
    keyToArr: function(key) {
      var keyArr;
      if (this.options.min && this.options.min > 1) {
        if (key.length < this.options.min)
          return [];
        keyArr = [key.substr(0, this.options.min)];
        keyArr = keyArr.concat(key.substr(this.options.min).split(''));
      } else
        keyArr = key.split('');
      return keyArr;
    },
    findNode: function(key) {
      if (this.options.min > 0 && key.length < this.options.min)
        return [];
      return f(this.keyToArr(key), this.root);
      function f(keyArr, node) {
        if (!node)
          return undefined;
        if (keyArr.length == 0)
          return node;
        var k = keyArr.shift();
        return f(keyArr, node[k]);
      }
    },
    _get: function(phrase) {
      phrase = this.options.ignoreCase ? phrase.toLowerCase() : phrase;
      var c;
      if (this.options.cache && (c = this.getCache.get(phrase)))
        return c.value;
      var ret = undefined,
          haKeyFields = this.options.indexField ? [this.options.indexField] : this.keyFields;
      words = this.options.splitOnRegEx ? phrase.split(this.options.splitOnRegEx) : [phrase];
      for (var w = 0,
          l = words.length; w < l; w++) {
        if (this.options.min && words[w].length < this.options.min)
          continue;
        var temp = new HashArray(haKeyFields);
        if (node = this.findNode(words[w]))
          aggregate(node, temp);
        ret = ret ? ret.intersection(temp) : temp;
      }
      var v = ret ? ret.all : [];
      if (this.options.cache) {
        this.getCache.add({
          key: phrase,
          value: v
        });
        this.cleanCache();
      }
      return v;
      function aggregate(node, ha) {
        if (node.value && node.value.length)
          ha.addAll(node.value);
        for (var k in node)
          if (k != 'value')
            aggregate(node[k], ha);
      }
    },
    get: function(phrases) {
      var self = this,
          haKeyFields = this.options.indexField ? [this.options.indexField] : this.keyFields,
          ret = undefined;
      phrases = (phrases instanceof Array) ? phrases : [phrases];
      for (var i = 0,
          l = phrases.length; i < l; i++) {
        var temp = this._get(phrases[i]);
        ret = ret ? ret.addAll(temp) : new HashArray(haKeyFields).addAll(temp);
      }
      return ret.all;
    }
  };
  module.exports = TrieSearch;
  global.define = __define;
  return module.exports;
});

System.register("npm:jquery@2.1.4", ["npm:jquery@2.1.4/dist/jquery"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = require("npm:jquery@2.1.4/dist/jquery");
  global.define = __define;
  return module.exports;
});

System.register("npm:trie-search@0.1.1/index", ["npm:trie-search@0.1.1/src/TrieSearch"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = require("npm:trie-search@0.1.1/src/TrieSearch");
  global.define = __define;
  return module.exports;
});

System.register("npm:trie-search@0.1.1", ["npm:trie-search@0.1.1/index"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = require("npm:trie-search@0.1.1/index");
  global.define = __define;
  return module.exports;
});

System.register('promo-manager/layout-view/layout-view-consts', [], function (_export) {
	'use strict';

	return {
		setters: [],
		execute: function () {
			_export('default', {
				Selectors: {
					LAYOUTVIEW_VIEWPORT: '.layoutview-body',
					LAYOUTVIEW_DRAGGABLE_ORIGIN: '.layout-viewport',
					// LAYOUTVIEW_PAGEVERSION: '.layoutview-pageversion',
					LAYOUTVIEW_PAGEVERSION_UI: '.layoutview-pageversion, .pageversion-grip, .layoutview-block',
					LAYOUTVIEW_PAGEVERSION_GRIP: '.pageversion-grip .grip-center',
					// LAYOUTVIEW_BLOCK: '.layoutview-block',
					LAYOUTVIEW_OFFER_GRIP: '.offer-grip .grip-center',
					LAYOUTVIEW_OFFER: '.offer-content',
					LAYOUTVIEW_OFFER_UI: '.offer-grip .grip-center, .offer-content',
					LAYOUTVIEW_DOUBLE_CLICKABLE: '.pageversion-grip .grip-center, .offer-grip .grip-center, .offer-content',
					LAYOUTVIEW_CLIPBOARD_GLOBAL: '.clipboard-global-target',
					LAYOUTVIEW_CLIPBOARD_LOCAL: '.clipboard-local-target',
					LAYOUTVIEW_DRAGGED: '.dragged-object',
					LAYOUTVIEW_CLIPBOARD_OFFER: '.clipboard-item.offer'
				},
				//LAYOUTVIEW_CLIPBOARD_PAGE_VERSION: '.clipboard-item.page-version',
				// 0 represents Centimeters
				// 1 represents Inches
				LAYOUT_VIEW_UNITS: {
					0: 15,
					1: 15 * 2.54
				},
				LAYOUT_VIEW_UNIT_CENTIMETERS: 0,
				LAYOUT_VIEW_DATE_FORMAT: 'MM/dd/yyyy',
				RFC_CHANGE_REQUEST_STATUS_ACTIVE_LIST_LABELS: ['0-rejected', '1-approver', '2-approver'],
				RFC_CHANGE_REQUEST_STATUS_ACTIVE_LIST: [0, 1, 2],
				DELTA_AMOUNT_WHEEL: 1.2,
				DELTA_AMOUNT_KEY: 20,
				MODE_CAMERA: 'camera',
				MODE_PAGE_DRAG: 'page-drag',
				MODE_OFFER_DRAG: 'offer-drag',
				INT_32_MAX: Math.pow(2, 32 - 1) - 1,
				DRAGCARD_WIDTH: 150,
				DRAGCARD_HEIGHT: 50,
				TYPE_PAGE: 'page',
				TYPE_PAGE_GRIP: 'page-grip',
				TYPE_BLOCK: 'block',
				ADD_PAGE_X_OFFSET: 20,
				ADD_PAGE_Y_OFFSET: 20,
				ADD_PAGE_X_INITIAL_POSITION_DEFAULT: 10,
				ADD_PAGE_Y_INITIAL_POSITION_DEFAULT: 200,
				ADD_PAGE_Y_PAGE_GRIP_OFFSET: 20,
				LAYOUT_VIEW_PAGE_GRID_VERSION_HEIGHT_DEFAULT: 11,
				LAYOUT_VIEW_PAGE_GRID_VERSION_WIDTH_DEFAULT: 8.5,
				LAYOUT_VIEW_UNIT_DEFAULT: 1,
				EDIT_MODE: 'edit',
				DELETE_MODE: 'delete',
				TEMPLATE_CLEAR_MODE: 'template_clear',
				TEMPLATE_APPLY_MODE: 'template_apply',
				MOVE_OFFERS_MODE: 'move_offers',
				ADD_TO_BASKET_MODE: 'add_to_basket',
				LAYOUT_PAGE_VERSION_TEMPLATE_RECORDS_REQUEST: 4,

				AUTO_ARRANGE_DEFAULT_MODE: true,
				AUTO_ARRANGE_X_ORIGIN: 50,
				AUTO_ARRANGE_Y_ORIGIN: 50,
				AUTO_ARRANGE_X_MARGIN: 50,
				AUTO_ARRANGE_Y_MARGIN: 50,
				AUTO_ARRANGE_W: 1500, // 4*(8.5 * 15*2.54) + 3*(50)

				SINGLE_PAGEVERSION_VIEW_PADDING: [150, 50], // Screen space units to contain the page version to

				DOUBLE_CLICK_MAX_DELTA: { X: 5, Y: 5, T: 350 },

				PAGE_GRIP_HEIGHT: 12 * 1.4, // World space units, should correspond to BASELINE_FONT_SIZE
				BASELINE_FONT_SIZE: 12,

				DEFAULT_PAGE_HEIGHT: 11,
				DEFAULT_PAGE_WIDTH: 8.5,
				//FIXME - Candidate for a customer constants file
				DISPLAY_DEPTH: 2,
				GEAR_ICON_PATH: 'crosscap-angular/common/themes/explosive-puppy/images/Gear_grey_small.svg',
				GEAR_ICON_PATH_TEST: 'common/themes/explosive-puppy/images/Gear_grey_small.svg'

			});
		}
	};
});
System.register('helpers/consts', [], function (_export) {
	'use strict';

	return {
		setters: [],
		execute: function () {
			_export('default', {
				STRING_COMPARATOR_FUNCTION: 'stringComparator'

			});
		}
	};
});
System.register('promo-manager/layout-view/model/change-request', ['npm:babel-runtime@5.8.24/helpers/create-class', 'npm:babel-runtime@5.8.24/helpers/class-call-check', 'promo-manager/layout-view/layout-view-consts'], function (_export) {
	var _createClass, _classCallCheck, LayoutConsts, ChangeRequest;

	return {
		setters: [function (_npmBabelRuntime5824HelpersCreateClass) {
			_createClass = _npmBabelRuntime5824HelpersCreateClass['default'];
		}, function (_npmBabelRuntime5824HelpersClassCallCheck) {
			_classCallCheck = _npmBabelRuntime5824HelpersClassCallCheck['default'];
		}, function (_promoManagerLayoutViewLayoutViewConsts) {
			LayoutConsts = _promoManagerLayoutViewLayoutViewConsts['default'];
		}],
		execute: function () {
			'use strict';

			ChangeRequest = (function () {
				function ChangeRequest(data) {
					_classCallCheck(this, ChangeRequest);

					this.rfcId = data.id;
					this.changeStatusId = angular.isObject(data.changeStatus) ? data.changeStatus.id : -1;
				}

				_createClass(ChangeRequest, [{
					key: 'isActive',
					value: function isActive(rfcStatusMap) {
						var activeStatuses = LayoutConsts.RFC_CHANGE_REQUEST_STATUS_ACTIVE_LIST.join('|');
						var regex = new RegExp('^(' + activeStatuses + ')$');
						return regex.test(rfcStatusMap.get(this.changeStatusId));
					}
				}]);

				return ChangeRequest;
			})();

			_export('default', ChangeRequest);
		}
	};
});
System.register("promo-manager/layout-view/model/offer-version-manager", ["npm:babel-runtime@5.8.24/helpers/create-class", "npm:babel-runtime@5.8.24/helpers/class-call-check"], function (_export) {
    var _createClass, _classCallCheck, OfferVersionManager;

    return {
        setters: [function (_npmBabelRuntime5824HelpersCreateClass) {
            _createClass = _npmBabelRuntime5824HelpersCreateClass["default"];
        }, function (_npmBabelRuntime5824HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5824HelpersClassCallCheck["default"];
        }],
        execute: function () {
            "use strict";

            OfferVersionManager = (function () {
                function OfferVersionManager(data) {
                    _classCallCheck(this, OfferVersionManager);

                    var offer = data.offer;
                    var offerVersionFeaturedSku = data.offerVersionFeaturedSku;
                    //context menu
                    this.open = false;

                    this.id = data.id;
                    this.offer = angular.isObject(offer) ? offer : null;
                    this.offerVersionFeaturedSku = angular.isObject(offerVersionFeaturedSku) ? offerVersionFeaturedSku : null;
                    this.name = data.name;
                    this.hierarchyId = data.merchandiseHierarchy ? data.merchandiseHierarchy.id : -1;
                    this.merchandiseHierarchyList = (data.merchandiseHierarchyList || [{ id: this.hierarchyId }]).map(function (mh) {
                        return mh.id;
                    });
                }

                _createClass(OfferVersionManager, [{
                    key: "getOffer",
                    value: function getOffer() {
                        return this.offer;
                    }
                }, {
                    key: "getOfferVersionFeaturedSku",
                    value: function getOfferVersionFeaturedSku() {
                        return this.offerVersionFeaturedSku;
                    }
                }]);

                return OfferVersionManager;
            })();

            _export("default", OfferVersionManager);
        }
    };
});
System.register('promo-manager/layout-view/model/block-group-to-blockId-manager', ['npm:babel-runtime@5.8.24/helpers/create-class', 'npm:babel-runtime@5.8.24/helpers/class-call-check', 'npm:babel-runtime@5.8.24/core-js/map', 'helpers/util'], function (_export) {
	var _createClass, _classCallCheck, _Map, Util, BlockGroupToBlockIdManager;

	return {
		setters: [function (_npmBabelRuntime5824HelpersCreateClass) {
			_createClass = _npmBabelRuntime5824HelpersCreateClass['default'];
		}, function (_npmBabelRuntime5824HelpersClassCallCheck) {
			_classCallCheck = _npmBabelRuntime5824HelpersClassCallCheck['default'];
		}, function (_npmBabelRuntime5824CoreJsMap) {
			_Map = _npmBabelRuntime5824CoreJsMap['default'];
		}, function (_helpersUtil) {
			Util = _helpersUtil['default'];
		}],
		execute: function () {
			'use strict';

			BlockGroupToBlockIdManager = (function () {
				function BlockGroupToBlockIdManager() {
					_classCallCheck(this, BlockGroupToBlockIdManager);

					this.blockGroups = new _Map();
				}

				_createClass(BlockGroupToBlockIdManager, [{
					key: 'addBlockGroup',
					value: function addBlockGroup(groupId, groupName, blockIds) {
						this.removeBlockGroup(groupId);
						this.blockGroups.set(groupId, {
							name: groupName,
							ids: blockIds
						});
					}
				}, {
					key: 'addBlockId',
					value: function addBlockId(blockGroupId, blockId) {
						this.removeBlockId(blockGroupId, blockId);
						this.getBlockIds(blockGroupId).push(blockId);
					}
				}, {
					key: 'removeBlockId',
					value: function removeBlockId(blockGroupId, blockId) {
						var blockIds = this.getBlockIds(blockGroupId);
						Util.removeFromUnsortedArray(blockIds, blockId);
					}
				}, {
					key: 'removeBlockGroup',
					value: function removeBlockGroup(blockGroupId) {
						this.blockGroups['delete'](blockGroupId);
					}
				}, {
					key: 'removeAllBlockGroups',
					value: function removeAllBlockGroups(blockGroupId) {
						this.blockGroups.clear();
					}
				}, {
					key: 'getBlockGroupBlockIdSet',
					value: function getBlockGroupBlockIdSet(blockGroupId) {
						return this.blockGroups.get(blockGroupId);
					}
				}, {
					key: 'getBlockIds',
					value: function getBlockIds(blockGroupId) {
						return this.getBlockGroupBlockIdSet(blockGroupId).ids;
					}

					// (the order of the block list may potentially
					// be rendered as useful information)
				}]);

				return BlockGroupToBlockIdManager;
			})();

			_export('default', BlockGroupToBlockIdManager);
		}
	};
});
System.register("promo-manager/layout-view/model/permitted-action", ["npm:babel-runtime@5.8.24/helpers/class-call-check"], function (_export) {
	var _classCallCheck, PermittedAction;

	return {
		setters: [function (_npmBabelRuntime5824HelpersClassCallCheck) {
			_classCallCheck = _npmBabelRuntime5824HelpersClassCallCheck["default"];
		}],
		execute: function () {
			"use strict";

			PermittedAction = function PermittedAction(name, action) {
				_classCallCheck(this, PermittedAction);

				this.id = action;
				this.name = name;
			};

			_export("default", PermittedAction);
		}
	};
});
System.register("promo-manager/layout-view/helpers/layout-view-ui-element", ["npm:babel-runtime@5.8.24/helpers/create-class", "npm:babel-runtime@5.8.24/helpers/class-call-check"], function (_export) {
	var _createClass, _classCallCheck, LayoutViewUiElement;

	return {
		setters: [function (_npmBabelRuntime5824HelpersCreateClass) {
			_createClass = _npmBabelRuntime5824HelpersCreateClass["default"];
		}, function (_npmBabelRuntime5824HelpersClassCallCheck) {
			_classCallCheck = _npmBabelRuntime5824HelpersClassCallCheck["default"];
		}],
		execute: function () {
			"use strict";

			LayoutViewUiElement = (function () {
				function LayoutViewUiElement() {
					_classCallCheck(this, LayoutViewUiElement);

					this._worldVec0 = null;
					this._worldVec1 = null;
					this._cameraSpaceStyles = {};
				}

				_createClass(LayoutViewUiElement, [{
					key: "updateStyles",
					value: function updateStyles(cameraMat4) {}
				}, {
					key: "getObjectSpacePoints",
					value: function getObjectSpacePoints() {}
				}, {
					key: "calculateWorldSpaceCoordinates",
					value: function calculateWorldSpaceCoordinates() {}
				}]);

				return LayoutViewUiElement;
			})();

			_export("default", LayoutViewUiElement);
		}
	};
});
System.register("promo-manager/layout-view/model/vehicle-version", ["npm:babel-runtime@5.8.24/helpers/class-call-check"], function (_export) {
	var _classCallCheck, VehicleVersion;

	return {
		setters: [function (_npmBabelRuntime5824HelpersClassCallCheck) {
			_classCallCheck = _npmBabelRuntime5824HelpersClassCallCheck["default"];
		}],
		execute: function () {
			"use strict";

			VehicleVersion = function VehicleVersion(data) {
				_classCallCheck(this, VehicleVersion);

				this.id = data.id;
				this.name = data.name;
			};

			_export("default", VehicleVersion);
		}
	};
});
System.register('promo-manager/layout-view/model/spreads-group', ['npm:babel-runtime@5.8.24/helpers/create-class', 'npm:babel-runtime@5.8.24/helpers/class-call-check', 'helpers/util'], function (_export) {
	var _createClass, _classCallCheck, Util, SpreadsGroup;

	return {
		setters: [function (_npmBabelRuntime5824HelpersCreateClass) {
			_createClass = _npmBabelRuntime5824HelpersCreateClass['default'];
		}, function (_npmBabelRuntime5824HelpersClassCallCheck) {
			_classCallCheck = _npmBabelRuntime5824HelpersClassCallCheck['default'];
		}, function (_helpersUtil) {
			Util = _helpersUtil['default'];
		}],
		execute: function () {
			'use strict';

			SpreadsGroup = (function () {
				function SpreadsGroup(data) {
					_classCallCheck(this, SpreadsGroup);

					this.pageIds = data;
					this.pageToIndexMap = Util.arrayAsMap(this.pageIds);
				}

				_createClass(SpreadsGroup, [{
					key: 'getPageIdFromIndex',
					value: function getPageIdFromIndex(index) {
						return this.pageIds[index];
					}
				}, {
					key: 'getIndexFromPageId',
					value: function getIndexFromPageId(pageId) {
						return this.pageToIndexMap.get(pageId);
					}

					// Also we have to be careful about deleting or
					// invalidating removed assets since we are
					// scattering references to them all over
				}]);

				return SpreadsGroup;
			})();

			_export('default', SpreadsGroup);
		}
	};
});
System.register('promo-manager/layout-view/model/page', ['npm:babel-runtime@5.8.24/helpers/create-class', 'npm:babel-runtime@5.8.24/helpers/class-call-check'], function (_export) {
	var _createClass, _classCallCheck, Page;

	return {
		setters: [function (_npmBabelRuntime5824HelpersCreateClass) {
			_createClass = _npmBabelRuntime5824HelpersCreateClass['default'];
		}, function (_npmBabelRuntime5824HelpersClassCallCheck) {
			_classCallCheck = _npmBabelRuntime5824HelpersClassCallCheck['default'];
		}],
		execute: function () {
			'use strict';

			Page = (function () {
				function Page(data, xPos, yPos, zPos) {
					_classCallCheck(this, Page);

					if (!xPos) {
						xPos = 0;
					}
					if (!yPos) {
						yPos = 0;
					}
					if (!zPos) {
						zPos = 0;
					}

					this.id = data.id;
					this.spreadId = null;
					if (data.spread) {
						this.spreadId = angular.isObject(data.spread) ? '' + data.spread.id : null;
					}
					this.index = data.position;
					this.position = {
						x: data.x ? data.x : xPos, // Make sure to modify by reference regardless of
						y: data.y ? data.y : yPos, // which layout or page version is being manipulated
						z: data.z ? data.z : zPos // so the value is shared across all dependents
					};
				}

				_createClass(Page, [{
					key: 'getPageNumber',
					value: function getPageNumber() {
						return this.index;
					}
				}, {
					key: 'getPageId',
					value: function getPageId() {
						return this.id;
					}
				}, {
					key: 'getZindex',
					value: function getZindex() {
						return this.position.z;
					}
				}, {
					key: 'getPosX',
					value: function getPosX() {
						return this.position.x;
					}
				}, {
					key: 'getPosY',
					value: function getPosY() {
						return this.position.y;
					}
				}, {
					key: 'getPos',
					value: function getPos() {
						return this.position;
					}
				}, {
					key: 'isInSpreadGroup',
					value: function isInSpreadGroup() {
						if (this.spreadId) {
							return true;
						}
						return false;
					}
				}]);

				return Page;
			})();

			_export('default', Page);
		}
	};
});
System.register('promo-manager/layout-view/model/market-to-page-versionId-manager', ['npm:babel-runtime@5.8.24/helpers/create-class', 'npm:babel-runtime@5.8.24/helpers/class-call-check', 'npm:babel-runtime@5.8.24/core-js/map', 'helpers/util'], function (_export) {
	var _createClass, _classCallCheck, _Map, Util, MarketToPageVersionIdManager;

	return {
		setters: [function (_npmBabelRuntime5824HelpersCreateClass) {
			_createClass = _npmBabelRuntime5824HelpersCreateClass['default'];
		}, function (_npmBabelRuntime5824HelpersClassCallCheck) {
			_classCallCheck = _npmBabelRuntime5824HelpersClassCallCheck['default'];
		}, function (_npmBabelRuntime5824CoreJsMap) {
			_Map = _npmBabelRuntime5824CoreJsMap['default'];
		}, function (_helpersUtil) {
			Util = _helpersUtil['default'];
		}],
		execute: function () {
			'use strict';

			MarketToPageVersionIdManager = (function () {
				function MarketToPageVersionIdManager() {
					_classCallCheck(this, MarketToPageVersionIdManager);

					this.marketPageVersions = new _Map();
				}

				_createClass(MarketToPageVersionIdManager, [{
					key: 'getMarketPageVersionIdSet',
					value: function getMarketPageVersionIdSet(marketId) {
						var mpv = this.marketPageVersions;
						return mpv.get(marketId) || mpv.set(marketId, []).get(marketId);
					}
				}, {
					key: 'add',
					value: function add(pageVersion) {
						var _this = this;

						pageVersion.marketIds.forEach(function (marketId) {
							var pageVersionIdList = _this.getMarketPageVersionIdSet(marketId);
							Util.insertIntoUniqueSortedArray(pageVersionIdList, pageVersion.id);
						});
					}
				}, {
					key: 'remove',
					value: function remove(pageVersion) {
						var _this2 = this;

						pageVersion.marketIds.forEach(function (marketId) {
							var pageVersionIdList = _this2.getMarketPageVersionIdSet(marketId);
							Util.removeFromSortedArray(pageVersionIdList, pageVersion.id);
						});
					}
				}, {
					key: 'getPageVersionIds',
					value: function getPageVersionIds(marketId) {
						return this.getMarketPageVersionIdSet(marketId);
					}
				}]);

				return MarketToPageVersionIdManager;
			})();

			_export('default', MarketToPageVersionIdManager);
		}
	};
});
System.register("promo-manager/layout-view/clipboard/clipboard", ["npm:babel-runtime@5.8.24/helpers/create-class", "npm:babel-runtime@5.8.24/helpers/class-call-check"], function (_export) {
	var _createClass, _classCallCheck, Clipboard;

	return {
		setters: [function (_npmBabelRuntime5824HelpersCreateClass) {
			_createClass = _npmBabelRuntime5824HelpersCreateClass["default"];
		}, function (_npmBabelRuntime5824HelpersClassCallCheck) {
			_classCallCheck = _npmBabelRuntime5824HelpersClassCallCheck["default"];
		}],
		execute: function () {
			"use strict";

			Clipboard = (function () {
				function Clipboard(API) {
					_classCallCheck(this, Clipboard);

					this.API = API;
					this.setData([], 0, 0, 0);
					this.loading = false;
				}

				_createClass(Clipboard, [{
					key: "setLoading",
					value: function setLoading(loading) {
						this.loading = loading;
					}
				}, {
					key: "setData",
					value: function setData(clipboardData, pageIndex, pageLength, total) {
						this.collection = clipboardData;
						this.pageIndex = pageIndex;
						this.pageLength = pageLength;
						this.total = total;

						this.startPosition = pageIndex * pageLength + 1;
						this.endPosition = Math.min(this.startPosition + this.collection.length);
					}
				}, {
					key: "isLoading",
					value: function isLoading() {
						return this.loading;
					}
				}, {
					key: "isFirst",
					value: function isFirst() {
						return this.pageIndex === 0;
					}
				}, {
					key: "isLast",
					value: function isLast() {
						return this.pageLength === 0 || this.pageIndex >= Math.ceil(total / this.pageLength) - 1;
					}
				}, {
					key: "forward",
					value: function forward() {
						if (this.isLast()) return;
						this.reload(this.pageIndex + 1, this.pageLength);
					}
				}, {
					key: "backward",
					value: function backward() {
						if (this.isFirst()) return;
						this.reload(this.pageIndex - 1, this.pageLength);
					}
				}, {
					key: "setPageIndex",
					value: function setPageIndex(pageIndex) {
						this.reload(pageIndex, this.pageLength);
					}
				}, {
					key: "setPageLength",
					value: function setPageLength(pageLength) {
						this.reload(0, pageLength);
					}
				}, {
					key: "refresh",
					value: function refresh() {
						this.reload(this.pageIndex, this.pageLength);
					}
				}, {
					key: "reload",
					value: function reload(pageIndex, pageLength) {
						// Abstract method implementing changes to the clipboard data and pagination
					}
				}]);

				return Clipboard;
			})();

			_export("default", Clipboard);
		}
	};
});
System.register("promo-manager/layout-view/clipboard/clipboard-layout-view", ["npm:babel-runtime@5.8.24/helpers/get", "npm:babel-runtime@5.8.24/helpers/inherits", "npm:babel-runtime@5.8.24/helpers/create-class", "npm:babel-runtime@5.8.24/helpers/class-call-check", "promo-manager/layout-view/clipboard/clipboard"], function (_export) {
	var _get, _inherits, _createClass, _classCallCheck, Clipboard, ClipboardLayoutView;

	return {
		setters: [function (_npmBabelRuntime5824HelpersGet) {
			_get = _npmBabelRuntime5824HelpersGet["default"];
		}, function (_npmBabelRuntime5824HelpersInherits) {
			_inherits = _npmBabelRuntime5824HelpersInherits["default"];
		}, function (_npmBabelRuntime5824HelpersCreateClass) {
			_createClass = _npmBabelRuntime5824HelpersCreateClass["default"];
		}, function (_npmBabelRuntime5824HelpersClassCallCheck) {
			_classCallCheck = _npmBabelRuntime5824HelpersClassCallCheck["default"];
		}, function (_promoManagerLayoutViewClipboardClipboard) {
			Clipboard = _promoManagerLayoutViewClipboardClipboard["default"];
		}],
		execute: function () {
			"use strict";

			ClipboardLayoutView = (function (_Clipboard) {
				_inherits(ClipboardLayoutView, _Clipboard);

				function ClipboardLayoutView(API, vehicleId, vehicleVersionId) {
					_classCallCheck(this, ClipboardLayoutView);

					_get(Object.getPrototypeOf(ClipboardLayoutView.prototype), "constructor", this).call(this, API);
					this.vehicleId = vehicleId;
					this.vehicleVersionId = vehicleVersionId;
					this.setPageLength(3);
				}

				_createClass(ClipboardLayoutView, [{
					key: "updateVehicleVersion",
					value: function updateVehicleVersion(vehicleVersionId) {
						if (this.vehicleVersionId === vehicleVersionId) return;
						this.vehicleVersionId = vehicleVersionId;
						this.refresh();
					}
				}, {
					key: "reload",
					value: function reload(pageIndex, pageLength) {
						var _this = this;

						// Need to wait async calls resolve the request parameters
						if (!(this.vehicleId > 0 && this.vehicleVersionId > 0)) return;

						this.setLoading(true);
						this.API.PromoManager.LayoutView.getLayoutViewClipboard(this.vehicleId, this.vehicleVersionId, pageIndex, pageLength).then(function (result) {
							var payload = result.data.data;
							_this.setData(payload.clipboardList, payload.pageIndex, payload.pageLength, payload.total);
						}, function (rejection) {
							console.log("Error getting layout view clipboard");
						})["finally"](function () {
							_this.setLoading(false);
						});
					}
				}]);

				return ClipboardLayoutView;
			})(Clipboard);

			_export("default", ClipboardLayoutView);
		}
	};
});
System.register("helpers/notifier", ["npm:babel-runtime@5.8.24/helpers/create-class", "npm:babel-runtime@5.8.24/helpers/class-call-check"], function (_export) {
    var _createClass, _classCallCheck, Notifier;

    return {
        setters: [function (_npmBabelRuntime5824HelpersCreateClass) {
            _createClass = _npmBabelRuntime5824HelpersCreateClass["default"];
        }, function (_npmBabelRuntime5824HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5824HelpersClassCallCheck["default"];
        }],
        execute: function () {
            //import toastr from 'toastr/toastr';
            //import 'toastr/toastr.css!';
            "use strict";

            Notifier = (function () {
                function Notifier($translate) {
                    _classCallCheck(this, Notifier);

                    if (window.toastr) {
                        this.toastr = window.toastr;
                        this.toastr.options = {
                            "closeButton": false,
                            "debug": false,
                            "positionClass": "toast-bottom-right",
                            "onclick": null,
                            "showDuration": "1000",
                            "hideDuration": "1000",
                            "timeOut": "5000",
                            "extendedTimeOut": "1000",
                            "showEasing": "swing",
                            "hideEasing": "linear",
                            "showMethod": "fadeIn",
                            "hideMethod": "fadeOut"
                        };
                    } else {
                        this.toastr = null;
                    }

                    this.$translate = $translate;
                }

                _createClass(Notifier, [{
                    key: "notify",
                    value: function notify(body, title, severity) {
                        if (this.toastr) {
                            this.toastr[severity || 'info'](body, title);
                        }
                        console.log(title + ' ' + body);
                    }
                }, {
                    key: "errorWith",
                    value: function errorWith(message) {
                        if (this.toastr) {
                            this.toastr['error'](this.$translate.instant(message));
                        }
                        console.log(this.$translate.instant(message));
                    }
                }, {
                    key: "error",
                    value: function error(message) {
                        if (this.toastr) {
                            this.toastr['error'](this.$translate.instant(message));
                        }
                        console.log(this.$translate.instant(message));
                    }
                }, {
                    key: "info",
                    value: function info(message) {
                        if (this.toastr) {
                            this.toastr['info'](this.$translate.instant(message));
                        }
                        console.log(this.$translate.instant(message));
                    }
                }, {
                    key: "warn",
                    value: function warn(message) {
                        if (this.toastr) {
                            this.toastr['warning'](this.$translate.instant(message));
                        }
                        console.log(this.$translate.instant(message));
                    }
                }]);

                return Notifier;
            })();

            _export("default", Notifier);
        }
    };
});
System.register('promo-manager/helpers/merchandise-hierarchy-helpers', ['npm:babel-runtime@5.8.24/helpers/create-class', 'npm:babel-runtime@5.8.24/helpers/class-call-check', 'npm:trie-search@0.1.1', 'helpers/tree-map', 'helpers/util', 'helpers/notifier'], function (_export) {
    var _createClass, _classCallCheck, TrieSearch, TreeMap, Util, Notifier, MerchandiseHierarchyHelpers;

    return {
        setters: [function (_npmBabelRuntime5824HelpersCreateClass) {
            _createClass = _npmBabelRuntime5824HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5824HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5824HelpersClassCallCheck['default'];
        }, function (_npmTrieSearch011) {
            TrieSearch = _npmTrieSearch011['default'];
        }, function (_helpersTreeMap) {
            TreeMap = _helpersTreeMap['default'];
        }, function (_helpersUtil) {
            Util = _helpersUtil['default'];
        }, function (_helpersNotifier) {
            Notifier = _helpersNotifier['default'];
        }],
        execute: function () {
            'use strict';

            MerchandiseHierarchyHelpers = (function () {
                function MerchandiseHierarchyHelpers() {
                    _classCallCheck(this, MerchandiseHierarchyHelpers);
                }

                _createClass(MerchandiseHierarchyHelpers, null, [{
                    key: 'loadMerchandiseHierarchies',
                    value: function loadMerchandiseHierarchies($q, API) {
                        var _this = this;

                        if (this.merchandiseHierarchy) {
                            return $q.when(this.merchandiseHierarchy);
                        }
                        var promise = API.Common.getMerchandiseHierarchy({
                            filter: {
                                excludeDeleted: true,
                                currentUserOnly: true
                            }
                        }).then(function (result) {
                            var hm = result.data.data.merchandiseHierarchy;
                            var rt = result.data.data.merchandiseHierarchyRootId;
                            var sl = result.data.data.showLevels.sort();
                            var df = result.data.data.displayFormat;

                            _this.merchandiseHierarchy = new TreeMap(hm, rt, function (node) {
                                return Util.binarySearch(sl, node.level) < 0;
                            }, function (a, b) {
                                return a.name.localeCompare(b.name);
                            });

                            _this.merchandiseHierarchy.displayFormat = df;
                            _this.merchandiseHierarchy.showLevels = sl;
                            return _this.merchandiseHierarchy;
                        }, function (reason) {
                            _this.Notifier.warn(_this.$translate.instant('MERCHANDISE_HIERARCHY_MAP_LOAD_ERROR'));
                        });
                        return promise;
                    }
                }, {
                    key: 'loadMerchandiseHierarchiesImmediateFamily',
                    value: function loadMerchandiseHierarchiesImmediateFamily($q, API) {
                        var _this2 = this;

                        if (this.merchandiseHierarchyImmediateFamily) {
                            return $q.when(this.merchandiseHierarchyImmediateFamily);
                        }
                        var promise = API.Common.getMerchandiseHierarchy({
                            filter: {
                                excludeDeleted: true,
                                currentUserOnly: true
                            }
                        }).then(function (result) {
                            var hm = result.data.data.merchandiseHierarchy;
                            var rt = result.data.data.merchandiseHierarchyRootId;
                            var sl = result.data.data.showLevels.sort();
                            var df = result.data.data.displayFormat;

                            _this2.merchandiseHierarchyImmediateFamily = new TreeMap(hm, rt, function (node) {
                                return Util.binarySearch(sl, node.level) < 0;
                            }, function (a, b) {
                                return a.name.localeCompare(b.name);
                            }, true);

                            _this2.merchandiseHierarchyImmediateFamily.displayFormat = df;
                            _this2.merchandiseHierarchyImmediateFamily.showLevels = sl;
                            angular.forEach(_this2.merchandiseHierarchyImmediateFamily.nodeMap, function (node) {

                                if (node && node.id != rt) {
                                    var path = node.getPath();
                                    var ids = [];
                                    node.idList = [];
                                    angular.forEach(path, function (treeNode, i) {
                                        var ids = treeNode.idList || [];
                                        node.childIdList.forEach(function (childId) {
                                            Util.insertIntoUniqueSortedArray(ids, childId);
                                        });
                                        treeNode.idList = ids;
                                    });
                                    node.selected = [];
                                    node.deSelected = [];
                                }
                            });

                            return _this2.merchandiseHierarchyImmediateFamily;
                        }, function (reason) {
                            _this2.Notifier.warn(_this2.$translate.instant('MERCHANDISE_HIERARCHY_MAP_LOAD_ERROR'));
                        });
                        return promise;
                    }
                }, {
                    key: 'buildMhSearchTree',
                    value: function buildMhSearchTree(mh) {
                        var _this3 = this;

                        this.merchandiseHierarchySearch = new TrieSearch('id', { indexField: 'id' });
                        var root = mh.getRootId();
                        var key = 0;
                        angular.forEach(mh.nodeMap, function (node) {
                            if (node.id == root) {
                                return;
                            }
                            var path = node.getPath();
                            var combinedPath = '';
                            var combinedName = '';
                            var mhSearchObject = { key: key++, id: node.id, node: node };
                            _this3.merchandiseHierarchySearch.add(mhSearchObject);
                            mhSearchObject = { key: key++, id: node.name, path: path };
                            _this3.merchandiseHierarchySearch.add(mhSearchObject);
                            path.forEach(function (mh) {
                                combinedPath += mh.id.toString();
                                combinedName += mh.name + ' ';
                            });
                            if (combinedPath != node.id.toString()) {
                                mhSearchObject = { key: key++, id: combinedPath, node: node };
                                _this3.merchandiseHierarchySearch.add(mhSearchObject);
                                mhSearchObject = { key: key++, id: combinedName, node: node };
                                _this3.merchandiseHierarchySearch.add(mhSearchObject);
                            }
                        });
                        return this.merchandiseHierarchySearch;
                    }
                }]);

                return MerchandiseHierarchyHelpers;
            })();

            _export('default', MerchandiseHierarchyHelpers);
        }
    };
});
System.register("promo-manager/layout-view/helpers/math-util", ["npm:babel-runtime@5.8.24/helpers/create-class", "npm:babel-runtime@5.8.24/helpers/class-call-check"], function (_export) {
	var _createClass, _classCallCheck, MathUtil;

	return {
		setters: [function (_npmBabelRuntime5824HelpersCreateClass) {
			_createClass = _npmBabelRuntime5824HelpersCreateClass["default"];
		}, function (_npmBabelRuntime5824HelpersClassCallCheck) {
			_classCallCheck = _npmBabelRuntime5824HelpersClassCallCheck["default"];
		}],
		execute: function () {
			"use strict";

			MathUtil = (function () {
				function MathUtil() {
					_classCallCheck(this, MathUtil);
				}

				_createClass(MathUtil, null, [{
					key: "lerp",
					value: function lerp(i, a, b) {
						return (1 - i) * a + i * b;
					}

					// i=0.00 => (1-0   )*a + 0.00*b => a
					// i=0.25 => (1-0.25)*a + 0.25*b => 0.75*a + 0.25*b
					// i=1.00 => (1-1   )*a + 1.00*b => b
				}, {
					key: "sinEasing",
					value: function sinEasing(t) {
						return 0.5 * (Math.sin(t * Math.PI - 0.5 * Math.PI) + 1);
					}

					// t = current time
					// b = start value
					// c = change in value
					// d = duration
					// not tested !
					// simple linear tweening - no easing, no acceleration
				}, {
					key: "linearTween",
					value: function linearTween(t, b, c, d) {
						return c * t / d + b;
					}

					// quadratic easing in - accelerating from zero velocity
					// (I think the way to do squared is to mult by itselsf)
				}, {
					key: "easeInQuad",
					value: function easeInQuad(t, b, c, d) {
						t /= d;
						return c * t * t + b;
					}

					// quadratic easing out - decelerating to zero velocity
				}, {
					key: "easeOutQuad",
					value: function easeOutQuad(t, b, c, d) {
						t /= d;
						return -c * t * (t - 2) + b;
					}

					// quadratic easing in/out - acceleration until halfway, then deceleration
				}, {
					key: "easeInOutQuad",
					value: function easeInOutQuad(t, b, c, d) {
						t /= d / 2;
						if (t < 1) {
							return c / 2 * t * t + b;
						}
						t--;
						return -c / 2 * (t * (t - 2) - 1) + b;
					}

					// cubic easing in - accelerating from zero velocity
				}, {
					key: "easeInCubic",
					value: function easeInCubic(t, b, c, d) {
						t /= d;
						return c * t * t * t + b;
					}

					// cubic easing out - decelerating to zero velocity
				}, {
					key: "easeOutCubic",
					value: function easeOutCubic(t, b, c, d) {
						t /= d;
						t--;
						return c * (t * t * t + 1) + b;
					}

					// cubic easing in/out - acceleration until halfway, then deceleration
				}, {
					key: "easeInOutCubic",
					value: function easeInOutCubic(t, b, c, d) {
						t /= d / 2;
						if (t < 1) {
							return c / 2 * t * t * t + b;
						}
						t -= 2;
						return c / 2 * (t * t * t + 2) + b;
					}
				}]);

				return MathUtil;
			})();

			_export("default", MathUtil);
		}
	};
});
System.register('helpers/toggle-state', [], function (_export) {
    'use strict';

    function toggleState($document, $parse) {
        var serialNum = 0;
        return {
            link: function link($scope, $ele, $attr) {
                // Make sure we can differentiate between different instances
                // of the directive so we can cleanly create/destroy them
                var namespace = '.toggleState' + ++serialNum;

                // Per-instance state
                var isOpen = false;
                var inProgress = false;

                // On a click bubbling up to the document, clear the toggle
                // state IF it is marked as a unique toggleable and also
                // did not originate from the element
                $document.on('click' + namespace, function () {
                    if ($parse($attr.toggleUnique)($scope) && !inProgress) {
                        isOpen = false;
                        $scope.$digest();
                    }
                    inProgress = false;
                });

                // On a click, toggle the state but raise a flag so
                // the document click handler silently ignores it
                $ele.on('click' + namespace, function ($event) {
                    isOpen = !isOpen;
                    inProgress = true;
                    $scope.$digest();
                });

                // On an update of the toggle state, write the
                // value back to the lval expression
                $scope.$watch(function () {
                    return isOpen;
                }, function (newVal, oldVal) {
                    $parse($attr.toggleState).assign($scope, newVal);
                });

                // Remember to clean up our event handlers
                $scope.$on('$destroy', function () {
                    $ele.off('click' + namespace);
                    $document.off('click' + namespace);
                });
            }
        };
    }

    return {
        setters: [],
        execute: function () {
            toggleState.$inject = ['$document', '$parse'];
            _export('default', toggleState);
        }
    };
});
System.register('promo-manager/helpers/merchandise-hierarchy-selection', ['npm:babel-runtime@5.8.24/helpers/create-class', 'npm:babel-runtime@5.8.24/helpers/class-call-check'], function (_export) {
	var _createClass, _classCallCheck, MerchandiseHierarchySelection;

	return {
		setters: [function (_npmBabelRuntime5824HelpersCreateClass) {
			_createClass = _npmBabelRuntime5824HelpersCreateClass['default'];
		}, function (_npmBabelRuntime5824HelpersClassCallCheck) {
			_classCallCheck = _npmBabelRuntime5824HelpersClassCallCheck['default'];
		}],
		execute: function () {
			'use strict';

			MerchandiseHierarchySelection = (function () {
				function MerchandiseHierarchySelection($scope) {
					var _this = this;

					_classCallCheck(this, MerchandiseHierarchySelection);

					this.shadowModel = [];
					$scope.$watch(function () {
						return _this.ngModel;
					}, function (newVal, oldVal) {
						_this.update();
					});
					$scope.$watch(function () {
						return _this.treeMap;
					}, function (newVal, oldVal) {
						_this.update();
					});
				}

				_createClass(MerchandiseHierarchySelection, [{
					key: 'update',
					value: function update() {
						var _this2 = this;

						if (!this.treeMap) {
							return;
						}
						var node = this.treeMap.getNode(this.ngModel);
						if (node) {
							(function () {
								var path = node.getPath();
								_this2.dropdowns = _this2.defaultLabels.map(function (defaultLabel, i) {
									var options = [];
									var parentNode = null;
									if (i == 0) {
										// Root parent
										parentNode = _this2.treeMap.getRootNode();
										options = parentNode.getChildren();
										options.unshift({ id: parentNode.id, name: defaultLabel });
									} else if (i <= path.length) {
										// Defined parent
										parentNode = path[i - 1];
										options = parentNode.getChildren();
										options.unshift({ id: parentNode.id, name: defaultLabel });
									} else {
										// Wildcard parent
										options.unshift({ id: _this2.ngModel, name: defaultLabel });
									}
									return options;
								});
								_this2.shadowModel = path.map(function (ele) {
									return ele.id;
								});
								if (_this2.shadowModel.length != _this2.defaultLabels.length) {
									for (var i = _this2.shadowModel.length; i < _this2.defaultLabels.length; ++i) {
										_this2.shadowModel[i] = _this2.ngModel;
									}
								}
							})();
						}
					}
				}, {
					key: 'getSelectedName',
					value: function getSelectedName(dropdownIndex) {
						var path = this.treeMap.getNode(this.ngModel).getPath();
						if (dropdownIndex < path.length) {
							// Dropdown has a selected value
							return path[dropdownIndex].name;
						}
						// Dropdown doesn't have a selected value - show the default
						return this.dropdowns[dropdownIndex][0].name;
					}
				}, {
					key: 'updateModel',
					value: function updateModel(value, callback) {
						// Update the value
						this.ngModel = value;
					}
				}]);

				return MerchandiseHierarchySelection;
			})();

			_export('default', MerchandiseHierarchySelection);

			MerchandiseHierarchySelection.$inject = ['$scope'];
		}
	};
});
System.register('api/api-configurator', [], function (_export) {
	'use strict';

	_export('default', onConfig);

	function onConfig($provide) {

		$provide.decorator('API', function ($delegate) {
			var API = {
				Common: {}
			};

			// Common Calls
			API.Common.getChannelList = function () {
				return $delegate.get('vehicle.channel.getChannelListByUser.action');
			};
			API.Common.getChangeTypeList = function () {
				return $delegate.get('promo.lock.getAllChangeTypes.action');
			};
			API.Common.getMerchandiseHierarchyTreeMap = function (options) {
				return $delegate.post('vehicle.promoMgr.loadMerchandiseMap.action', angular.extend({
					excludeDeleted: true
				}, options));
			};
			API.Common.getMerchandiseHierarchy = function (options) {
				return $delegate.post('merchandisehierarchy.getMerchandiseHierarchy.action', angular.extend({}, options));
			};
			API.Common.getUsers = function (userIdList) {
				return $delegate.post('common.user.getUsersById.action', {
					userIdList: userIdList
				});
			};
			API.Common.getUserDepartmentMap = function (userIdList) {
				return $delegate.post('common.user.getUserDepartmentsMap.action');
			};
			API.Common.postMerchandiseHierarchyTreeMap = function (options) {
				return $delegate.post('vehicle.promoMgr.loadMerchandiseMap.action', options);
			};
			API.Common.getStoreMap = function (vehicle) {
				return $delegate.post('vehicle.promoMgr.cpp.json.smd.loadStoreMap.action', {
					vehicleVersionId: vehicle.vehicleVersionId
				});
			};

			angular.element.extend(true, $delegate, API);
			return $delegate;
		});
	}

	return {
		setters: [],
		execute: function () {
			onConfig.$inject = ['$provide'];
		}
	};
});
System.register('promo-manager/api/promo-manager-api-configurator', [], function (_export) {
	'use strict';

	_export('default', onConfig);

	function onConfig($provide) {

		$provide.decorator('API', function ($delegate) {
			var API = {
				PromoManager: {
					Common: {}
				}
			};

			API.PromoManager.Common.getVehicleVersionList = function (vehicleId) {
				return $delegate.get('vehicle.version.json.clientVehicleVersionList.action', {
					vehicleId: vehicleId
				});
			};
			API.PromoManager.Common.getChannelList = function () {
				return $delegate.get('promo.planning.getAllImplTypeChannels.action');
			};
			API.PromoManager.Common.getSearchItems = function (offerVersionId, searchString, pageInfo) {
				return $delegate.post('promo.planning.searchMHItems.action', {
					offerVersionId: offerVersionId,
					searchString: searchString,
					pageInfo: pageInfo
				});
			};
			API.PromoManager.Common.getAllocationReport = function (vehicleVersionId) {
				return $delegate.post('/emm/reporting/layoutview.reporting.getMHAllocation.action', {
					vehicleVersion: { id: vehicleVersionId }
				});
			};
			API.PromoManager.Common.getExceptionReport = function (vehicleId) {
				return $delegate.post('/emm/reporting/layoutview.reporting.getPlanExceptions.action', {
					vehicle: { id: vehicleId }
				});
			};
			API.PromoManager.Common.getExportAllocationReportLink = function (vehicleVersionId) {
				return '/emm/reporting/layoutview.export.exportAlloctionDistributionByMH.action?vehicleVersionId=' + vehicleVersionId;
			};
			API.PromoManager.Common.getExportExceptionReportLink = function (vehicleId) {
				return '/emm/reporting/layoutview.export.exportPlanExceptions.action?vehicleId=' + vehicleId;
			};

			angular.element.extend(true, $delegate, API);
			return $delegate;
		});
	}

	return {
		setters: [],
		execute: function () {
			onConfig.$inject = ['$provide'];
		}
	};
});
System.register('promo-manager/layout-view/api/layout-view-api-configurator', [], function (_export) {
    'use strict';

    _export('default', onConfig);

    function onConfig($provide) {

        $provide.decorator('API', function ($delegate) {
            var API = {
                PromoManager: {
                    LayoutView: {}
                }
            };

            API.PromoManager.LayoutView.getLayoutVersion = function (layoutId, layoutMarketsList) {
                return $delegate.post('layout-view/layout.getLayoutVersion.action', {
                    layout: {
                        id: layoutId
                    },
                    marketList: layoutMarketsList
                });
            };
            API.PromoManager.LayoutView.getLayout = function (vehicleId) {
                return $delegate.post('layout-view/layout.loadLayout.action', {
                    vehicleVersion: {
                        id: vehicleId
                    }
                });
            };
            API.PromoManager.LayoutView.addPages = function (layoutId, pageList) {
                return $delegate.post('layout-view/layout.addPagesToLayout.action', {
                    layout: {
                        id: layoutId
                    },
                    pageList: pageList
                });
            };
            API.PromoManager.LayoutView.haveOffers = function (layoutPageList) {
                return $delegate.post('layout-view/page.haveOffers.action', {
                    layoutPageList: layoutPageList
                });
            };
            API.PromoManager.LayoutView.haveChangeRequestAssociations = function (layoutPageList) {
                return $delegate.post('layout-view/page.haveChangeRequestAssociations.action', {
                    layoutPageList: layoutPageList
                });
            };
            API.PromoManager.LayoutView.moveOffersToParkingLot = function (pageGridId) {
                return $delegate.post('layout-view/page.moveOffersToParkingLot.action', {
                    layoutPageList: pageGridId
                });
            };
            API.PromoManager.LayoutView.removePages = function (pages) {
                return $delegate.post('layout-view/page.removePages.action', {
                    layoutPageList: pages.layoutPageList,
                    moveOffersToParkingLot: pages.moveOffersToParkingLot

                });
            };
            API.PromoManager.LayoutView.updatePages = function (pagelist) {
                var layoutPageList = pagelist.layoutPageList;
                return $delegate.post('layout-view/page.updatePages.action', {
                    layoutPageList: layoutPageList
                });
            };
            API.PromoManager.LayoutView.getPageVersion = function (layoutPageList, marketList) {
                return $delegate.post('layout-view/page.getPageVersion.action', {
                    layoutPageList: layoutPageList,
                    marketList: marketList
                });
            };
            API.PromoManager.LayoutView.loadPageGridVersion = function (pageVersionId) {
                return $delegate.post('layout-view/grid.loadPageGridVersion.action', {
                    pageGridVersion: {
                        id: pageVersionId
                    }
                });
            };
            API.PromoManager.LayoutView.updatePageGridVersions = function (pageGrid) {
                var pageGridVersionList = pageGrid.pageGridVersionList;
                return $delegate.post('layout-view/grid.updatePageGridVersions.action', {
                    pageGridVersionList: pageGridVersionList
                });
            };
            API.PromoManager.LayoutView.haveChangeRequestAssociationsGrid = function (pageGridId) {
                return $delegate.post('layout-view/grid.haveChangeRequestAssociations.action', {
                    pageGridVersionList: pageGridId
                });
            };
            API.PromoManager.LayoutView.moveOffersToParkingLotGrid = function (pageGridId) {
                return $delegate.post('layout-view/grid.moveOffersToParkingLot.action', {
                    pageGridVersionList: pageGridId
                });
            };
            API.PromoManager.LayoutView.clearTemplates = function (pageGrid) {
                return $delegate.post('layout-view/grid.clearTemplates.action', {
                    pageGridVersionList: pageGrid.pageGridVersionList,
                    moveOffersToParkingLot: pageGrid.moveOffersToParkingLot
                });
            };
            API.PromoManager.LayoutView.applyTemplate = function (pageGrid) {
                return $delegate.post('layout-view/grid.applyTemplate.action', {
                    pageLayoutTemplate: pageGrid.pageLayoutTemplate,
                    pageGridVersionList: pageGrid.pageGridVersionList,
                    moveOffersToParkingLot: pageGrid.moveOffersToParkingLot
                });
            };
            API.PromoManager.LayoutView.loadTemplates = function (qry) {
                return $delegate.post('layout-view/pagetemplate.loadTemplates.action', {
                    startingIndex: qry.startingIndex,
                    limit: qry.limit,
                    channel: {
                        id: qry.channel
                    },
                    templateNameSearchString: qry.templateNameSearchString

                });
            };
            API.PromoManager.LayoutView.loadGridVersionBlock = function (blockId) {
                return $delegate.post('layout-view/block.loadGridVersionBlock.action', {
                    block: {
                        id: blockId
                    }
                });
            };
            API.PromoManager.LayoutView.updateGridVersionBlocks = function (blockList) {
                return $delegate.post('layout-view/block.updateGridVersionBlocks.action', {
                    blockList: blockList.blockList
                });
            };
            API.PromoManager.LayoutView.loadOffer = function (offer) {
                return $delegate.post('layout-view/block.getBlockOfferVersion.action', {
                    offerVersion: {
                        id: offer.id
                    }
                });
            };

            API.PromoManager.LayoutView.getGlobalClipboard = function () {
                return $delegate.post('PLACEHOLDER_getGlobalClipboard');
            };
            API.PromoManager.LayoutView.getLayoutViewClipboard = function (vehicleId, vehicleVersionId) {
                return $delegate.post('PLACEHOLDER_getLocalClipboard', {
                    vehicleId: vehicleId,
                    vehicleVersionId: vehicleVersionId
                });
            };

            angular.element.extend(true, $delegate, API);
            return $delegate;
        });
    }

    return {
        setters: [],
        execute: function () {
            onConfig.$inject = ['$provide'];
        }
    };
});
System.register('promo-manager/layout-view/clipboard/clipboard-controller', ['npm:babel-runtime@5.8.24/helpers/create-class', 'npm:babel-runtime@5.8.24/helpers/class-call-check'], function (_export) {
	var _createClass, _classCallCheck, ClipboardController;

	return {
		setters: [function (_npmBabelRuntime5824HelpersCreateClass) {
			_createClass = _npmBabelRuntime5824HelpersCreateClass['default'];
		}, function (_npmBabelRuntime5824HelpersClassCallCheck) {
			_classCallCheck = _npmBabelRuntime5824HelpersClassCallCheck['default'];
		}],
		execute: function () {
			'use strict';

			ClipboardController = (function () {
				function ClipboardController($scope) {
					_classCallCheck(this, ClipboardController);

					this.$scope = $scope;
					this.MODE_GLOBAL = 'global';
					this.MODE_LOCAL = 'local';

					this.mode = this.MODE_GLOBAL;
				}

				_createClass(ClipboardController, [{
					key: 'setMode',
					value: function setMode(mode) {
						return this.mode = mode;
					}
				}, {
					key: 'setOpen',
					value: function setOpen(opened) {
						return this.opened = opened;
					}
				}, {
					key: 'isDragging',
					value: function isDragging() {
						return this.dragging;
					}
				}, {
					key: 'isOpen',
					value: function isOpen() {
						return this.opened;
					}
				}]);

				return ClipboardController;
			})();

			_export('default', ClipboardController);
		}
	};
});
System.register('promo-manager/layout-view/layout-view-input-directive', [], function (_export) {
    'use strict';

    return {
        setters: [],
        execute: function () {
            _export('default', function () {
                return {
                    restrict: "A",
                    scope: {
                        expression: '&layoutViewInput',
                        listenEvents: '=layoutViewEvents',
                        propagateEvent: '=',
                        cancelEvent: '='
                    },
                    link: function link(scope, element, attrs) {
                        var directiveNs = '.layoutviewinput';
                        scope.$watchCollection(function () {
                            return scope.listenEvents;
                        }, function (newVal, oldVal) {
                            // FIXME
                            // Setup a system where paired end events can be
                            // tracked even when performed outside of the containing
                            // element, but avoid picking up begin events
                            var oldEvents = oldVal.map(function (oldListenEvents) {
                                return oldListenEvents + directiveNs;
                            }).join(' ');
                            var newEvents = newVal.map(function (newListenEvents) {
                                return newListenEvents + directiveNs;
                            }).join(' ');

                            if (angular.isArray(oldVal)) {
                                element.off(oldEvents);
                            }
                            if (angular.isArray(newVal)) {
                                element.on(newEvents, function (e) {
                                    scope.$apply(function () {
                                        scope.expression({ '$event': e });
                                    });
                                    if (scope.propagateEvent) {
                                        e.stopPropagation();
                                    }
                                    if (scope.cancelEvent) {
                                        e.preventDefault();
                                    }
                                });
                            }
                        });
                        scope.$on('$destroy', function () {
                            element.off(directiveNs);
                        });
                    }
                };
            });
        }
    };
});
System.register('promo-manager/common/allocation-report/allocation-report-controller', ['npm:babel-runtime@5.8.24/helpers/create-class', 'npm:babel-runtime@5.8.24/helpers/class-call-check', 'helpers/util', 'helpers/notifier', 'helpers/tree-map'], function (_export) {
	var _createClass, _classCallCheck, Util, Notifier, TreeMap, AllocationReportController;

	return {
		setters: [function (_npmBabelRuntime5824HelpersCreateClass) {
			_createClass = _npmBabelRuntime5824HelpersCreateClass['default'];
		}, function (_npmBabelRuntime5824HelpersClassCallCheck) {
			_classCallCheck = _npmBabelRuntime5824HelpersClassCallCheck['default'];
		}, function (_helpersUtil) {
			Util = _helpersUtil['default'];
		}, function (_helpersNotifier) {
			Notifier = _helpersNotifier['default'];
		}, function (_helpersTreeMap) {
			TreeMap = _helpersTreeMap['default'];
		}],
		execute: function () {
			'use strict';

			AllocationReportController = (function () {
				function AllocationReportController($scope, $translate, $uiModal, API) {
					var _this = this;

					_classCallCheck(this, AllocationReportController);

					this.$scope = $scope;
					this.$translate = $translate;
					this.$modal = $uiModal;
					this.API = API;

					$scope.$watch(function () {
						return _this.context.vehicleVersionId;
					}, function (newVal, oldVal) {
						if (newVal > 0) _this.loadReport();
					});

					// FIXME: See if we can share the MH with the layout view - make sure
					// it is resilient against an early $destroy after a promise has been
					// set since it's possible that might never resolve - better to
					// make extra requests for now than can be resolved with cache-control
					// than to have a unrecoverable fail case
					// Also check to make sure the applied filters match, otherwise we might
					// not be able to dereference MH that we should be able to see in the
					// report
					this.loadMerchandiseHierarchy();
				}

				_createClass(AllocationReportController, [{
					key: 'loadMerchandiseHierarchy',
					value: function loadMerchandiseHierarchy() {
						var _this2 = this;

						var promise = this.API.Common.getMerchandiseHierarchy({
							filter: {
								excludeDeleted: true,
								currentUserOnly: false
							}
						}).then(function (result) {
							var hm = result.data.data.merchandiseHierarchy;
							var rt = result.data.data.merchandiseHierarchyRootId;
							var sl = result.data.data.showLevels.sort();
							var df = result.data.data.displayFormat;
							_this2.context.merchandiseHierarchyTreeMap = new TreeMap(hm, rt, function (node) {
								return Util.binarySearch(sl, node.level) < 0;
							}, function (a, b) {
								return a.name.localeCompare(b.name);
							});
							_this2.mhFormat = df;
						}, function (reason) {
							Notifier.warn(_this2.$translate.instant('MERCHANDISE_HIERARCHY_MAP_LOAD_ERROR'));
						});
						return promise;
					}
				}, {
					key: 'loadReport',
					value: function loadReport() {
						var _this3 = this;

						var vvId = this.context.vehicleVersionId;
						return this.API.PromoManager.Common.getAllocationReport(vvId).then(function (result) {
							_this3.report = result.data.data.allocationReportList;
						}, function (rejection) {
							Notifier.warn(_this3.$translate.instant('ALLOCATION_REPORT_LOAD_ERROR'));
						});
					}
				}, {
					key: 'getExportLink',
					value: function getExportLink() {
						var vvId = this.context.vehicleVersionId;
						return this.API.PromoManager.Common.getExportAllocationReportLink(vvId);
					}
				}, {
					key: 'getMhName',
					value: function getMhName(merchandiseHierarchyId) {
						// FIXME: Use provided displayFormat for MH label
						var mhTree = this.context.merchandiseHierarchyTreeMap;
						if (!mhTree) return merchandiseHierarchyId;

						var mhTreeNode = mhTree.getNode(merchandiseHierarchyId);
						if (!mhTreeNode) return merchandiseHierarchyId;

						return mhTreeNode.name;
					}
				}]);

				return AllocationReportController;
			})();

			_export('default', AllocationReportController);

			AllocationReportController.$inject = ['$scope', '$translate', '$uiModal', 'API'];
		}
	};
});
System.register('promo-manager/common/exception-report/exception-report-controller', ['npm:babel-runtime@5.8.24/helpers/create-class', 'npm:babel-runtime@5.8.24/helpers/class-call-check', 'helpers/notifier'], function (_export) {
	var _createClass, _classCallCheck, Notifier, ExceptionReportController;

	return {
		setters: [function (_npmBabelRuntime5824HelpersCreateClass) {
			_createClass = _npmBabelRuntime5824HelpersCreateClass['default'];
		}, function (_npmBabelRuntime5824HelpersClassCallCheck) {
			_classCallCheck = _npmBabelRuntime5824HelpersClassCallCheck['default'];
		}, function (_helpersNotifier) {
			Notifier = _helpersNotifier['default'];
		}],
		execute: function () {
			'use strict';

			ExceptionReportController = (function () {
				function ExceptionReportController($scope, $translate, $uiModal, API) {
					_classCallCheck(this, ExceptionReportController);

					this.$scope = $scope;
					this.$translate = $translate;
					this.$modal = $uiModal;
					this.API = API;

					this.loadReport();
				}

				_createClass(ExceptionReportController, [{
					key: 'loadReport',
					value: function loadReport() {
						var _this = this;

						var vId = this.context.vehicleId;
						return this.API.PromoManager.Common.getExceptionReport(vId).then(function (result) {
							_this.report = result.data.data.planExceptionsReportList;
						}, function (rejection) {
							Notifier.warn(_this.$translate.instant('EXCEPTION_REPORT_LOAD_ERROR'));
						});
					}
				}, {
					key: 'getExportLink',
					value: function getExportLink() {
						var vId = this.context.vehicleId;
						return this.API.PromoManager.Common.getExportExceptionReportLink(vId);
					}
				}]);

				return ExceptionReportController;
			})();

			_export('default', ExceptionReportController);

			ExceptionReportController.$inject = ['$scope', '$translate', '$uiModal', 'API'];
		}
	};
});
System.register('promo-manager/layout-view/dynamic-styles-directive', [], function (_export) {
	'use strict';

	_export('default', dynamicStyles);

	function dynamicStyles() {
		return {
			restrict: 'A',
			template: '<style></style>',
			scope: {
				'dynamicStyles': '='
			},
			link: function link(scope, ele) {
				var styleEle = ele.find('style');
				scope.$watch(function () {
					return scope.dynamicStyles;
				}, function (newVal, oldVal) {
					return styleEle.html(newVal);
				});
			}
		};
	}

	return {
		setters: [],
		execute: function () {}
	};
});
System.register('promo-manager/layout-view/helpers/thumbnail-canvas-renderer', [], function (_export) {
	'use strict';

	_export('default', thumbnailCanvasRenderer);

	function thumbnailCanvasRenderer() {
		return {
			restrict: 'EA',
			scope: {
				'blockList': '='
			},
			template: "<canvas width='30' height='50'  style='border:1px solid #000000;'/>",
			link: function link(scope, element, attrs) {
				scope.canvas = element.find('canvas')[0];
				scope.context = scope.canvas.getContext('2d');
				scope.blockList.forEach(function (block) {
					var w = 30;
					var h = 50;
					var x = block.u1;
					var y = block.v1;
					var width = Math.floor(block.u2 * w);
					var height = Math.floor(block.v2 * h);
					scope.context.strokeStyle = "#0000ff";
					scope.context.strokeRect(x, y, width, height);
				});
			}
		};
	}

	return {
		setters: [],
		execute: function () {}
	};
});
System.register('promo-manager/common/item-selection/item-selection-directive', ['promo-manager/common/item-selection/item-selection'], function (_export) {
    'use strict';

    var ItemSelectionController;

    _export('default', itemSelection);

    function itemSelection() {
        return {
            restrict: 'A',
            scope: {
                'context': '='
            },
            template: '<button class="btn" ng-click="ctrl.open()" translate="ITEM_SELECTION_BUTTON">Click me</button>',
            controller: ItemSelectionController,
            controllerAs: 'ctrl',
            bindToController: true
        };
    }

    return {
        setters: [function (_promoManagerCommonItemSelectionItemSelection) {
            ItemSelectionController = _promoManagerCommonItemSelectionItemSelection.ItemSelectionController;
        }],
        execute: function () {}
    };
});
System.register('promo-manager/common/item-selection/item-selection-indeterminate-checkbox', ['helpers/util'], function (_export) {
	'use strict';

	var Util;

	_export('default', itemSelectionIndeterminateCheckbox);

	function itemSelectionIndeterminateCheckbox() {
		var nsCounter = 0;
		var Configs = {
			classHasNone: 'checked-none',
			classHasSome: 'checked-some',
			classHasAll: 'checked-all',
			classDisabled: 'checked-none'
		};
		return {
			restrict: 'A',
			scope: {
				node: '=itemSelectionIndeterminateCheckbox',
				merchandiseHierarchy: '=merchandiseHierarchy'
			},
			link: function link(scope, element, attrs) {
				var ns = '.itemSelectionIndeterminateCheckbox' + ++nsCounter;
				var mh = scope.merchandiseHierarchy;
				var node = scope.node;
				// Setup our namespaced event bindings so they don't clash amongst multiple instances
				var checkboxElement = angular.element(element);
				var bindEvents = 'click' + ns;

				// Handle the click on the checkbox element directly
				checkboxElement.on(bindEvents, function () {
					scope.$apply(checkboxClicked);
				});

				function checkboxClicked() {
					// clicking on an element either adds or removes the selection from
					// the node and its children
					// the parent of the element (if there is one) is updated with
					// the node id - it is either added/removed from the selectedIdList or
					// added/removed from the deSelectedIdList
					// if the selectedIDList and deSelectedIdList are both empty,
					// then the checkbox class is classHasNone
					// if both the selectedIDList and deSelectedIdList are populated
					// then the checkbox class is classHasSome
					// if the selectedIdList is populated and the deSelectedIdList is empty
					// then the checkbox class is classHasAll
					//
					var childIdList = angular.copy(node.idList);
					var parent = mh.getNode(node.parentId);
					var deSelected = node.deSelected || [];
					var selected = node.selected || [];
					var isChecked = true;
					//if clicked assume, if positive, we are de-selecting
					if (selected.length > 0) {
						isChecked = false;
					}
					if (isChecked) {
						deSelected = [];
						selected = childIdList;
						if (!selected.length) {
							//at the lowest level, add the id into selected for checkbox monitoring
							Util.insertIntoUniqueSortedArray(selected, node.id);
						}
						//read parents and add to thier arrays
						var parentId = node.parentId;
						var nodeId = [node.id];

						var _loop = function () {
							parent = mh.getNode(parentId);
							if (!parent) {
								parent = {}; //just throw it away
							}
							var parentDeSelected = parent.deSelected || [];
							var parentSelected = parent.selected || [];
							nodeId.forEach(function (id) {
								Util.removeFromUnsortedArray(parentDeSelected, id);
								Util.insertIntoUniqueSortedArray(parentSelected, id);
							});
							//add selection to the parents parent
							nodeId.push(parent.id);
							parent.selected = parentSelected;
							parent.deSelected = parentDeSelected;
							parentId = parent.parentId;
						};

						while (parentId) {
							_loop();
						}
					} else {
						deSelected = childIdList;
						if (!deSelected.length) {
							//at the lowest level, add the id into selected for checkbox monitoring
							Util.insertIntoUniqueSortedArray(deSelected, node.id);
						}
						selected = [];
						//read parents and add to thier arrays
						var parentId = node.parentId;
						var nodeId = [node.id];

						var _loop2 = function () {
							parent = mh.getNode(parentId);
							if (!parent) {
								parent = {}; //just throw it away
							}
							var parentDeSelected = parent.deSelected || [];
							var parentSelected = parent.selected || [];
							nodeId.forEach(function (id) {
								Util.removeFromUnsortedArray(parentSelected, id);
								Util.insertIntoUniqueSortedArray(parentDeSelected, id);
							});
							if (!parentSelected.length) {
								//remove selection from the parents parent
								nodeId.push(parent.id);
							}
							parent.selected = parentSelected;
							parent.deSelected = parentDeSelected;
							parentId = parent.parentId;
						};

						while (parentId) {
							_loop2();
						}
					}
					node.selected = selected;
					node.deSelected = deSelected;
				}

				function parentSelection() {
					//check the parent - if the parent is selected, you are selected
					var parent = mh.getNode(node.parentId);
					var parentSelected = false;
					if (!parent) {
						if (node.selected.length == node.idList.length) {
							parentSelected = true;
						}
					} else if (parent.idList.length == parent.selected.length) {
						node.selected = angular.copy(node.idList);
						if (!node.selected.length) {
							//at the lowest level, add the id into selected for checkbox monitoring
							node.selected.push(node.id);
						}
						parentSelected = true;
					} else if (parent.selected.length && Util.binarySearch(parent.selected, node.id) > 0) {
						node.selected = angular.copy(node.idList);
						if (!node.selected.length) {
							//at the lowest level, add the id into selected for checkbox monitoring
							node.selected.push(node.id);
						}
						parentSelected = true;
					} else if (!parent.selected.length) {
						node.selected = [];
						node.deSelected = [];
					}
					return parentSelected;
				}

				// Return the appropriate class name based on backing selections
				scope.$watch(function () {
					var selected = node.selected || [];
					var deSelected = node.deSelected || [];
					var len = node.idList.length;
					var isSelected = parentSelection();

					if (!selected.length) return Configs.classHasNone;
					if (selected.length >= len || isSelected) return Configs.classHasAll;
					return Configs.classHasSome;
				}, function (newClass, oldClass) {
					checkboxElement.removeClass(oldClass).addClass(newClass);
				});

				// Clean up the listeners
				scope.$on('$destroy', function () {
					checkboxElement.off(bindEvents);
				});
			}
		};
	}

	return {
		setters: [function (_helpersUtil) {
			Util = _helpersUtil['default'];
		}],
		execute: function () {}
	};
});
System.register('helpers/svg-dynamic-size', [], function (_export) {
    'use strict';

    _export('default', svgDynamicSize);

    function svgDynamicSize($parse) {
        return {
            restrict: 'A',
            link: function link(scope, element, attrs) {
                var unwatchLoadFn = scope.$on('$includeContentLoaded', function () {
                    var svgEle = element.children('svg');

                    var widthGetter = $parse(attrs.svgWidth);
                    var heightGetter = $parse(attrs.svgHeight);

                    scope.$watchCollection(function () {
                        return [widthGetter(scope), heightGetter(scope)];
                    }, function (newVal, oldVal) {
                        svgEle.attr({ width: newVal[0], height: newVal[1] });
                    });
                    unwatchLoadFn();
                });
            }
        };
    }

    return {
        setters: [],
        execute: function () {}
    };
});
System.register('promo-manager/layout-view/model/block', ['npm:babel-runtime@5.8.24/helpers/create-class', 'npm:babel-runtime@5.8.24/helpers/class-call-check', 'npm:babel-runtime@5.8.24/helpers/sliced-to-array', 'promo-manager/layout-view/model/change-request', 'promo-manager/layout-view/model/offer-version-manager', 'promo-manager/layout-view/model/block-group-to-blockId-manager', 'helpers/util', 'npm:gl-matrix@2.3.1', 'promo-manager/layout-view/layout-view-consts', 'promo-manager/layout-view/model/permitted-action'], function (_export) {
	var _createClass, _classCallCheck, _slicedToArray, ChangeRequest, OfferVersionManager, BlockGroupToBlockIdManager, Util, glMatrix, LayoutConsts, PermittedAction, vec4, mat4, Block;

	return {
		setters: [function (_npmBabelRuntime5824HelpersCreateClass) {
			_createClass = _npmBabelRuntime5824HelpersCreateClass['default'];
		}, function (_npmBabelRuntime5824HelpersClassCallCheck) {
			_classCallCheck = _npmBabelRuntime5824HelpersClassCallCheck['default'];
		}, function (_npmBabelRuntime5824HelpersSlicedToArray) {
			_slicedToArray = _npmBabelRuntime5824HelpersSlicedToArray['default'];
		}, function (_promoManagerLayoutViewModelChangeRequest) {
			ChangeRequest = _promoManagerLayoutViewModelChangeRequest['default'];
		}, function (_promoManagerLayoutViewModelOfferVersionManager) {
			OfferVersionManager = _promoManagerLayoutViewModelOfferVersionManager['default'];
		}, function (_promoManagerLayoutViewModelBlockGroupToBlockIdManager) {
			BlockGroupToBlockIdManager = _promoManagerLayoutViewModelBlockGroupToBlockIdManager['default'];
		}, function (_helpersUtil) {
			Util = _helpersUtil['default'];
		}, function (_npmGlMatrix231) {
			glMatrix = _npmGlMatrix231['default'];
		}, function (_promoManagerLayoutViewLayoutViewConsts) {
			LayoutConsts = _promoManagerLayoutViewLayoutViewConsts['default'];
		}, function (_promoManagerLayoutViewModelPermittedAction) {
			PermittedAction = _promoManagerLayoutViewModelPermittedAction['default'];
		}],
		execute: function () {
			'use strict';

			vec4 = glMatrix.vec4;
			mat4 = glMatrix.mat4;

			Block = (function () {
				function Block(data, page) {
					var _this = this;

					_classCallCheck(this, Block);

					this.id = data.id;
					this.name = data.name;
					this.color = data.color;
					this.theme = data.theme;
					this.type = LayoutConsts.TYPE_BLOCK;
					//context menu
					this.open = false;
					this.userDefinedName = data.userDefinedName || null;
					this.u1 = data.u1;
					this.u2 = data.u2;
					this.v1 = data.v1;
					this.v2 = data.v2;
					this.page = page;
					this.hierarchyId = angular.isObject(data.merchandiseHierarchy) ? data.merchandiseHierarchy.id : -1;
					this.merchandiseHierarchyList = (data.merchandiseHierarchyList || [{ id: this.hierarchyId }]).map(function (mh) {
						return mh.id;
					});
					// FIXME - this should be a single unique value and not a list???
					// double check API spec
					this.blockGroupId = null;
					if (data.blockGroupList && data.blockGroupList.length) {
						this.blockGroupId = data.blockGroupList[0].id;
					}
					if (data.offerVersion) {
						this.offerVersion = new OfferVersionManager(data.offerVersion);
					}
					if (data.changeRequest) {
						this.changeRequest = new ChangeRequest(data.changeRequest);
					}
					this.blockGroupMap = new BlockGroupToBlockIdManager();
					angular.forEach(data.blockGroupMap, function (bgm, k) {
						_this.blockGroupMap.addBlockGroup(bgm.id, bgm.name, bgm.blockIdList);
					});
					if (data.permittedActions) {
						this.permittedActions = $.map(data.permittedActions, function (name, action) {
							return new PermittedAction(name, action);
						});
					}
				}

				_createClass(Block, [{
					key: 'isActiveChangeRequest',
					value: function isActiveChangeRequest(rfcStatusMap) {
						var status = null;
						if (!rfcStatusMap) {
							if (this.changeRequest) {
								status = this.changeRequest.changeStatusId;
							}
							rfcStatusMap = Util.arrayAsMap([status]);
						}

						return this.changeRequest.isActive(rfcStatusMap);
					}
				}, {
					key: 'hasOffers',
					value: function hasOffers() {
						if (this.offerVersion) {
							return true;
						}
						return false;
					}

					// [ObjectVec4]
				}, {
					key: 'getObjectSpacePoints',
					value: function getObjectSpacePoints() {
						return [vec4.fromValues(this.u1, this.v1, 0, 1), vec4.fromValues(this.u2, this.v2, 0, 1)];
					}

					// [WorldVec4]
				}, {
					key: 'getWorldSpacePoints',
					value: function getWorldSpacePoints() {
						return [vec4.clone(this._worldVec0), vec4.clone(this._worldVec1)];
					}

					// [TransformMat4] * [PointVec4]
				}, {
					key: 'getTransformedPoints',
					value: function getTransformedPoints(points, transformMat4) {
						return points.map(function (pointVec4) {
							return vec4.transformMat4(pointVec4, pointVec4, transformMat4);
						});
					}
				}, {
					key: 'calculateWorldSpaceCoordinates',
					value: function calculateWorldSpaceCoordinates(worldTransformMat4) {
						var objectSpacePoints = this.getObjectSpacePoints();

						var _getTransformedPoints = this.getTransformedPoints(objectSpacePoints, worldTransformMat4);

						var _getTransformedPoints2 = _slicedToArray(_getTransformedPoints, 2);

						this._worldVec0 = _getTransformedPoints2[0];
						this._worldVec1 = _getTransformedPoints2[1];

						var _worldVec0 = _slicedToArray(this._worldVec0, 3);

						this._worldX0 = _worldVec0[0];
						this._worldY0 = _worldVec0[1];
						this._worldZ0 = _worldVec0[2];

						var _worldVec1 = _slicedToArray(this._worldVec1, 3);

						this._worldX1 = _worldVec1[0];
						this._worldY1 = _worldVec1[1];
						this._worldZ1 = _worldVec1[2];
					}
				}, {
					key: 'calculateCameraSpaceCoordinates',
					value: function calculateCameraSpaceCoordinates(cameraMat4) {
						// [Block's CameraVec4] = [CameraMat4] * [Block's WorldVec4]
						var worldSpacePoints = this.getWorldSpacePoints();

						// Convert CameraVec4 into css styles

						var _getTransformedPoints3 = this.getTransformedPoints(worldSpacePoints, cameraMat4);

						var _getTransformedPoints32 = _slicedToArray(_getTransformedPoints3, 2);

						this._cameraVec0 = _getTransformedPoints32[0];
						this._cameraVec1 = _getTransformedPoints32[1];
						var v0 = this._cameraVec0;
						var v1 = this._cameraVec1;

						this._cameraSpaceStyles = {
							'transform': 'translate(' + v0[0] + 'px, ' + v0[1] + 'px)',
							'-ms-transform': 'translate(' + v0[0] + 'px, ' + v0[1] + 'px)',
							'-webkit-transform': 'translate(' + v0[0] + 'px, ' + v0[1] + 'px)',
							'width': v1[0] - v0[0] + 1,
							'height': v1[1] - v0[1] + 1,
							'z-index': Math.floor(v0[2])
						};
						// FIXME - if subpixel blurring/aliasing is not a problem and all
						// supported browsers can handle the 2d/3d transforms, use that
					}
				}, {
					key: 'exportBlockList',
					value: function exportBlockList(newBlock, originalBlock) {
						var dataChange = false;
						var blockToExport = {
							id: newBlock.id
						};
						var x = undefined;
						for (x in newBlock) {
							if (originalBlock[x] != newBlock[x] && x != 'merchandiseHierarchy' && x != 'layoutPageGridVersion') {
								dataChange = true;
								blockToExport[x] = newBlock[x];
							}
							if (x == 'merchandiseHierarchy' && originalBlock[x] && originalBlock[x].id != newBlock[x].id) {
								dataChange = true;
								blockToExport[x] = newBlock[x];
							}
						}
						if (!dataChange) {
							return null;
						}

						return { blockList: [blockToExport] };
					}
				}]);

				return Block;
			})();

			_export('default', Block);
		}
	};
});
System.register('promo-manager/layout-view/model/layout-model', ['npm:babel-runtime@5.8.24/helpers/create-class', 'npm:babel-runtime@5.8.24/helpers/class-call-check', 'helpers/util', 'promo-manager/layout-view/model/spreads-group', 'promo-manager/layout-view/model/page', 'promo-manager/layout-view/layout-view-consts', 'promo-manager/layout-view/model/permitted-action'], function (_export) {
    var _createClass, _classCallCheck, Util, SpreadsGroup, Page, LayoutConsts, PermittedAction, LayoutModel;

    return {
        setters: [function (_npmBabelRuntime5824HelpersCreateClass) {
            _createClass = _npmBabelRuntime5824HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5824HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5824HelpersClassCallCheck['default'];
        }, function (_helpersUtil) {
            Util = _helpersUtil['default'];
        }, function (_promoManagerLayoutViewModelSpreadsGroup) {
            SpreadsGroup = _promoManagerLayoutViewModelSpreadsGroup['default'];
        }, function (_promoManagerLayoutViewModelPage) {
            Page = _promoManagerLayoutViewModelPage['default'];
        }, function (_promoManagerLayoutViewLayoutViewConsts) {
            LayoutConsts = _promoManagerLayoutViewLayoutViewConsts['default'];
        }, function (_promoManagerLayoutViewModelPermittedAction) {
            PermittedAction = _promoManagerLayoutViewModelPermittedAction['default'];
        }],
        execute: function () {
            'use strict';

            LayoutModel = (function () {
                function LayoutModel(data) {
                    var _this = this;

                    _classCallCheck(this, LayoutModel);

                    var spreadsData = data.pageGroupsMap;
                    var layoutVersionData = data.layoutVersionsMap || {};

                    var pageList = data.pageList;

                    this.id = data.id;
                    this.channelId = data.channelId;
                    this.currentPageQuantity = data.currentPageQuantity;
                    this.layoutVersionIdList = [];

                    if (data.permittedActions) {
                        this.permittedActions = $.map(data.permittedActions, function (name, action) {
                            return new PermittedAction(name, action);
                        });
                    }

                    angular.forEach(layoutVersionData, function (marketList, layoutVersionId) {
                        _this.layoutVersionIdList.push(layoutVersionId);
                    });

                    this.layoutVersionsMap = Util.objectAsMap(layoutVersionData);
                    this.spreadsMap = Util.objectAsMap(spreadsData, function (spreadData) {
                        return new SpreadsGroup(spreadData);
                    });
                    //supply page position if not received from host
                    var adderX = LayoutConsts.ADD_PAGE_X_OFFSET;
                    var adderY = LayoutConsts.ADD_PAGE_Y_OFFSET;
                    var pageGrip = LayoutConsts.ADD_PAGE_Y_PAGE_GRIP_OFFSET;
                    var initialXpos = LayoutConsts.ADD_PAGE_X_INITIAL_POSITION_DEFAULT;
                    var initialYpos = LayoutConsts.ADD_PAGE_Y_INITIAL_POSITION_DEFAULT;
                    var k = 0;
                    this.pageList = pageList.map(function (pageData) {
                        var xPos = initialXpos + adderX * pageData.position;
                        var yPos = initialYpos + adderY * pageData.position + pageGrip;
                        return new Page(pageData, xPos, yPos, k++);
                    });
                }

                _createClass(LayoutModel, [{
                    key: 'getMarketsByIndex',
                    value: function getMarketsByIndex(index) {
                        if (this.layoutVersionIdList.length - 1 < index || index < 0) {
                            return;
                        }
                        return this.layoutVersionsMap.get(this.layoutVersionIdList[index]);
                    }
                }, {
                    key: 'getFirstMarketByIndex',
                    value: function getFirstMarketByIndex(index) {
                        if (this.layoutVersionIdList.length - 1 < index || index < 0) {
                            return;
                        }
                        return this.layoutVersionsMap.get(this.layoutVersionIdList[index])[0];
                    }
                }, {
                    key: 'getLayoutVersionMap',
                    value: function getLayoutVersionMap() {
                        return this.layoutVersionsMap;
                    }
                }, {
                    key: 'getLayoutVersionIdList',
                    value: function getLayoutVersionIdList() {
                        return this.layoutVersionIdList;
                    }
                }, {
                    key: 'getLayoutVersionList',
                    value: function getLayoutVersionList() {
                        var _this2 = this;

                        return this.layoutVersionIdList.map(function (id) {
                            _this2.layoutVersionsMap.get(id);
                        });
                    }
                }, {
                    key: 'getLayoutVersionIndex',
                    value: function getLayoutVersionIndex(id) {
                        var idList = this.getLayoutVersionIdList();
                        for (var index = 0; index < idList.length; ++index) {
                            if (idList[index] == id) {
                                return index;
                            }
                        }
                        return null;
                    }
                }, {
                    key: 'getChannel',
                    value: function getChannel() {
                        return this.channelId;
                    }
                }, {
                    key: 'addPageToLayout',
                    value: function addPageToLayout(pageData) {
                        this.pageList.push(new Page(pageData));
                    }
                }, {
                    key: 'exportPageAdd',
                    value: function exportPageAdd(page, xPos, yPos, zPos, h, w, unit) {

                        var format = {
                            position: parseInt(page.index, 10),
                            x: xPos,
                            y: yPos,
                            z: zPos,
                            gridVersionList: [{
                                pageWidth: w,
                                pageHeight: h,
                                unit: unit,
                                name: page.pageVersionName
                            }]
                        };
                        return format;
                    }
                }, {
                    key: 'exportPageLayoutList',
                    value: function exportPageLayoutList(id, pages) {

                        var layoutPage = [];
                        pages.forEach(function (page) {
                            var format = {
                                id: id,
                                position: parseInt(page.index, 10),
                                x: page.x,
                                y: page.y,
                                z: page.z,
                                spreadId: null
                            };
                            layoutPage.push(format);
                        });
                        return layoutPage;
                    }
                }, {
                    key: 'exportPagesUpdate',
                    value: function exportPagesUpdate(pages) {

                        var layoutPageList = [];
                        pages.forEach(function (page) {
                            var format = {
                                id: page.id,
                                position: parseInt(page.index, 10),
                                x: page.position.x,
                                y: page.position.y,
                                z: page.position.z
                            };
                            layoutPageList.push(format);
                        });
                        return { layoutPageList: layoutPageList };
                    }
                }, {
                    key: 'exportPageVersionDelete',
                    value: function exportPageVersionDelete(pageVersions, moveOffers) {
                        var layoutPageList = [];
                        pageVersions.forEach(function (pv) {
                            var format = {
                                id: pv.page.id
                            };
                            layoutPageList.push(format);
                        });
                        return {
                            layoutPageList: layoutPageList,
                            moveOffersToParkingLot: moveOffers
                        };
                    }
                }, {
                    key: 'exportPageVersionClearTemplate',
                    value: function exportPageVersionClearTemplate(pageVersions, moveOffers) {
                        var pageGridVersionList = [];
                        pageVersions.forEach(function (pv) {
                            var format = {
                                id: pv.id
                            };
                            pageGridVersionList.push(format);
                        });
                        return {
                            pageGridVersionList: pageGridVersionList,
                            moveOffersToParkingLot: moveOffers
                        };
                    }
                }, {
                    key: 'exportPageVersionApplyTemplate',
                    value: function exportPageVersionApplyTemplate(template, pageVersions, moveOffers) {
                        var pageGridVersionList = [];
                        pageVersions.forEach(function (pv) {
                            var format = {
                                id: pv.id
                            };
                            pageGridVersionList.push(format);
                        });
                        return {
                            pageLayoutTemplate: {
                                id: template
                            },
                            pageGridVersionList: pageGridVersionList,
                            moveOffersToParkingLot: moveOffers
                        };
                    }
                }, {
                    key: 'exportPageVersionUpdate',
                    value: function exportPageVersionUpdate(pageVersions, pageGridVersion) {
                        var dataChange = false;
                        var pageGridVersionList = [];
                        pageVersions.forEach(function (pv) {
                            var gridVersion = {
                                id: pv.id
                            };
                            if (pageGridVersion.merchandiseHierarchyList && pageGridVersion.merchandiseHierarchyList.id > 1) {
                                gridVersion.merchandiseHierarchyList = {
                                    id: pageGridVersion.merchandiseHierarchyList.id
                                };
                                dataChange = true;
                            }
                            var x = undefined;
                            for (x in pageGridVersion) {
                                if (pageGridVersion[x] && x != 'merchandiseHierarchyList' && x != 'layoutPage') {
                                    dataChange = true;
                                    gridVersion[x] = pageGridVersion[x];
                                }
                            }
                            if (dataChange) {
                                pageGridVersionList.push(gridVersion);
                            }
                        });

                        if (!dataChange) {
                            return null;
                        }
                        return { pageGridVersionList: pageGridVersionList };
                    }
                }]);

                return LayoutModel;
            })();

            _export('default', LayoutModel);
        }
    };
});
System.register('promo-manager/layout-view/helpers/page-ui', ['npm:babel-runtime@5.8.24/helpers/create-class', 'npm:babel-runtime@5.8.24/helpers/class-call-check', 'npm:babel-runtime@5.8.24/helpers/to-consumable-array', 'npm:babel-runtime@5.8.24/core-js/get-iterator', 'promo-manager/layout-view/layout-view-consts', 'npm:gl-matrix@2.3.1', 'promo-manager/layout-view/model/page-version', 'promo-manager/layout-view/model/block', 'helpers/util'], function (_export) {
    var _createClass, _classCallCheck, _toConsumableArray, _getIterator, LayoutConsts, glMatrix, PageVersion, Block, Util, vec4, mat4, PageUi;

    return {
        setters: [function (_npmBabelRuntime5824HelpersCreateClass) {
            _createClass = _npmBabelRuntime5824HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5824HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5824HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5824HelpersToConsumableArray) {
            _toConsumableArray = _npmBabelRuntime5824HelpersToConsumableArray['default'];
        }, function (_npmBabelRuntime5824CoreJsGetIterator) {
            _getIterator = _npmBabelRuntime5824CoreJsGetIterator['default'];
        }, function (_promoManagerLayoutViewLayoutViewConsts) {
            LayoutConsts = _promoManagerLayoutViewLayoutViewConsts['default'];
        }, function (_npmGlMatrix231) {
            glMatrix = _npmGlMatrix231['default'];
        }, function (_promoManagerLayoutViewModelPageVersion) {
            PageVersion = _promoManagerLayoutViewModelPageVersion['default'];
        }, function (_promoManagerLayoutViewModelBlock) {
            Block = _promoManagerLayoutViewModelBlock['default'];
        }, function (_helpersUtil) {
            Util = _helpersUtil['default'];
        }],
        execute: function () {
            'use strict';

            vec4 = glMatrix.vec4;
            mat4 = glMatrix.mat4;

            PageUi = (function () {
                function PageUi(selectedLayoutVersionIndex, layoutModel, marketToPageVersionIdManager, pageVersions, viewport) {
                    _classCallCheck(this, PageUi);

                    this.selectedLayoutVersionIndex = selectedLayoutVersionIndex;
                    this.layoutModel = layoutModel;
                    this.marketToPageVersionIdManager = marketToPageVersionIdManager;
                    this.pageVersions = pageVersions;
                    this.viewport = viewport;
                }

                _createClass(PageUi, [{
                    key: 'movePageToTop',
                    value: function movePageToTop(topPageVersion) {
                        if (!topPageVersion) {
                            return;
                        }
                        var pageVersionList = this.getPageVersionsForSelectedLayoutVersion();
                        pageVersionList.filter(function (pageVersion) {
                            return pageVersion.position.z > topPageVersion.position.z;
                        }).map(function (pageVersion) {
                            return --pageVersion.position.z;
                        });
                        topPageVersion.position.z = pageVersionList.length - 1;
                    }
                }, {
                    key: 'autoArrangePages',
                    value: function autoArrangePages() {
                        // Get sorted list of leading page versions
                        var indexComparator = function indexComparator(a, b) {
                            return a.page.index - b.page.index;
                        };
                        var independentPageVersions = this.getIndependentPageVersions().sort(indexComparator);

                        // Auto-arrange using greedy algorithm (minimum lines)
                        // TODO: Implement Knuth's algorithm (minimum raggedness)
                        var currX = 0;
                        var currY = 0;
                        var currMaxY = 0;

                        // Buffer in trailing margin to simplify the calculations
                        var xLimit = LayoutConsts.AUTO_ARRANGE_W + LayoutConsts.AUTO_ARRANGE_X_MARGIN;

                        var originOffsetX = LayoutConsts.AUTO_ARRANGE_X_ORIGIN;
                        var originOffsetY = LayoutConsts.AUTO_ARRANGE_Y_ORIGIN;

                        var _iteratorNormalCompletion = true;
                        var _didIteratorError = false;
                        var _iteratorError = undefined;

                        try {
                            for (var _iterator = _getIterator(independentPageVersions), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                                var pv = _step.value;

                                var pageW = LayoutConsts.AUTO_ARRANGE_X_MARGIN;
                                var pageH = LayoutConsts.AUTO_ARRANGE_Y_MARGIN;
                                var uiOffset = pv.getPageVersionUiOffset();

                                // If the page is part of a spread group, add their extents as well
                                [pv].concat(_toConsumableArray(this.getDependentPageVersionsInGroup(pv.page.spreadId))).forEach(function (pv) {
                                    var pageExtent = pv.getExtent();
                                    pageW += pageExtent[0];
                                    pageH += pageExtent[1];
                                });

                                // Update the current line's settings
                                if (currX === 0 || xLimit >= currX + pageW) {
                                    // Case A: Don't start new line when page (group) fits or it's the first line
                                    pv.position.x = originOffsetX + currX + uiOffset[0];
                                    pv.position.y = originOffsetY + currY + uiOffset[1];
                                    pv.position.z = pv.page.index;

                                    // Update current line's extent
                                    currX += pageW;
                                    currMaxY = Math.max(currMaxY, pageH);
                                } else {
                                    // Case B: Start new line
                                    currY += currMaxY;

                                    // Move the page on the new line
                                    pv.position.x = originOffsetX + 0 + uiOffset[0];
                                    pv.position.y = originOffsetY + currY + uiOffset[1];
                                    pv.position.z = pv.page.index;

                                    // Update current line's extent
                                    currX = pageW;
                                    currMaxY = pageH;
                                }
                            }
                        } catch (err) {
                            _didIteratorError = true;
                            _iteratorError = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion && _iterator['return']) {
                                    _iterator['return']();
                                }
                            } finally {
                                if (_didIteratorError) {
                                    throw _iteratorError;
                                }
                            }
                        }
                    }
                }, {
                    key: 'autoArrangeDroppedPageVersion',
                    value: function autoArrangeDroppedPageVersion(pageVersion, dx, dy) {
                        var newX = pageVersion.position.x + dx;
                        var newY = pageVersion.position.y + dy;

                        if (dx == 0 && dy == 0) {
                            return false;
                        }

                        // Define common comparators
                        var indexComparator = function indexComparator(a, b) {
                            return a.page.index - b.page.index;
                        };
                        var positionComparator = function positionComparator(a, b) {
                            return a.position.y - b.position.y || a.position.x - b.position.x;
                        };

                        // Used to determine pages participating in the grid system (i.e. ignore dependent pages)
                        var pvListByPosition = this.getIndependentPageVersions().sort(positionComparator);

                        // Add 0.5 * vertical margin to the newY when deciding which row it belongs
                        // to so margin is divided evenly between top/bottom of each row
                        newY += 0.5 * LayoutConsts.AUTO_ARRANGE_Y_MARGIN;

                        // Floor newY to an existing row's y value
                        var targetPageVersionStub = { position: { x: 0, y: newY } };
                        var rowStartIndex = Util.clamp(Util.binarySearchInsertFloor(pvListByPosition, targetPageVersionStub, positionComparator), 0, pvListByPosition.length - 1);

                        targetPageVersionStub.position.x = newX;
                        targetPageVersionStub.position.y = pvListByPosition[rowStartIndex].position.y;

                        // For n pages, there are n+1 insertion positions: before each page and one after the last page.
                        // When moving a single page, two of those insertion positions are trivial moves: inserting before
                        // the page's current position and inserting after the page's current position.

                        // If the target is after the page's current position, the target index should be decreased by 1 to
                        // when determining the range of participating pages between the source and destination locations.

                        // Once the source and destination are determined, we may perform a rotation on the page indices to
                        // perform the reordering.
                        var initialIndex = Util.binarySearch(pvListByPosition, pageVersion, positionComparator);
                        var targetIndex = Util.binarySearchInsertCeiling(pvListByPosition, targetPageVersionStub, positionComparator);

                        // Case: Trivial move - inserting between prior page and current page, or between current page and next page
                        if (targetIndex === initialIndex || targetIndex === initialIndex + 1) {
                            return false;
                        }

                        // Case: Moving to the right, so the participating page is one index less than the insertion point
                        if (targetIndex > initialIndex) {
                            --targetIndex;
                        }

                        // Locate the (inclusive) destination page to be rotated (left or right page rotation)
                        var dstPageVersion = pvListByPosition[targetIndex];

                        // Reindex pages between the starting and ending positions
                        // Invariant: srcIndex and dstIndex should be found and thus >= 0
                        var pvListByIndex = this.getPageVersionsForSelectedLayoutVersion().sort(indexComparator);
                        var srcIndex = Util.binarySearch(pvListByIndex, pageVersion, indexComparator);
                        var dstIndex = Util.binarySearch(pvListByIndex, dstPageVersion, indexComparator);

                        // Used to update page positions
                        // Note: Index is 1-based count so we need to offset in the array lookup
                        if (srcIndex < dstIndex) {
                            // Source page is jumping forward, so decrement intermediary pages (source, destination]
                            var updateRangeStart = srcIndex + 1;
                            var updateRangeEnd = dstIndex;
                            for (var i = updateRangeStart; i <= updateRangeEnd; ++i) {
                                --pvListByIndex[i].page.index;
                            }
                        } else {
                            // dstIndex...srcIndex: a[dstIndex]...a[srcIndex-1] are incremented
                            // Source page is jumping backwards, so increment intermediary pages [destination, source)
                            var updateRangeStart = dstIndex;
                            var updateRangeEnd = srcIndex - 1;
                            for (var i = updateRangeStart; i <= updateRangeEnd; ++i) {
                                ++pvListByIndex[i].page.index;
                            }
                        }
                        // a[srcIndex] becomes dstIndex (convert from 0- to 1- based indexing)
                        pageVersion.page.index = dstIndex + 1;

                        this.autoArrangePages();
                        return true;
                    }
                }, {
                    key: 'isIndependentPageVersion',
                    value: function isIndependentPageVersion(pageVersion) {
                        var page = pageVersion.page;
                        var spreadGroup = this.layoutModel.spreadsMap.get(page.spreadId);
                        return !page.spreadId || spreadGroup && spreadGroup.getIndexFromPageId(page.id) === 0;
                    }

                    // Return only leading pages
                }, {
                    key: 'getIndependentPageVersions',
                    value: function getIndependentPageVersions() {
                        var _this = this;

                        return this.getPageVersionsForSelectedLayoutVersion().filter(function (pv) {
                            return _this.isIndependentPageVersion(pv);
                        });
                    }

                    // Return only trailing pages
                }, {
                    key: 'getDependentPageVersionsInGroup',
                    value: function getDependentPageVersionsInGroup(spreadGroupId) {
                        if (!spreadGroupId) return [];

                        // TODO: Should be a more efficient way to get this information
                        var spreadGroup = this.layoutModel.spreadsMap.get(spreadGroupId);
                        return this.getPageVersionsForSelectedLayoutVersion().filter(function (pv) {
                            return pv.page.spreadId === spreadGroupId && (spreadGroup && spreadGroup.getIndexFromPageId(pv.page.id) !== 0);
                        });
                    }
                }, {
                    key: 'updateCameraSpaceCoordinates',
                    value: function updateCameraSpaceCoordinates() {
                        for (var _len = arguments.length, objects = Array(_len), _key = 0; _key < _len; _key++) {
                            objects[_key] = arguments[_key];
                        }

                        var camera = objects.pop();
                        var camMat4 = camera.getMatrix();
                        (objects.length > 0 ? objects : this.getPageVersionsForSelectedLayoutVersion()).forEach(function (obj) {
                            if (angular.isFunction(obj.calculateCameraSpaceCoordinates)) {
                                obj.calculateCameraSpaceCoordinates(camMat4);
                            } else {
                                obj.forEach(function (o) {
                                    o.calculateCameraSpaceCoordinates(camMat4);
                                });
                            }
                        });
                    }
                }, {
                    key: 'updateWorldSpaceCoordinates',
                    value: function updateWorldSpaceCoordinates() {
                        for (var _len2 = arguments.length, objects = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                            objects[_key2] = arguments[_key2];
                        }

                        var camera = objects.pop();
                        (objects.length > 0 ? objects : this.getPageVersionsForSelectedLayoutVersion()).forEach(function (obj) {
                            if (angular.isFunction(obj.calculateWorldSpaceCoordinates)) {
                                obj.calculateWorldSpaceCoordinates();
                            } else {
                                obj.forEach(function (o) {
                                    o.calculateWorldSpaceCoordinates();
                                });
                            }
                        });
                        objects.push(camera);
                        this.updateCameraSpaceCoordinates.apply(this, objects);
                    }
                }, {
                    key: 'setPageIndex',
                    value: function setPageIndex(pageVersion, camera) {
                        if (!pageVersion) {
                            return;
                        }
                        var pageVersions = this.getPageVersionsForSelectedLayoutVersion();
                        var affectedPageVersions = this.getPageVersionsAbove(pageVersion);
                        affectedPageVersions.push(pageVersion);
                        this.viewport.removeRtreeObjects(affectedPageVersions);
                        this.movePageToTop(pageVersion);
                        this.updateWorldSpaceCoordinates(affectedPageVersions, camera);
                        this.viewport.insertRtreeObjects(affectedPageVersions);
                    }
                }, {
                    key: 'getPageVersionsForSelectedLayoutVersion',
                    value: function getPageVersionsForSelectedLayoutVersion() {
                        var _this2 = this;

                        var layoutVersionIndex = this.selectedLayoutVersionIndex;
                        var marketId = this.layoutModel.getFirstMarketByIndex(layoutVersionIndex);
                        var pageVersionIds = this.marketToPageVersionIdManager.getPageVersionIds(marketId);
                        var pageVersions = pageVersionIds.map(function (pageVersionId) {
                            var pv = _this2.pageVersions.get(pageVersionId);
                            if (pv) {
                                return pv;
                            }
                        });
                        return pageVersions;
                    }
                }, {
                    key: 'getPageVersionsAbove',
                    value: function getPageVersionsAbove(topPageVersion) {
                        if (!topPageVersion) {
                            return;
                        }
                        var z = topPageVersion.position.z;
                        var pageVersionList = this.getPageVersionsForSelectedLayoutVersion();
                        return pageVersionList.filter(function (pageVersion) {
                            return pageVersion.position.z > topPageVersion.position.z;
                        });
                    }
                }, {
                    key: 'getLastPageNumber',
                    value: function getLastPageNumber() {
                        var max = [];
                        var pageVersionList = this.getPageVersionsForSelectedLayoutVersion();
                        pageVersionList.forEach(function (pageVersion) {
                            max.push(pageVersion.getPageNumber());
                        });
                        // de-facto resig
                        return Math.max.apply(Math, max);
                    }
                }, {
                    key: 'getLastZindexNumber',
                    value: function getLastZindexNumber() {
                        var max = [];
                        var pageVersionList = this.getPageVersionsForSelectedLayoutVersion();
                        pageVersionList.forEach(function (pageVersion) {
                            max.push(pageVersion.getZindex());
                        });
                        // de-facto resig
                        return Math.max.apply(Math, max);
                    }
                }, {
                    key: 'getPageVersionDetails',
                    value: function getPageVersionDetails() {
                        var ids = [];
                        var pageVersionList = this.getPageVersionsForSelectedLayoutVersion();
                        pageVersionList.forEach(function (pageVersion) {
                            ids.push({ id: pageVersion.getPageId(), index: pageVersion.getPageNumber(), name: pageVersion.getPageName(), position: pageVersion.getPos() });
                        });
                        return ids;
                    }
                }, {
                    key: 'getPageVersionDetailsForVersionId',
                    value: function getPageVersionDetailsForVersionId(pageVersionId) {
                        var pageInformation = {};
                        var pageVersionList = this.getPageVersionsForSelectedLayoutVersion();
                        pageVersionList.forEach(function (pageVersion) {
                            if (pageVersionId == pageVersion.id) {
                                pageInformation.id = pageVersion.getPageId();
                                pageInformation.index = pageVersion.getPageNumber();
                                pageInformation.name = pageVersion.getPageName();
                                pageInformation.position = pageVersion.getPos();
                            }
                        });
                        return pageInformation;
                    }
                }]);

                return PageUi;
            })();

            _export('default', PageUi);
        }
    };
});
System.register("promo-manager/layout-view/clipboard/clipboard-global", ["npm:babel-runtime@5.8.24/helpers/get", "npm:babel-runtime@5.8.24/helpers/inherits", "npm:babel-runtime@5.8.24/helpers/create-class", "npm:babel-runtime@5.8.24/helpers/class-call-check", "promo-manager/layout-view/clipboard/clipboard"], function (_export) {
	var _get, _inherits, _createClass, _classCallCheck, Clipboard, ClipboardGlobal;

	return {
		setters: [function (_npmBabelRuntime5824HelpersGet) {
			_get = _npmBabelRuntime5824HelpersGet["default"];
		}, function (_npmBabelRuntime5824HelpersInherits) {
			_inherits = _npmBabelRuntime5824HelpersInherits["default"];
		}, function (_npmBabelRuntime5824HelpersCreateClass) {
			_createClass = _npmBabelRuntime5824HelpersCreateClass["default"];
		}, function (_npmBabelRuntime5824HelpersClassCallCheck) {
			_classCallCheck = _npmBabelRuntime5824HelpersClassCallCheck["default"];
		}, function (_promoManagerLayoutViewClipboardClipboard) {
			Clipboard = _promoManagerLayoutViewClipboardClipboard["default"];
		}],
		execute: function () {
			"use strict";

			ClipboardGlobal = (function (_Clipboard) {
				_inherits(ClipboardGlobal, _Clipboard);

				function ClipboardGlobal(API) {
					_classCallCheck(this, ClipboardGlobal);

					_get(Object.getPrototypeOf(ClipboardGlobal.prototype), "constructor", this).call(this, API);
					this.setPageLength(3);
				}

				_createClass(ClipboardGlobal, [{
					key: "reload",
					value: function reload(pageIndex, pageLength) {
						var _this = this;

						this.setLoading(true);
						this.API.PromoManager.LayoutView.getGlobalClipboard(pageIndex, pageLength).then(function (result) {
							var payload = result.data.data;
							_this.setData(payload.clipboardList, payload.pageIndex, payload.pageLength, payload.total);
						}, function (rejection) {
							console.log("Error getting global clipboard");
						})["finally"](function () {
							_this.setLoading(false);
						});
					}
				}]);

				return ClipboardGlobal;
			})(Clipboard);

			_export("default", ClipboardGlobal);
		}
	};
});
System.register('promo-manager/common/item-selection/item-selection', ['npm:babel-runtime@5.8.24/helpers/create-class', 'npm:babel-runtime@5.8.24/helpers/class-call-check', 'promo-manager/common/item-selection/item-selection-template.html!github:systemjs/plugin-text@0.0.2', 'promo-manager/layout-view/layout-view-consts', 'helpers/util', 'helpers/notifier', 'helpers/tree-map', 'promo-manager/helpers/merchandise-hierarchy-helpers', 'npm:trie-search@0.1.1'], function (_export) {
    var _createClass, _classCallCheck, itemselection, LayoutConsts, Util, Notifier, TreeMap, MerchandiseHierarchyHelpers, TrieSearch, ItemSelectionController, ItemSelectionModalController;

    return {
        setters: [function (_npmBabelRuntime5824HelpersCreateClass) {
            _createClass = _npmBabelRuntime5824HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5824HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5824HelpersClassCallCheck['default'];
        }, function (_promoManagerCommonItemSelectionItemSelectionTemplateHtmlGithubSystemjsPluginText002) {
            itemselection = _promoManagerCommonItemSelectionItemSelectionTemplateHtmlGithubSystemjsPluginText002['default'];
        }, function (_promoManagerLayoutViewLayoutViewConsts) {
            LayoutConsts = _promoManagerLayoutViewLayoutViewConsts['default'];
        }, function (_helpersUtil) {
            Util = _helpersUtil['default'];
        }, function (_helpersNotifier) {
            Notifier = _helpersNotifier['default'];
        }, function (_helpersTreeMap) {
            TreeMap = _helpersTreeMap['default'];
        }, function (_promoManagerHelpersMerchandiseHierarchyHelpers) {
            MerchandiseHierarchyHelpers = _promoManagerHelpersMerchandiseHierarchyHelpers['default'];
        }, function (_npmTrieSearch011) {
            TrieSearch = _npmTrieSearch011['default'];
        }],
        execute: function () {
            'use strict';

            ItemSelectionController = (function () {
                function ItemSelectionController($scope, $q, $translate, $uiModal, API) {
                    var _this = this;

                    _classCallCheck(this, ItemSelectionController);

                    this.$scope = $scope;
                    this.$translate = $translate;
                    this.$modal = $uiModal;
                    MerchandiseHierarchyHelpers.loadMerchandiseHierarchiesImmediateFamily($q, API).then(function (result) {
                        _this.merchandiseHierarchy = result;
                        _this.merchandiseHierarchySearch = MerchandiseHierarchyHelpers.buildMhSearchTree(_this.merchandiseHierarchy);
                    });
                }

                _createClass(ItemSelectionController, [{
                    key: 'open',
                    value: function open() {
                        var _this2 = this;

                        var updateModel = function updateModel(result) {
                            console.log(result);
                        };

                        var _$modal$open = this.$modal.open({
                            template: itemselection,
                            windowClass: 'theme-explosive-puppy layout-viewport item-selection',
                            controllerAs: 'ctrl',
                            controller: ItemSelectionModalController,
                            resolve: {
                                merchandiseHierarchy: function merchandiseHierarchy() {
                                    return _this2.merchandiseHierarchy;
                                },
                                merchandiseHierarchySearch: function merchandiseHierarchySearch() {
                                    return _this2.merchandiseHierarchySearch;
                                }
                            }
                        });

                        var result = _$modal$open.result;
                        var close = _$modal$open.close;
                        var dismiss = _$modal$open.dismiss;

                        result.then(function (data) {
                            updateModel(data);
                        }, function (data) {
                            console.log("dismiss: ", data);
                        });
                    }
                }]);

                return ItemSelectionController;
            })();

            _export('ItemSelectionController', ItemSelectionController);

            ItemSelectionController.$inject = ['$scope', '$q', '$translate', '$uiModal', 'API'];

            ItemSelectionModalController = (function () {
                function ItemSelectionModalController($scope, $modalInstance, $translate, merchandiseHierarchy, merchandiseHierarchySearch) {
                    var _this3 = this;

                    _classCallCheck(this, ItemSelectionModalController);

                    this.$modalInstance = $modalInstance;
                    this.$translate = $translate;
                    this.itemSelections = [];
                    this.itemTree = [];
                    this.itemSearchTree = merchandiseHierarchySearch;
                    this.itemSelectionTree = merchandiseHierarchy;
                    this.hierarchyId = merchandiseHierarchy.getRootId();
                    this.rootId = merchandiseHierarchy.getRootId();
                    this.itemTreeLabel = this.$translate.instant('ITEM_SEARCH_TREE_LABEL');
                    this.itemSearch = null;
                    this.itemPreviousSearch = null;
                    this.search = {
                        disabled: false,
                        itemSearch: function itemSearch(value) {
                            if (angular.isDefined(value)) {
                                _this3.itemSearch = value;
                                _this3.loadItems();
                                return _this3.itemSearch;
                            }
                            return _this3.itemSearch;
                        }
                    };
                    this.init();
                    this.mhLabelsByDepth = [this.$translate.instant('OFFERS_LIST_LEVEL_1'), this.$translate.instant('OFFERS_LIST_LEVEL_2'), this.$translate.instant('OFFERS_LIST_LEVEL_3'), this.$translate.instant('OFFERS_LIST_LEVEL_4')].slice(0, this.itemSelectionTree.showLevels.length);
                }

                _createClass(ItemSelectionModalController, [{
                    key: 'init',
                    value: function init() {
                        //set the top level view
                        this.itemTree = [];
                        var root = this.itemSelectionTree.getNode(this.hierarchyId);
                        if (root) {
                            var rootNode = this.itemSelectionTree.getRootNode();
                            //clear any nodes from prior searches
                            var children = rootNode.getChildren();
                            children.forEach(function (child) {
                                child.nodes = [];
                            });

                            this.itemTree.push({ name: name, nodes: children });
                        }
                    }
                }, {
                    key: 'loadItems',
                    value: function loadItems() {
                        var _this4 = this;

                        var candidates = [];
                        if (this.itemSearch) {
                            candidates = this.itemSearchTree.get(this.itemSearch);
                        }
                        console.log(candidates);
                        this.init();

                        candidates.forEach(function (candidate) {
                            // the open function assumes that the parent is open, so we need a pre-processor
                            //send each path in to create the node
                            if (!candidate.node) {
                                return;
                            }
                            var path = candidate.node.getPath();
                            path.forEach(function (node) {
                                _this4.open(node);
                            });
                        });
                    }
                }, {
                    key: 'delete',
                    value: function _delete(node) {
                        node.nodes = [];
                    }
                }, {
                    key: 'toggle',
                    value: function toggle(state, node) {
                        if (state) {
                            this.open(node);
                        } else {
                            this['delete'](node);
                        }
                    }
                }, {
                    key: 'open',
                    value: function open(node) {
                        if (node) {
                            var path = node.getPath();
                            var parentNode = path.pop();
                            node.nodes = parentNode.getChildren();
                        }
                    }
                }, {
                    key: 'itemSelection',
                    value: function itemSelection(state, node) {
                        if (state) {
                            this.open(node);
                            if (this.hasSelectedItem(node)) {
                                Notifier.error('ITEM_SEARCH_SELECTED_ITEMS_DUPLICATE_ERROR');
                                return;
                            }
                            this.itemSelections.push(node);
                        } else {
                            this['delete'](node);
                            this.deleteSelection(node);
                        }
                    }
                }, {
                    key: 'formatSelectedItem',
                    value: function formatSelectedItem(node) {
                        var selection = {
                            node: node
                        };
                        return selection;
                    }
                }, {
                    key: 'hasSelectedItem',
                    value: function hasSelectedItem(node) {
                        return this.itemSelections.some(function (selected) {
                            return selected.id == node.id;
                        });
                    }
                }, {
                    key: 'isSelectedItem',
                    value: function isSelectedItem(node) {
                        if (node && node.id) {
                            return this.hasSelectedItem(node);
                        }
                    }
                }, {
                    key: 'openSelection',
                    value: function openSelection(node) {
                        this.searchItems(node);
                    }
                }, {
                    key: 'deleteSelection',
                    value: function deleteSelection(node) {
                        this.itemSelections = this.itemSelections.filter(function (el) {
                            return JSON.stringify(el.ids) !== JSON.stringify(node.ids);
                        });
                    }
                }, {
                    key: 'close',
                    value: function close() {
                        this.$modalInstance.close();
                    }
                }, {
                    key: 'dismiss',
                    value: function dismiss() {
                        this.$modalInstance.dismiss();
                    }
                }]);

                return ItemSelectionModalController;
            })();

            _export('ItemSelectionModalController', ItemSelectionModalController);
        }
    };
});
System.register('promo-manager/layout-view/page-actions/add-pages-modal', ['npm:babel-runtime@5.8.24/helpers/create-class', 'npm:babel-runtime@5.8.24/helpers/class-call-check', 'npm:babel-runtime@5.8.24/core-js/get-iterator', 'promo-manager/layout-view/page-actions/page-add-modal.html!github:systemjs/plugin-text@0.0.2', 'promo-manager/layout-view/layout-view-consts', 'promo-manager/layout-view/model/layout-model'], function (_export) {
    var _createClass, _classCallCheck, _getIterator, pageadd, LayoutConsts, LayoutModel, AddPagesModal, AddPagesController;

    return {
        setters: [function (_npmBabelRuntime5824HelpersCreateClass) {
            _createClass = _npmBabelRuntime5824HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5824HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5824HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5824CoreJsGetIterator) {
            _getIterator = _npmBabelRuntime5824CoreJsGetIterator['default'];
        }, function (_promoManagerLayoutViewPageActionsPageAddModalHtmlGithubSystemjsPluginText002) {
            pageadd = _promoManagerLayoutViewPageActionsPageAddModalHtmlGithubSystemjsPluginText002['default'];
        }, function (_promoManagerLayoutViewLayoutViewConsts) {
            LayoutConsts = _promoManagerLayoutViewLayoutViewConsts['default'];
        }, function (_promoManagerLayoutViewModelLayoutModel) {
            LayoutModel = _promoManagerLayoutViewModelLayoutModel['default'];
        }],
        execute: function () {
            'use strict';

            AddPagesModal = (function () {
                function AddPagesModal() {
                    _classCallCheck(this, AddPagesModal);
                }

                _createClass(AddPagesModal, null, [{
                    key: 'open',
                    value: function open($scope, $modal, $translate, layoutView) {
                        var _this = this;

                        this.layoutView = layoutView;

                        var updateModel = function updateModel(result) {
                            console.log(result);
                        };

                        var _$modal$open = $modal.open({
                            template: pageadd,
                            windowClass: 'theme-explosive-puppy layout-viewport',
                            controllerAs: 'ctrl',
                            controller: AddPagesController,
                            resolve: {
                                layoutView: function layoutView() {
                                    return _this.layoutView;
                                }
                            }
                        });

                        var result = _$modal$open.result;
                        var close = _$modal$open.close;
                        var dismiss = _$modal$open.dismiss;

                        result.then(function (data) {
                            updateModel(data);
                        }, function (data) {
                            console.log("dismiss: ", data);
                        });
                    }
                }]);

                return AddPagesModal;
            })();

            _export('AddPagesModal', AddPagesModal);

            AddPagesController = (function () {
                function AddPagesController($scope, $modalInstance, $translate, layoutView) {
                    _classCallCheck(this, AddPagesController);

                    this.layoutView = layoutView;
                    this.$modalInstance = $modalInstance;
                    this.Notifier = this.layoutView.Notifier;
                    this.h = LayoutConsts.LAYOUT_VIEW_PAGE_GRID_VERSION_HEIGHT_DEFAULT;
                    this.w = LayoutConsts.LAYOUT_VIEW_PAGE_GRID_VERSION_WIDTH_DEFAULT;
                    this.count = 1;
                    this.previousCount = 1;
                    this.pageUi = this.layoutView.getPageUi();
                    this.lastPageNumber = this.pageUi.getLastPageNumber() + 1;
                    this.pagePrefix = $translate.instant('LAYOUT_VIEW_PAGE_GRID_VERSION_NAME_DEFAULT');
                    this.grid = [{
                        index: this.lastPageNumber,
                        pageVersionName: this.pagePrefix + ' ' + this.lastPageNumber
                    }];
                    this.pageExporter = this.layoutView.layoutModel;
                }

                _createClass(AddPagesController, [{
                    key: 'createGrid',
                    value: function createGrid() {
                        if (!this.count) {
                            return;
                        }
                        if (isNaN(parseFloat(this.count)) || !isFinite(this.count)) {
                            this.Notifier.error('LAYOUT_VIEW_PAGES_ERROR_INVALID_PAGE');
                            this.count = angular.copy(this.previousCount);
                            return;
                        }
                        if (this.previousCount != this.count) {
                            if (this.previousCount < this.count) {
                                for (var i = parseInt(this.previousCount); i < this.count; i++) {
                                    this.grid.push({ index: this.lastPageNumber + i, pageVersionName: this.pagePrefix + ' ' + (this.lastPageNumber + i) });
                                };
                            } else {
                                for (var i = this.previousCount - this.count; i > 0; i--) {
                                    this.grid.pop();
                                };
                            }
                        }
                        this.previousCount = angular.copy(this.count);
                    }
                }, {
                    key: 'hasPageVersionName',
                    value: function hasPageVersionName() {
                        return this.grid.every(function (pageVersion) {
                            return pageVersion.pageVersionName;
                        });
                    }
                }, {
                    key: 'invalidPageData',
                    value: function invalidPageData() {
                        var uniqueIds = this.pageUi.getPageVersionDetails();
                        var seenIndexMap = {};
                        var seenNameMap = {};
                        uniqueIds.forEach(function (id) {
                            seenIndexMap[id.index] = true;
                            seenNameMap[id.name] = true;
                        });
                        var _iteratorNormalCompletion = true;
                        var _didIteratorError = false;
                        var _iteratorError = undefined;

                        try {
                            for (var _iterator = _getIterator(this.grid), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                                var pageVersion = _step.value;

                                var pageVersionIndex = pageVersion.pageNumber;
                                var pageVersionName = pageVersion.pageVersionName;
                                if (seenIndexMap[pageVersionIndex] || pageVersionName && seenNameMap[pageVersionName]) {
                                    // Saw a duplicate - fail validation immediately
                                    return true;
                                }
                            }
                            // None failed validation, so all of them have been seen exactly once
                        } catch (err) {
                            _didIteratorError = true;
                            _iteratorError = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion && _iterator['return']) {
                                    _iterator['return']();
                                }
                            } finally {
                                if (_didIteratorError) {
                                    throw _iteratorError;
                                }
                            }
                        }

                        return false;
                    }
                }, {
                    key: 'createPages',
                    value: function createPages() {
                        var _this2 = this;

                        // get viewport top left x, y
                        var viewport = this.layoutView.getViewport();
                        var adderX = LayoutConsts.ADD_PAGE_X_OFFSET;
                        var adderY = LayoutConsts.ADD_PAGE_Y_OFFSET;
                        var id = this.layoutView.getLayoutModel().id;
                        var pageGrip = LayoutConsts.ADD_PAGE_Y_PAGE_GRIP_OFFSET;
                        var layoutPage = [];
                        var z = this.pageUi.getLastZindexNumber() + 1;
                        this.grid.forEach(function (page, index, array) {
                            var xPos = viewport[0] + adderX * index;
                            var yPos = viewport[1] + adderY * index + pageGrip;
                            var zPos = z++;
                            layoutPage.push(_this2.pageExporter.exportPageAdd(page, xPos, yPos, zPos, _this2.h, _this2.w, LayoutConsts.LAYOUT_VIEW_UNIT_DEFAULT));
                        });
                        this.layoutView.addPages(id, layoutPage);
                    }
                }, {
                    key: 'apply',
                    value: function apply() {
                        if (isNaN(parseFloat(this.count)) || !isFinite(this.count) || this.count < 1) {
                            this.Notifier.error('LAYOUT_VIEW_PAGES_ERROR_INVALID_PAGE');
                            return;
                        }
                        if (isNaN(parseFloat(this.h)) || !isFinite(this.h) || this.h < 1) {
                            this.Notifier.error('LAYOUT_VIEW_PAGES_ERROR_HEIGHT_MISSING');
                            return;
                        }
                        if (isNaN(parseFloat(this.w)) || !isFinite(this.w) || this.w < 1) {
                            this.Notifier.error('LAYOUT_VIEW_PAGES_ERROR_WIDTH_MISSING');
                            return;
                        }
                        // ensure grid version name is populated
                        if (!this.hasPageVersionName()) {
                            this.Notifier.error('LAYOUT_VIEW_PAGES_ERROR_MISSING_GRID');
                            return;
                        }
                        if (this.invalidPageData()) {
                            this.Notifier.error('LAYOUT_VIEW_PAGES_ERROR_DUPLICATE_GRID');
                            return;
                        }
                        this.createPages();
                        this.$modalInstance.close();
                    }
                }, {
                    key: 'dismiss',
                    value: function dismiss() {
                        this.$modalInstance.dismiss();
                    }
                }]);

                return AddPagesController;
            })();

            _export('AddPagesController', AddPagesController);
        }
    };
});
System.register('promo-manager/layout-view/page-actions/index-pages-modal', ['npm:babel-runtime@5.8.24/helpers/create-class', 'npm:babel-runtime@5.8.24/helpers/class-call-check', 'npm:babel-runtime@5.8.24/core-js/get-iterator', 'promo-manager/layout-view/page-actions/page-index-modal.html!github:systemjs/plugin-text@0.0.2', 'promo-manager/layout-view/layout-view-consts', 'helpers/util'], function (_export) {
    var _createClass, _classCallCheck, _getIterator, pageindex, LayoutConsts, Util, IndexPagesModal, IndexPagesController;

    return {
        setters: [function (_npmBabelRuntime5824HelpersCreateClass) {
            _createClass = _npmBabelRuntime5824HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5824HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5824HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5824CoreJsGetIterator) {
            _getIterator = _npmBabelRuntime5824CoreJsGetIterator['default'];
        }, function (_promoManagerLayoutViewPageActionsPageIndexModalHtmlGithubSystemjsPluginText002) {
            pageindex = _promoManagerLayoutViewPageActionsPageIndexModalHtmlGithubSystemjsPluginText002['default'];
        }, function (_promoManagerLayoutViewLayoutViewConsts) {
            LayoutConsts = _promoManagerLayoutViewLayoutViewConsts['default'];
        }, function (_helpersUtil) {
            Util = _helpersUtil['default'];
        }],
        execute: function () {
            'use strict';

            IndexPagesModal = (function () {
                function IndexPagesModal() {
                    _classCallCheck(this, IndexPagesModal);
                }

                _createClass(IndexPagesModal, null, [{
                    key: 'open',
                    value: function open($scope, $modal, $translate, layoutView) {
                        var _this = this;

                        this.layoutView = layoutView;

                        var updateModel = function updateModel(result) {
                            console.log(result);
                        };

                        var _$modal$open = $modal.open({
                            template: pageindex,
                            windowClass: 'theme-explosive-puppy layout-viewport',
                            controllerAs: 'ctrl',
                            controller: IndexPagesController,
                            resolve: {
                                layoutView: function layoutView() {
                                    return _this.layoutView;
                                }
                            }
                        });

                        var result = _$modal$open.result;
                        var close = _$modal$open.close;
                        var dismiss = _$modal$open.dismiss;

                        result.then(function (data) {
                            updateModel(data);
                        }, function (data) {
                            console.log("dismiss: ", data);
                        });
                    }
                }]);

                return IndexPagesModal;
            })();

            _export('IndexPagesModal', IndexPagesModal);

            IndexPagesController = (function () {
                function IndexPagesController($scope, $modalInstance, $translate, layoutView) {
                    _classCallCheck(this, IndexPagesController);

                    this.layoutView = layoutView;
                    this.$modalInstance = $modalInstance;
                    this.Notifier = this.layoutView.Notifier;
                    this.pageUi = this.layoutView.getPageUi();
                    this.grid = this.pageUi.getPageVersionDetails().sort(Util.dynamicSort('index'));
                    this.pageExporter = this.layoutView.layoutModel;
                }

                _createClass(IndexPagesController, [{
                    key: 'hasPageVersionName',
                    value: function hasPageVersionName() {
                        return this.grid.every(function (pageVersion) {
                            return pageVersion.name;
                        });
                    }
                }, {
                    key: 'invalidePageData',
                    value: function invalidePageData() {
                        //it should find itself, but only once
                        var seenIndexMap = {};
                        var seenNameMap = {};
                        var _iteratorNormalCompletion = true;
                        var _didIteratorError = false;
                        var _iteratorError = undefined;

                        try {
                            for (var _iterator = _getIterator(this.grid), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                                var pageVersion = _step.value;

                                var pageVersionIndex = pageVersion.index;
                                var pageVersionName = pageVersion.name;
                                // ignore if name is null
                                if (seenIndexMap[pageVersionIndex] || pageVersionName && seenNameMap[pageVersionName]) {
                                    // Saw a duplicate - fail validation immediately
                                    return true;
                                }
                                // Keep track of what we've seen before
                                seenIndexMap[pageVersionIndex] = true;
                                seenNameMap[pageVersionName] = true;
                            }
                            // None failed validation, so all of them have been seen exactly once
                        } catch (err) {
                            _didIteratorError = true;
                            _iteratorError = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion && _iterator['return']) {
                                    _iterator['return']();
                                }
                            } finally {
                                if (_didIteratorError) {
                                    throw _iteratorError;
                                }
                            }
                        }

                        return false;
                    }
                }, {
                    key: 'orderPages',
                    value: function orderPages() {
                        //refresh the layout
                        var refresh = true;
                        this.layoutView.updatePages(this.pageExporter.exportPagesUpdate(this.grid), refresh);
                    }
                }, {
                    key: 'apply',
                    value: function apply() {
                        // ensure grid version name is populated
                        if (!this.hasPageVersionName()) {
                            this.Notifier.error('LAYOUT_VIEW_PAGES_ERROR_MISSING_GRID');
                            return;
                        }
                        if (this.invalidePageData()) {
                            this.Notifier.error('LAYOUT_VIEW_PAGES_ERROR_DUPLICATE_PAGE');
                            return;
                        }
                        this.orderPages();
                        this.$modalInstance.close();
                    }
                }, {
                    key: 'dismiss',
                    value: function dismiss() {
                        this.$modalInstance.dismiss();
                    }
                }]);

                return IndexPagesController;
            })();

            _export('IndexPagesController', IndexPagesController);
        }
    };
});
System.register('promo-manager/layout-view/page-actions/edit-page-modal', ['npm:babel-runtime@5.8.24/helpers/create-class', 'npm:babel-runtime@5.8.24/helpers/class-call-check', 'promo-manager/layout-view/page-actions/page-edit-modal.html!github:systemjs/plugin-text@0.0.2', 'promo-manager/layout-view/page-actions/page-delete-modal.html!github:systemjs/plugin-text@0.0.2', 'promo-manager/layout-view/page-actions/page-template-clear-modal.html!github:systemjs/plugin-text@0.0.2', 'promo-manager/layout-view/page-actions/page-template-apply-modal.html!github:systemjs/plugin-text@0.0.2', 'promo-manager/layout-view/page-actions/page-move-offers-to-parking-lot-modal.html!github:systemjs/plugin-text@0.0.2', 'promo-manager/layout-view/layout-view-consts'], function (_export) {
    var _createClass, _classCallCheck, pageedit, pagedelete, pagecleartemplate, pageapplytemplate, pagemoveofferstoparkinglot, LayoutConsts, EditPageModal, EditPageController;

    return {
        setters: [function (_npmBabelRuntime5824HelpersCreateClass) {
            _createClass = _npmBabelRuntime5824HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5824HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5824HelpersClassCallCheck['default'];
        }, function (_promoManagerLayoutViewPageActionsPageEditModalHtmlGithubSystemjsPluginText002) {
            pageedit = _promoManagerLayoutViewPageActionsPageEditModalHtmlGithubSystemjsPluginText002['default'];
        }, function (_promoManagerLayoutViewPageActionsPageDeleteModalHtmlGithubSystemjsPluginText002) {
            pagedelete = _promoManagerLayoutViewPageActionsPageDeleteModalHtmlGithubSystemjsPluginText002['default'];
        }, function (_promoManagerLayoutViewPageActionsPageTemplateClearModalHtmlGithubSystemjsPluginText002) {
            pagecleartemplate = _promoManagerLayoutViewPageActionsPageTemplateClearModalHtmlGithubSystemjsPluginText002['default'];
        }, function (_promoManagerLayoutViewPageActionsPageTemplateApplyModalHtmlGithubSystemjsPluginText002) {
            pageapplytemplate = _promoManagerLayoutViewPageActionsPageTemplateApplyModalHtmlGithubSystemjsPluginText002['default'];
        }, function (_promoManagerLayoutViewPageActionsPageMoveOffersToParkingLotModalHtmlGithubSystemjsPluginText002) {
            pagemoveofferstoparkinglot = _promoManagerLayoutViewPageActionsPageMoveOffersToParkingLotModalHtmlGithubSystemjsPluginText002['default'];
        }, function (_promoManagerLayoutViewLayoutViewConsts) {
            LayoutConsts = _promoManagerLayoutViewLayoutViewConsts['default'];
        }],
        execute: function () {
            'use strict';

            EditPageModal = (function () {
                function EditPageModal() {
                    _classCallCheck(this, EditPageModal);
                }

                _createClass(EditPageModal, null, [{
                    key: 'open',
                    value: function open($scope, $modal, $translate, layoutView, pageVersion, mode, _multiSelect) {
                        var _this = this;

                        this.layoutView = layoutView;
                        this.pageVersion = pageVersion;
                        this.mode = mode;
                        this.$translate = $translate;
                        this.Notifier = this.layoutView.Notifier;

                        var updateModel = function updateModel(result) {
                            console.log(result);
                        };

                        var template = null;
                        switch (this.mode) {
                            case LayoutConsts.EDIT_MODE:
                                template = pageedit;
                                break;
                            case LayoutConsts.DELETE_MODE:
                                template = pagedelete;
                                break;
                            case LayoutConsts.TEMPLATE_CLEAR_MODE:
                                template = pagecleartemplate;
                                break;
                            case LayoutConsts.TEMPLATE_APPLY_MODE:
                                template = pageapplytemplate;
                                break;
                            case LayoutConsts.MOVE_OFFERS_MODE:
                                template = pagemoveofferstoparkinglot;
                                break;
                        }

                        var _$modal$open = $modal.open({
                            template: template,
                            windowClass: 'theme-explosive-puppy layout-viewport',
                            controllerAs: 'ctrl',
                            controller: EditPageController,
                            resolve: {
                                layoutView: function layoutView() {
                                    return _this.layoutView;
                                },
                                pageVersion: function pageVersion() {
                                    return _this.pageVersion;
                                },
                                mode: function mode() {
                                    return _this.mode;
                                },
                                data: function data() {
                                    if (_this.mode == LayoutConsts.EDIT_MODE) {
                                        // not sure what should happen with a multi-select situation
                                        if (_multiSelect) {
                                            return null;
                                        }
                                        return _this.layoutView.loadPageVersion(_this.pageVersion.getPageVersionId());
                                    } else {
                                        return null;
                                    }
                                },
                                multiSelect: function multiSelect() {
                                    return _multiSelect;
                                }
                            }
                        });

                        var result = _$modal$open.result;
                        var close = _$modal$open.close;
                        var dismiss = _$modal$open.dismiss;

                        result.then(function (data) {
                            updateModel(data);
                        }, function (data) {
                            console.log("dismiss: ", data);
                        });
                    }
                }]);

                return EditPageModal;
            })();

            _export('EditPageModal', EditPageModal);

            EditPageController = (function () {
                function EditPageController($scope, $modalInstance, $translate, layoutView, pageVersion, mode, data, multiSelect) {
                    var _this2 = this;

                    _classCallCheck(this, EditPageController);

                    this.layoutView = layoutView;
                    this.$modalInstance = $modalInstance;
                    this.$translate = $translate;
                    this.Notifier = this.layoutView.Notifier;
                    this.multiSelect = multiSelect;
                    this.pageVersion = pageVersion;
                    this.mode = mode;
                    this.versionArray = [];
                    this.layoutModel = this.layoutView.getLayoutModel();
                    this.title = null;
                    if (!this.multiSelect) {
                        this.h = this.pageVersion.dimension.h || 11;
                        this.w = this.pageVersion.dimension.w || 8.5;
                        this.name = this.pageVersion.name || null;
                        this.hasPageVersionOffers = this.pageVersion.hasOffers();
                        this.index = this.pageVersion.getPageNumber();
                        this.pageId = this.pageVersion.getPageId();
                        this.pageVersionId = this.pageVersion.getPageVersionId();
                        this.versionArray.push(this.pageVersion);
                    } else {
                        this.versionArray = this.pageVersion;
                    }
                    this.disabled = true;
                    this.dateFormat = LayoutConsts.LAYOUT_VIEW_DATE_FORMAT;
                    switch (this.mode) {
                        case LayoutConsts.EDIT_MODE:
                            this.title = this.$translate.instant('LAYOUT_VIEW_PAGES_EDIT_PAGE_TITLE');
                            this.hierarchyId = this.layoutView.merchandiseHierarchy.getRootId();
                            this.merchandiseHierarchyTreeMap = this.layoutView.merchandiseHierarchy;
                            if (!this.multiSelect) {
                                this.pageGridVersion = data.data.pageGridVersion;
                                this.h = this.pageGridVersion.pageHeight || LayoutConsts.DEFAULT_PAGE_HEIGHT;
                                this.w = this.pageGridVersion.pageWidth || LayoutConsts.DEFAULT_PAGE_WIDTH;
                                this.name = this.pageGridVersion.name || null;
                                this.isCoop = this.pageGridVersion.isCoop || false;
                                this.theme = this.pageGridVersion.theme || null;
                                this.notes = this.pageGridVersion.notes || null;
                                this.hierarchyId = this.pageGridVersion.merchandiseHierarchyList ? this.pageGridVersion.merchandiseHierarchyList.id : this.layoutView.merchandiseHierarchy.getRootId();
                            } else {
                                this.pageGridVersion = {};
                            }
                            this.merchandiseHierarchySelectionLabels = [$translate.instant('OFFERS_LIST_ALL_SBUS'), $translate.instant('OFFERS_LIST_ALL_DEPARTMENTS')];
                            break;
                        case LayoutConsts.DELETE_MODE:
                            this.title = this.$translate.instant('LAYOUT_VIEW_PAGES_DELETE_PAGE_TITLE');
                            break;
                        case LayoutConsts.MOVE_OFFERS_MODE:
                            this.title = this.$translate.instant('LAYOUT_VIEW_PAGES_MOVE_OFFERS_TO_PARKING_LOT_TITLE');
                            break;
                        case LayoutConsts.TEMPLATE_CLEAR_MODE:
                            this.title = this.$translate.instant('LAYOUT_VIEW_PAGES_DELETE_TEMPLATE_TITLE');
                            break;
                        case LayoutConsts.TEMPLATE_APPLY_MODE:
                            this.title = this.$translate.instant('LAYOUT_VIEW_PAGES_APPLY_TEMPLATE_TITLE');
                            this.numPerPage = LayoutConsts.LAYOUT_PAGE_VERSION_TEMPLATE_RECORDS_REQUEST;
                            this.startingIndex = 0;
                            this.totalRecords = 0;
                            this.offset = 0;
                            this.limit = 0;
                            this.firstRead = true;
                            this.currentPage = null;
                            this.channels = this.layoutView.getChannel();
                            this.selectedTemplate = null;
                            this.templates = null;
                            this.templateSearch = null;
                            this.templatePreviousSearch = null;
                            this.search = {
                                disabled: false,
                                templateSearch: function templateSearch(value) {
                                    if (angular.isDefined(value)) {
                                        _this2.templateSearch = value;
                                        _this2.loadTemplates();
                                        return _this2.templateSearch;
                                    }
                                    return _this2.templateSearch;
                                }
                            };
                            break;
                    }

                    this.moveOffers = false;
                    this.pageUi = this.layoutView.getPageUi();
                    this.channel = this.layoutView.getChannel().id;
                }

                _createClass(EditPageController, [{
                    key: 'hasGridVersionName',
                    value: function hasGridVersionName() {
                        if (this.name) {
                            return true;
                        }
                        return false;
                    }
                }, {
                    key: 'hasPageNumber',
                    value: function hasPageNumber() {
                        return this.index;
                    }
                }, {
                    key: 'hasDuplicateIdentifiers',
                    value: function hasDuplicateIdentifiers() {
                        var _this3 = this;

                        var uniqueIds = this.pageUi.getPageVersionDetails();
                        return uniqueIds.some(function (id) {
                            //if name is null, ignore dup test
                            if (_this3.name && id.name.toLowerCase() == _this3.name.toLowerCase() && id.index != _this3.index) {
                                return true;
                            }
                            return false;
                        });
                    }
                }, {
                    key: 'loadTemplates',
                    value: function loadTemplates() {
                        if (this.currentPage == 1 && this.templateSearch == this.templatePreviousSearch) {
                            return;
                        }
                        this.templatePreviousSearch = this.templateSearch;
                        this.startingIndex = 0;
                        this.firstRead = true;
                        this.pageLayoutTemplates = [];
                        this.getTemplates();
                    }
                }, {
                    key: 'getTemplates',
                    value: function getTemplates() {
                        var _this4 = this;

                        this.search.disabled = true;
                        var self = this;
                        this.layoutView.getTemplates(this.templateSearch, this.channel, this.startingIndex, this.numPerPage).then(function (data) {
                            data.data.pageLayoutTemplates.forEach(function (template) {
                                self.pageLayoutTemplates.push(template);
                            });
                            _this4.totalRecords = data.data.pageLayoutTemplateCount;
                            _this4.startingIndex += _this4.numPerPage;
                            _this4.search.disabled = false;
                            if (_this4.firstRead) {
                                _this4.initPage(_this4.numPerPage);
                                _this4.firstRead = false;
                            } else {
                                _this4.readNextPage(self.numPerPage);
                            }
                        });
                    }
                }, {
                    key: 'initPage',
                    value: function initPage(numPerPage) {
                        this.noOfPages = Math.ceil(this.totalRecords / numPerPage);
                        this.currentPage = 1;
                        this.setPage(numPerPage);
                    }
                }, {
                    key: 'getNextPage',
                    value: function getNextPage(numPerPage) {
                        if (this.currentPage < this.noOfPages) {
                            if (this.startingIndex <= this.totalRecords) {
                                // starting index = # records on client
                                this.getTemplates();
                            } else {
                                this.readNextPage(numPerPage);
                            }
                        }
                    }
                }, {
                    key: 'readNextPage',
                    value: function readNextPage(numPerPage) {
                        this.templates = this.getPage(this.currentPage * numPerPage, numPerPage);
                        this.currentPage++;
                    }
                }, {
                    key: 'getPreviousPage',
                    value: function getPreviousPage(numPerPage) {
                        if (this.currentPage - 2 >= 0) {
                            this.templates = this.getPage((this.currentPage - 2) * numPerPage, numPerPage);
                            this.currentPage--;
                        }
                    }
                }, {
                    key: 'setPage',
                    value: function setPage(numPerPage) {
                        this.templates = this.getPage((this.currentPage - 1) * numPerPage, numPerPage);
                    }
                }, {
                    key: 'getPage',
                    value: function getPage(offset, numToRead) {
                        this.offset = offset + 1;
                        numToRead = parseInt(numToRead);
                        var rec = offset + numToRead;
                        this.limit = rec < this.totalRecords ? rec : this.totalRecords;
                        return this.pageLayoutTemplates.slice(offset, offset + numToRead);
                    }
                }, {
                    key: 'handleRadioClick',
                    value: function handleRadioClick(template) {
                        this.selectedTemplate = template.id;
                        this.disabled = false;
                    }
                }, {
                    key: 'updatePageVersion',
                    value: function updatePageVersion() {
                        switch (this.mode) {
                            case LayoutConsts.EDIT_MODE:
                                var originalPageGridVersion = angular.copy(this.pageGridVersion);
                                if (!this.pageGridVersion.merchandiseHierarchyList) {
                                    this.pageGridVersion.merchandiseHierarchyList = {};
                                }

                                this.pageGridVersion.pageHeight = this.h;
                                this.pageGridVersion.pageWidth = this.w;
                                this.pageGridVersion.name = this.name;
                                if (this.isCoop && (this.isCoop != false || this.isCoop != 'false')) {
                                    this.isCoop = true;
                                } else {
                                    this.isCoop = false;
                                }
                                this.pageGridVersion.isCoop = this.isCoop;
                                this.pageGridVersion.theme = this.theme;
                                this.pageGridVersion.notes = this.notes;
                                this.pageGridVersion.merchandiseHierarchyList.id = this.hierarchyId;
                                if (!this.multiSelect) {
                                    this.layoutView.updatePageVersions(this.pageVersion.exportPageVersionUpdate(this.pageGridVersion, originalPageGridVersion));
                                } else {
                                    this.layoutView.updatePageVersions(this.layoutModel.exportPageVersionUpdate(this.versionArray, this.pageGridVersion));
                                }
                                break;
                            case LayoutConsts.DELETE_MODE:
                                this.layoutView.deletePages(this.layoutModel.exportPageVersionDelete(this.versionArray, this.moveOffers));
                                break;
                            case LayoutConsts.MOVE_OFFERS_MODE:
                                this.layoutView.moveOffersToParkingLotGrid(this.pageVersionId);
                                break;
                            case LayoutConsts.TEMPLATE_APPLY_MODE:
                                console.log(this.selectedTemplate);
                                this.layoutView.applyTemplate(this.layoutModel.exportPageVersionApplyTemplate(this.selectedTemplate, this.versionArray));
                                break;
                            case LayoutConsts.TEMPLATE_CLEAR_MODE:
                                this.layoutView.clearTemplate(this.layoutModel.exportPageVersionClearTemplate(this.versionArray, this.moveOffers));
                                break;
                        }
                    }
                }, {
                    key: 'apply',
                    value: function apply() {
                        //selection of multiple pageVersions will bypass these validations
                        if (!this.multiSelect) {
                            if (isNaN(parseFloat(this.h)) || !isFinite(this.h) || this.h < 1) {
                                this.Notifier.error('LAYOUT_VIEW_PAGES_ERROR_HEIGHT_MISSING');
                                return;
                            }
                            if (isNaN(parseFloat(this.w)) || !isFinite(this.w) || this.w < 1) {
                                this.Notifier.error('LAYOUT_VIEW_PAGES_ERROR_WIDTH_MISSING');
                                return;
                            }
                            // ensure grid version name is populated
                            if (!this.hasGridVersionName()) {
                                this.Notifier.error('LAYOUT_VIEW_PAGES_ERROR_MISSING_GRID');
                                return;
                            }
                            if (this.hasDuplicateIdentifiers()) {
                                this.Notifier.error('LAYOUT_VIEW_PAGES_ERROR_DUPLICATE_GRID');
                                return;
                            }
                        }
                        this.updatePageVersion();
                        this.$modalInstance.close();
                    }
                }, {
                    key: 'dismiss',
                    value: function dismiss() {
                        this.$modalInstance.dismiss();
                    }
                }]);

                return EditPageController;
            })();

            _export('EditPageController', EditPageController);
        }
    };
});
System.register('promo-manager/layout-view/block-actions/edit-block-modal', ['npm:babel-runtime@5.8.24/helpers/create-class', 'npm:babel-runtime@5.8.24/helpers/class-call-check', 'promo-manager/layout-view/block-actions/block-move-offers-to-basket-modal.html!github:systemjs/plugin-text@0.0.2', 'promo-manager/layout-view/block-actions/block-edit-modal.html!github:systemjs/plugin-text@0.0.2', 'promo-manager/layout-view/layout-view-consts'], function (_export) {
    var _createClass, _classCallCheck, blockmoveofferstobasketmodal, blockeditmodal, LayoutConsts, EditBlockModal, EditBlockController;

    return {
        setters: [function (_npmBabelRuntime5824HelpersCreateClass) {
            _createClass = _npmBabelRuntime5824HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5824HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5824HelpersClassCallCheck['default'];
        }, function (_promoManagerLayoutViewBlockActionsBlockMoveOffersToBasketModalHtmlGithubSystemjsPluginText002) {
            blockmoveofferstobasketmodal = _promoManagerLayoutViewBlockActionsBlockMoveOffersToBasketModalHtmlGithubSystemjsPluginText002['default'];
        }, function (_promoManagerLayoutViewBlockActionsBlockEditModalHtmlGithubSystemjsPluginText002) {
            blockeditmodal = _promoManagerLayoutViewBlockActionsBlockEditModalHtmlGithubSystemjsPluginText002['default'];
        }, function (_promoManagerLayoutViewLayoutViewConsts) {
            LayoutConsts = _promoManagerLayoutViewLayoutViewConsts['default'];
        }],
        execute: function () {
            'use strict';

            EditBlockModal = (function () {
                function EditBlockModal() {
                    _classCallCheck(this, EditBlockModal);
                }

                _createClass(EditBlockModal, null, [{
                    key: 'open',
                    value: function open($scope, $modal, $translate, layoutView, block, pageVersion, mode) {
                        var _this = this;

                        this.layoutView = layoutView;
                        this.block = block;
                        this.pageVersion = pageVersion;
                        this.mode = mode;
                        this.$translate = $translate;
                        this.Notifier = this.layoutView.Notifier;

                        var updateModel = function updateModel(result) {
                            console.log(result);
                        };

                        var template = null;
                        switch (this.mode) {
                            case LayoutConsts.EDIT_MODE:
                                template = blockeditmodal;
                                break;
                            case LayoutConsts.ADD_TO_BASKET_MODE:
                                template = blockmoveofferstobasketmodal;
                                break;
                        }

                        var _$modal$open = $modal.open({
                            template: template,
                            windowClass: 'theme-explosive-puppy layout-viewport',
                            controllerAs: 'ctrl',
                            controller: EditBlockController,
                            resolve: {
                                layoutView: function layoutView() {
                                    return _this.layoutView;
                                },
                                block: function block() {
                                    return _this.block;
                                },
                                pageVersion: function pageVersion() {
                                    return _this.pageVersion;
                                },
                                mode: function mode() {
                                    return _this.mode;
                                },
                                data: function data() {
                                    if (_this.mode == LayoutConsts.EDIT_MODE) {
                                        return _this.layoutView.loadBlock(_this.block.id);
                                    } else {
                                        return null;
                                    }
                                }
                            }
                        });

                        var result = _$modal$open.result;
                        var close = _$modal$open.close;
                        var dismiss = _$modal$open.dismiss;

                        result.then(function (data) {
                            updateModel(data);
                        }, function (data) {
                            console.log("dismiss: ", data);
                        });
                    }
                }]);

                return EditBlockModal;
            })();

            _export('EditBlockModal', EditBlockModal);

            EditBlockController = (function () {
                function EditBlockController($scope, $modalInstance, $translate, layoutView, block, pageVersion, mode, data) {
                    _classCallCheck(this, EditBlockController);

                    this.layoutView = layoutView;
                    this.$modalInstance = $modalInstance;
                    this.$translate = $translate;
                    this.Notifier = this.layoutView.Notifier;
                    this.blockVersion = block;
                    this.pageVersion = pageVersion;
                    this.mode = mode;
                    this.title = null;
                    this.name = this.blockVersion.name || null;
                    this.disabled = true;
                    this.dateFormat = LayoutConsts.LAYOUT_VIEW_DATE_FORMAT;
                    switch (this.mode) {
                        case LayoutConsts.EDIT_MODE:
                            this.title = this.$translate.instant('LAYOUT_VIEW_BLOCK_EDIT_TITLE');
                            this.block = data.data.block;
                            this.userDefinedName = this.block.userDefinedName || null;
                            this.isCoop = this.block.isCoop || false;
                            this.theme = this.block.theme || null;
                            this.color = this.block.color || null;
                            this.hierarchyId = this.block.merchandiseHierarchy ? this.block.merchandiseHierarchy.id : this.layoutView.merchandiseHierarchy.getRootId();
                            this.merchandiseHierarchy = this.layoutView.merchandiseHierarchy;
                            this.merchandiseHierarchySelectionLabels = [$translate.instant('OFFERS_LIST_ALL_SBUS'), $translate.instant('OFFERS_LIST_ALL_DEPARTMENTS')];
                            break;
                        case LayoutConsts.ADD_TO_BASKET_MODE:
                            this.title = this.$translate.instant('LAYOUT_VIEW_ADD_TO_BASKET');
                            break;
                    }
                }

                _createClass(EditBlockController, [{
                    key: 'updateBlock',
                    value: function updateBlock() {
                        switch (this.mode) {
                            case LayoutConsts.EDIT_MODE:
                                if (!this.block.merchandiseHierarchy) {
                                    this.block.merchandiseHierarchy = {
                                        id: 1
                                    };
                                }
                                var originalBlock = angular.copy(this.block);

                                if (this.isCoop && (this.isCoop != false || this.isCoop != 'false')) {
                                    this.isCoop = true;
                                }
                                this.block.isCoop = this.isCoop;
                                this.block.theme = this.theme;
                                this.block.color = this.color;
                                this.block.userDefinedName = this.userDefinedName;
                                this.block.merchandiseHierarchy.id = this.hierarchyId;
                                this.layoutView.updateBlock(this.blockVersion.exportBlockList(this.block, originalBlock), this.pageVersion.id);
                                break;
                            case LayoutConsts.ADD_TO_BASKET_MODE:
                                //                this.layoutView.moveOffersToParkingLotGrid(this.blockId);
                                break;
                        }
                    }
                }, {
                    key: 'apply',
                    value: function apply() {
                        this.updateBlock();
                        this.$modalInstance.close();
                    }
                }, {
                    key: 'dismiss',
                    value: function dismiss() {
                        this.$modalInstance.dismiss();
                    }
                }]);

                return EditBlockController;
            })();

            _export('EditBlockController', EditBlockController);
        }
    };
});
System.register('promo-manager/layout-view/offer-quickview/offer-quickview', ['npm:babel-runtime@5.8.24/helpers/create-class', 'npm:babel-runtime@5.8.24/helpers/class-call-check', 'promo-manager/layout-view/offer-quickview/offer-quickview.html!github:systemjs/plugin-text@0.0.2', 'promo-manager/layout-view/layout-view-consts', 'helpers/util'], function (_export) {
    var _createClass, _classCallCheck, quickview, LayoutConsts, Util, OfferQuickView, OfferQuickViewController;

    return {
        setters: [function (_npmBabelRuntime5824HelpersCreateClass) {
            _createClass = _npmBabelRuntime5824HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5824HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5824HelpersClassCallCheck['default'];
        }, function (_promoManagerLayoutViewOfferQuickviewOfferQuickviewHtmlGithubSystemjsPluginText002) {
            quickview = _promoManagerLayoutViewOfferQuickviewOfferQuickviewHtmlGithubSystemjsPluginText002['default'];
        }, function (_promoManagerLayoutViewLayoutViewConsts) {
            LayoutConsts = _promoManagerLayoutViewLayoutViewConsts['default'];
        }, function (_helpersUtil) {
            Util = _helpersUtil['default'];
        }],
        execute: function () {
            'use strict';

            OfferQuickView = (function () {
                function OfferQuickView() {
                    _classCallCheck(this, OfferQuickView);
                }

                _createClass(OfferQuickView, null, [{
                    key: 'open',
                    value: function open($scope, $modal, $translate, layoutView, _pageVersion, _block) {
                        var _this = this;

                        this.layoutView = layoutView;

                        var _$modal$open = $modal.open({
                            template: quickview,
                            windowClass: 'theme-explosive-puppy layout-viewport offer-quickview',
                            backdropClass: 'backdrop-invisible layout-viewport',
                            controllerAs: 'ctrl',
                            controller: OfferQuickViewController,
                            resolve: {
                                layoutView: function layoutView() {
                                    return _this.layoutView;
                                },
                                pageVersion: function pageVersion() {
                                    return _pageVersion;
                                },
                                block: function block() {
                                    return _block;
                                },
                                data: function data() {
                                    return _this.layoutView.loadOffer(_block.offerVersion);
                                }
                            }
                        });

                        var result = _$modal$open.result;
                        var close = _$modal$open.close;
                        var dismiss = _$modal$open.dismiss;

                        result.then(function (data) {
                            $scope.ctrl.actionsHandler.getBlockModalHandler('edit', _block, _pageVersion);
                        }, function (data) {
                            console.log("dismiss: ", data);
                        });
                    }
                }]);

                return OfferQuickView;
            })();

            _export('OfferQuickView', OfferQuickView);

            OfferQuickViewController = (function () {
                function OfferQuickViewController($scope, $modalInstance, $translate, layoutView, pageVersion, block, data) {
                    var _this2 = this;

                    _classCallCheck(this, OfferQuickViewController);

                    this.dateFormat = LayoutConsts.LAYOUT_VIEW_DATE_FORMAT;
                    this.layoutView = layoutView;
                    this.pageVersion = pageVersion;
                    this.block = block;
                    this.blockOffer = block.offerVersion;
                    this.$modalInstance = $modalInstance;
                    this.Notifier = this.layoutView.Notifier;
                    this.$translate = $translate;
                    this.blockOfferQuickView = data.data.blockOfferQuickView;
                    this.attributes = [{ label: $translate.instant('OFFER_QUICKVIEW_LABEL_THEME'), value: block.theme }, { label: $translate.instant('OFFER_QUICKVIEW_LABEL_PAGE_NAME'), value: pageVersion.name }, { label: $translate.instant('OFFER_QUICKVIEW_LABEL_PAGE_NUMBER'), value: block.page.index }, { label: $translate.instant('OFFER_QUICKVIEW_LABEL_BLOCK_NAME'), value: block.userDefinedName || block.name }, { label: $translate.instant('OFFER_QUICKVIEW_LABEL_BLOCK_NUMBER'), value: block.name }];

                    this.myInterval = 0;
                    this.blockOfferQuickView.attributesList.forEach(function (attribute) {
                        if (attribute.internalName == 'offerName') {
                            _this2.offerName = attribute.userLable;
                        } else if (attribute.internalName == 'offerDescription') {
                            _this2.offerDescription = attribute.userLable;
                        }
                    });
                    this.slides = this.blockOfferQuickView.offerVersionSkuList;

                    var displayDepth = LayoutConsts.DISPLAY_DEPTH;

                    var collatedMh = this.layoutView.merchandiseHierarchyByDepth(this.block.merchandiseHierarchyList || [], this.block.offerVersion.merchandiseHierarchyList || []);
                    this.mhLocations = collatedMh.mhLocations;
                    this.mhByDepth = collatedMh.mhByDepth;

                    this.mhLabelsByDepth = [this.$translate.instant('OFFERS_LIST_LEVEL_1'), this.$translate.instant('OFFERS_LIST_LEVEL_2'), this.$translate.instant('OFFERS_LIST_LEVEL_3'), this.$translate.instant('OFFERS_LIST_LEVEL_4')].slice(0, displayDepth);
                }

                _createClass(OfferQuickViewController, [{
                    key: 'offerWizard',
                    value: function offerWizard() {
                        this.$modalInstance.close();
                    }
                }, {
                    key: 'dismiss',
                    value: function dismiss() {
                        this.$modalInstance.dismiss();
                    }
                }]);

                return OfferQuickViewController;
            })();

            _export('OfferQuickViewController', OfferQuickViewController);
        }
    };
});
System.register('promo-manager/helpers/merchandise-hierarchy-native-selection-directive', ['promo-manager/helpers/merchandise-hierarchy-selection', 'promo-manager/partials/multidropdownnativeselection.html!github:systemjs/plugin-text@0.0.2'], function (_export) {
	//requires html.js plug-in in root
	'use strict';

	var MerchandiseHierarchySelection, multidropdown;
	function merchandiseHierarchyNativeSelection() {
		return {
			restrict: 'A',
			scope: {
				'treeMap': '=',
				'ngModel': '=',
				'defaultLabels': '=',
				'disableSelection': '='
			},
			template: multidropdown,
			controllerAs: 'ctrl',
			bindToController: true,
			controller: MerchandiseHierarchySelection

		};
	}
	return {
		setters: [function (_promoManagerHelpersMerchandiseHierarchySelection) {
			MerchandiseHierarchySelection = _promoManagerHelpersMerchandiseHierarchySelection['default'];
		}, function (_promoManagerPartialsMultidropdownnativeselectionHtmlGithubSystemjsPluginText002) {
			multidropdown = _promoManagerPartialsMultidropdownnativeselectionHtmlGithubSystemjsPluginText002['default'];
		}],
		execute: function () {
			_export('default', merchandiseHierarchyNativeSelection);
		}
	};
});
System.register('promo-manager/layout-view/layout-view-directive', ['promo-manager/layout-view/partials/layout-view.html!github:systemjs/plugin-text@0.0.2'], function (_export) {
    'use strict';

    var layoutViewTemplate;

    _export('default', layoutView);

    function layoutView() {
        return {
            restrict: 'A',
            scope: {
                'context': '='
            },
            controller: 'layoutViewController',
            controllerAs: 'ctrl',
            template: layoutViewTemplate,
            bindToController: true,
            link: function link(scope, elem) {
                //workaround until I figure out why page not displaying
                $('#tabLayoutView').on('click', function (e) {
                    return scope.$root.$digest();
                });
            }
        };
    }

    return {
        setters: [function (_promoManagerLayoutViewPartialsLayoutViewHtmlGithubSystemjsPluginText002) {
            layoutViewTemplate = _promoManagerLayoutViewPartialsLayoutViewHtmlGithubSystemjsPluginText002['default'];
        }],
        execute: function () {}
    };
});
System.register('promo-manager/layout-view/layout-view-toolbar-directive', ['promo-manager/layout-view/partials/layout-view-toolbar.html!github:systemjs/plugin-text@0.0.2'], function (_export) {
    'use strict';

    var layoutViewToolbarTemplate;

    _export('default', layoutViewToolbar);

    function layoutViewToolbar() {
        return {
            restrict: 'A',
            template: layoutViewToolbarTemplate
        };
    }

    return {
        setters: [function (_promoManagerLayoutViewPartialsLayoutViewToolbarHtmlGithubSystemjsPluginText002) {
            layoutViewToolbarTemplate = _promoManagerLayoutViewPartialsLayoutViewToolbarHtmlGithubSystemjsPluginText002['default'];
        }],
        execute: function () {}
    };
});
System.register('promo-manager/layout-view/layout-view-body-directive', ['promo-manager/layout-view/partials/layout-view-body.html!github:systemjs/plugin-text@0.0.2'], function (_export) {
    'use strict';

    var layoutViewBodyTemplate;

    _export('default', layoutViewBody);

    function layoutViewBody() {
        return {
            restrict: 'A',
            template: layoutViewBodyTemplate
        };
    }

    return {
        setters: [function (_promoManagerLayoutViewPartialsLayoutViewBodyHtmlGithubSystemjsPluginText002) {
            layoutViewBodyTemplate = _promoManagerLayoutViewPartialsLayoutViewBodyHtmlGithubSystemjsPluginText002['default'];
        }],
        execute: function () {}
    };
});
System.register('promo-manager/layout-view/layout-view-dragged-directive', ['promo-manager/layout-view/layout-view-dragged-template.html!github:systemjs/plugin-text@0.0.2'], function (_export) {
    'use strict';

    var layoutViewDraggedTemplate;

    _export('default', layoutViewDraggedDirective);

    function layoutViewDraggedDirective() {
        return {
            restrict: 'A',
            scope: {
                "dragged": "=layoutViewDragged"
            },
            template: layoutViewDraggedTemplate
        };
    }

    return {
        setters: [function (_promoManagerLayoutViewLayoutViewDraggedTemplateHtmlGithubSystemjsPluginText002) {
            layoutViewDraggedTemplate = _promoManagerLayoutViewLayoutViewDraggedTemplateHtmlGithubSystemjsPluginText002['default'];
        }],
        execute: function () {}
    };
});
System.register('promo-manager/layout-view/clipboard/clipboard-directive', ['promo-manager/layout-view/clipboard/clipboard-template.html!github:systemjs/plugin-text@0.0.2', 'promo-manager/layout-view/clipboard/clipboard-controller'], function (_export) {
    'use strict';

    var clipboardTemplate, ClipboardController;

    _export('default', layoutViewClipboard);

    function layoutViewClipboard() {
        return {
            'restrict': 'A',
            'template': clipboardTemplate,
            'scope': {
                'dragging': '=',
                'global': '=',
                'local': '='
            },
            'controller': ClipboardController,
            'controllerAs': 'ctrl',
            'bindToController': true
        };
    }

    return {
        setters: [function (_promoManagerLayoutViewClipboardClipboardTemplateHtmlGithubSystemjsPluginText002) {
            clipboardTemplate = _promoManagerLayoutViewClipboardClipboardTemplateHtmlGithubSystemjsPluginText002['default'];
        }, function (_promoManagerLayoutViewClipboardClipboardController) {
            ClipboardController = _promoManagerLayoutViewClipboardClipboardController['default'];
        }],
        execute: function () {}
    };
});
System.register('promo-manager/layout-view/clipboard/clipboard-type-directive', ['promo-manager/layout-view/clipboard/clipboard-type-template.html!github:systemjs/plugin-text@0.0.2'], function (_export) {
    'use strict';

    var clipboardTypeTemplate;

    _export('default', clipboardType);

    function clipboardType() {
        return {
            'restrict': 'A',
            'template': clipboardTypeTemplate,
            'scope': {
                'clipboard': '=clipboardType',
                'type': '=',
                'labelKey': '@',
                'ctrl': '='
            }
        };
    }

    return {
        setters: [function (_promoManagerLayoutViewClipboardClipboardTypeTemplateHtmlGithubSystemjsPluginText002) {
            clipboardTypeTemplate = _promoManagerLayoutViewClipboardClipboardTypeTemplateHtmlGithubSystemjsPluginText002['default'];
        }],
        execute: function () {}
    };
});
System.register('promo-manager/common/allocation-report/allocation-report-directive', ['promo-manager/common/allocation-report/allocation-report-template.html!github:systemjs/plugin-text@0.0.2', 'promo-manager/common/allocation-report/allocation-report-controller'], function (_export) {
    'use strict';

    var allocationReportTemplate, AllocationReportController;

    _export('default', allocationReport);

    function allocationReport() {
        return {
            restrict: 'A',
            scope: {
                'context': '='
            },
            controller: AllocationReportController,
            controllerAs: 'ctrl',
            template: allocationReportTemplate,
            bindToController: true,
            link: function link(scope, elem) {
                //workaround until I figure out why page not displaying
                $('#tabReporting').on('click', function (e) {
                    return scope.$root.$digest();
                });
            }
        };
    }

    return {
        setters: [function (_promoManagerCommonAllocationReportAllocationReportTemplateHtmlGithubSystemjsPluginText002) {
            allocationReportTemplate = _promoManagerCommonAllocationReportAllocationReportTemplateHtmlGithubSystemjsPluginText002['default'];
        }, function (_promoManagerCommonAllocationReportAllocationReportController) {
            AllocationReportController = _promoManagerCommonAllocationReportAllocationReportController['default'];
        }],
        execute: function () {}
    };
});
System.register('promo-manager/common/exception-report/exception-report-directive', ['promo-manager/common/exception-report/exception-report-template.html!github:systemjs/plugin-text@0.0.2', 'promo-manager/common/exception-report/exception-report-controller'], function (_export) {
    'use strict';

    var exceptionReportTemplate, ExceptionReportController;

    _export('default', exceptionReport);

    function exceptionReport() {
        return {
            restrict: 'A',
            scope: {
                'context': '='
            },
            controller: ExceptionReportController,
            controllerAs: 'ctrl',
            template: exceptionReportTemplate,
            bindToController: true,
            link: function link(scope, elem) {
                //workaround until I figure out why page not displaying
                $('#tabReporting').on('click', function (e) {
                    return scope.$root.$digest();
                });
            }
        };
    }

    return {
        setters: [function (_promoManagerCommonExceptionReportExceptionReportTemplateHtmlGithubSystemjsPluginText002) {
            exceptionReportTemplate = _promoManagerCommonExceptionReportExceptionReportTemplateHtmlGithubSystemjsPluginText002['default'];
        }, function (_promoManagerCommonExceptionReportExceptionReportController) {
            ExceptionReportController = _promoManagerCommonExceptionReportExceptionReportController['default'];
        }],
        execute: function () {}
    };
});
System.register('promo-manager/common/item-selection/item-search', ['npm:babel-runtime@5.8.24/helpers/create-class', 'npm:babel-runtime@5.8.24/helpers/class-call-check', 'promo-manager/common/item-selection/item-search-template.html!github:systemjs/plugin-text@0.0.2', 'promo-manager/layout-view/layout-view-consts', 'helpers/util', 'helpers/notifier', 'helpers/tree-map', 'promo-manager/helpers/merchandise-hierarchy-helpers', 'npm:trie-search@0.1.1'], function (_export) {
    var _createClass, _classCallCheck, itemsearch, LayoutConsts, Util, Notifier, TreeMap, MerchandiseHierarchyHelpers, TrieSearch, ItemSearchController, ItemSearchModalController;

    return {
        setters: [function (_npmBabelRuntime5824HelpersCreateClass) {
            _createClass = _npmBabelRuntime5824HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5824HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5824HelpersClassCallCheck['default'];
        }, function (_promoManagerCommonItemSelectionItemSearchTemplateHtmlGithubSystemjsPluginText002) {
            itemsearch = _promoManagerCommonItemSelectionItemSearchTemplateHtmlGithubSystemjsPluginText002['default'];
        }, function (_promoManagerLayoutViewLayoutViewConsts) {
            LayoutConsts = _promoManagerLayoutViewLayoutViewConsts['default'];
        }, function (_helpersUtil) {
            Util = _helpersUtil['default'];
        }, function (_helpersNotifier) {
            Notifier = _helpersNotifier['default'];
        }, function (_helpersTreeMap) {
            TreeMap = _helpersTreeMap['default'];
        }, function (_promoManagerHelpersMerchandiseHierarchyHelpers) {
            MerchandiseHierarchyHelpers = _promoManagerHelpersMerchandiseHierarchyHelpers['default'];
        }, function (_npmTrieSearch011) {
            TrieSearch = _npmTrieSearch011['default'];
        }],
        execute: function () {
            'use strict';

            ItemSearchController = (function () {
                function ItemSearchController($scope, $q, $translate, $uiModal, API) {
                    var _this = this;

                    _classCallCheck(this, ItemSearchController);

                    this.$scope = $scope;
                    this.$translate = $translate;
                    this.$modal = $uiModal;
                    MerchandiseHierarchyHelpers.loadMerchandiseHierarchiesImmediateFamily($q, API).then(function (result) {
                        _this.merchandiseHierarchy = result;
                        _this.merchandiseHierarchySearch = MerchandiseHierarchyHelpers.buildMhSearchTree(_this.merchandiseHierarchy);
                    });
                }

                _createClass(ItemSearchController, [{
                    key: 'open',
                    value: function open() {
                        var _this2 = this;

                        var updateModel = function updateModel(result) {
                            console.log(result);
                        };

                        var _$modal$open = this.$modal.open({
                            template: itemsearch,
                            windowClass: 'theme-explosive-puppy layout-viewport item-selection',
                            controllerAs: 'ctrl',
                            controller: ItemSearchModalController,
                            resolve: {
                                merchandiseHierarchy: function merchandiseHierarchy() {
                                    return _this2.merchandiseHierarchy;
                                },
                                merchandiseHierarchySearch: function merchandiseHierarchySearch() {
                                    return _this2.merchandiseHierarchySearch;
                                }
                            }
                        });

                        var result = _$modal$open.result;
                        var close = _$modal$open.close;
                        var dismiss = _$modal$open.dismiss;

                        result.then(function (data) {
                            updateModel(data);
                        }, function (data) {
                            console.log("dismiss: ", data);
                        });
                    }
                }]);

                return ItemSearchController;
            })();

            _export('ItemSearchController', ItemSearchController);

            ItemSearchController.$inject = ['$scope', '$q', '$translate', '$uiModal', 'API'];

            ItemSearchModalController = (function () {
                function ItemSearchModalController($scope, $modalInstance, $translate, merchandiseHierarchy, merchandiseHierarchySearch) {
                    var _this3 = this;

                    _classCallCheck(this, ItemSearchModalController);

                    this.$modalInstance = $modalInstance;
                    this.$translate = $translate;
                    this.itemSelections = [];
                    this.itemTree = [];
                    this.itemSearchTree = merchandiseHierarchySearch;
                    this.itemSelectionTree = merchandiseHierarchy;
                    this.hierarchyId = merchandiseHierarchy.getRootId();
                    this.rootId = merchandiseHierarchy.getRootId();
                    this.itemTreeLabel = this.$translate.instant('ITEM_SEARCH_TREE_LABEL');
                    this.itemSearch = null;
                    this.itemPreviousSearch = null;
                    this.search = {
                        disabled: false,
                        itemSearch: function itemSearch(value) {
                            if (angular.isDefined(value)) {
                                _this3.itemSearch = value;
                                _this3.loadItems();
                                return _this3.itemSearch;
                            }
                            return _this3.itemSearch;
                        }
                    };
                    this.init();
                    this.mhLabelsByDepth = [this.$translate.instant('OFFERS_LIST_LEVEL_1'), this.$translate.instant('OFFERS_LIST_LEVEL_2'), this.$translate.instant('OFFERS_LIST_LEVEL_3'), this.$translate.instant('OFFERS_LIST_LEVEL_4')].slice(0, this.itemSelectionTree.showLevels.length);
                }

                _createClass(ItemSearchModalController, [{
                    key: 'init',
                    value: function init() {
                        //set the top level view
                        this.itemTree = [];
                        var root = this.itemSelectionTree.getNode(this.hierarchyId);
                        if (root) {
                            var rootNode = this.itemSelectionTree.getRootNode();
                            //clear any nodes from prior searches
                            var children = rootNode.getChildren();
                            children.forEach(function (child) {
                                child.nodes = [];
                            });

                            this.itemTree.push({ name: name, nodes: children });
                        }
                    }
                }, {
                    key: 'loadItems',
                    value: function loadItems() {
                        var _this4 = this;

                        var candidates = [];
                        if (this.itemSearch) {
                            candidates = this.itemSearchTree.get(this.itemSearch);
                        }
                        console.log(candidates);
                        this.init();

                        candidates.forEach(function (candidate) {
                            // the open function assumes that the parent is open, so we need a pre-processor
                            //send each path in to create the node
                            if (!candidate.node) {
                                return;
                            }
                            var path = candidate.node.getPath();
                            path.forEach(function (node) {
                                _this4.open(node);
                            });
                        });
                    }
                }, {
                    key: 'delete',
                    value: function _delete(node) {
                        node.nodes = [];
                    }
                }, {
                    key: 'toggle',
                    value: function toggle(state, node) {
                        if (state) {
                            this.open(node);
                        } else {
                            this['delete'](node);
                        }
                    }
                }, {
                    key: 'open',
                    value: function open(node) {
                        if (node) {
                            var path = node.getPath();
                            var parentNode = path.pop();
                            node.nodes = parentNode.getChildren();
                        }
                    }
                }, {
                    key: 'itemSelection',
                    value: function itemSelection(state, node) {
                        if (state) {
                            this.open(node);
                            if (this.hasSelectedItem(node)) {
                                Notifier.error('ITEM_SEARCH_SELECTED_ITEMS_DUPLICATE_ERROR');
                                return;
                            }
                            this.itemSelections.push(node);
                        } else {
                            this['delete'](node);
                            this.deleteSelection(node);
                        }
                    }
                }, {
                    key: 'formatSelectedItem',
                    value: function formatSelectedItem(node) {
                        var selection = {
                            node: node
                        };
                        return selection;
                    }
                }, {
                    key: 'hasSelectedItem',
                    value: function hasSelectedItem(node) {
                        return this.itemSelections.some(function (selected) {
                            return selected.id == node.id;
                        });
                    }
                }, {
                    key: 'isSelectedItem',
                    value: function isSelectedItem(node) {
                        if (node && node.id) {
                            return this.hasSelectedItem(node);
                        }
                    }
                }, {
                    key: 'openSelection',
                    value: function openSelection(node) {
                        this.searchItems(node);
                    }
                }, {
                    key: 'deleteSelection',
                    value: function deleteSelection(node) {
                        this.itemSelections = this.itemSelections.filter(function (el) {
                            return JSON.stringify(el.ids) !== JSON.stringify(node.ids);
                        });
                    }
                }, {
                    key: 'close',
                    value: function close() {
                        this.$modalInstance.close();
                    }
                }, {
                    key: 'dismiss',
                    value: function dismiss() {
                        this.$modalInstance.dismiss();
                    }
                }]);

                return ItemSearchModalController;
            })();

            _export('ItemSearchModalController', ItemSearchModalController);
        }
    };
});
System.register('promo-manager/helpers/merchandise-hierarchy-by-depth', ['npm:babel-runtime@5.8.24/core-js/array/from', 'helpers/util', 'promo-manager/layout-view/layout-view-consts', 'promo-manager/helpers/merchandise-hierarchy-by-depth.html!github:systemjs/plugin-text@0.0.2'], function (_export) {
	var _Array$from, Util, LayoutConsts, merchandisehierarchybydepth;

	function merchandiseHierarchyByDepth() {
		var nsCounter = 0;
		return {
			restrict: 'A',
			template: merchandisehierarchybydepth,
			scope: {
				merchandiseHierarchy: '=merchandiseHierarchy',
				blockMhList: '=blockMhList',
				offerVersionMhList: '=offerVersionMhList',
				mhLabelsByDepth: '=mhLabelsByDepth'
			},
			link: function link(scope, element, attrs) {
				var ns = '.mhDisplyDepth' + ++nsCounter;
				var mh = scope.merchandiseHierarchy;
				var blockMhList = scope.blockMhList;
				var offerVersionMhList = scope.offerVersionMhList;
				// Setup our namespaced event bindings so they don't clash amongst multiple instances
				var mhElement = angular.element(element);
				var displayDepth = LayoutConsts.DISPLAY_DEPTH;
				var mhValuesByDepth = _Array$from({ length: displayDepth }, function () {
					return [];
				});
				var visitedNodes = {};

				var collatedMh = mhByDepth(scope.blockMhList || [], scope.offerVersionMhList || []);
				scope.mhLocations = collatedMh.mhLocations;
				scope.mhByDepth = collatedMh.mhByDepth;

				function mhByDepth(blockMhList, offerVersionMhList) {

					var collateMhList = function collateMhList(mhList, allocationLevel) {
						mhList.forEach(function (mhId) {
							var node = mh.getNode(mhId);
							if (!node) {
								console.log("Unable to find block merchandise hierarchy for id=" + mhId);
								return;
							}
							var shownPath = node.getPath().slice(0, displayDepth);
							shownPath.forEach(function (levelMhNode, i) {
								var isVisited = visitedNodes[levelMhNode.id];
								visitedNodes[levelMhNode.id] = allocationLevel;
								if (isVisited) return;

								mhValuesByDepth[i].push(levelMhNode);
							});
						});
					};

					collateMhList(blockMhList, 'block-level');
					collateMhList(offerVersionMhList, 'offer-version-level');
					return { mhLocations: visitedNodes, mhByDepth: mhValuesByDepth };
				}
			}
		};
	}

	return {
		setters: [function (_npmBabelRuntime5824CoreJsArrayFrom) {
			_Array$from = _npmBabelRuntime5824CoreJsArrayFrom['default'];
		}, function (_helpersUtil) {
			Util = _helpersUtil['default'];
		}, function (_promoManagerLayoutViewLayoutViewConsts) {
			LayoutConsts = _promoManagerLayoutViewLayoutViewConsts['default'];
		}, function (_promoManagerHelpersMerchandiseHierarchyByDepthHtmlGithubSystemjsPluginText002) {
			merchandisehierarchybydepth = _promoManagerHelpersMerchandiseHierarchyByDepthHtmlGithubSystemjsPluginText002['default'];
		}],
		execute: function () {
			'use strict';

			_export('default', merchandiseHierarchyByDepth);
		}
	};
});
System.register('helpers/storage', ['npm:babel-runtime@5.8.24/helpers/create-class', 'npm:babel-runtime@5.8.24/helpers/class-call-check', 'github:andris9/simpleStorage@0.1.3'], function (_export) {
  var _createClass, _classCallCheck, simpleStorage, Storage;

  return {
    setters: [function (_npmBabelRuntime5824HelpersCreateClass) {
      _createClass = _npmBabelRuntime5824HelpersCreateClass['default'];
    }, function (_npmBabelRuntime5824HelpersClassCallCheck) {
      _classCallCheck = _npmBabelRuntime5824HelpersClassCallCheck['default'];
    }, function (_githubAndris9SimpleStorage013) {
      simpleStorage = _githubAndris9SimpleStorage013['default'];
    }],
    execute: function () {
      'use strict';

      Storage = (function () {
        function Storage() {
          _classCallCheck(this, Storage);
        }

        _createClass(Storage, null, [{
          key: 'getRecord',
          value: function getRecord(name) {
            var model = simpleStorage.get(name);
            if (model) {
              return model;
            }
          }
        }, {
          key: 'deleteRecord',
          value: function deleteRecord(name) {
            simpleStorage.deleteKey(name);
          }
        }, {
          key: 'setRecord',
          value: function setRecord(name, model) {
            simpleStorage.set(name, model);
          }
        }]);

        return Storage;
      })();

      _export('default', Storage);
    }
  };
});
System.register('helpers/tree-map-node', ['npm:babel-runtime@5.8.24/helpers/create-class', 'npm:babel-runtime@5.8.24/helpers/class-call-check', 'npm:moment@2.10.6'], function (_export) {
	var _createClass, _classCallCheck, moment, TreeMapNode;

	return {
		setters: [function (_npmBabelRuntime5824HelpersCreateClass) {
			_createClass = _npmBabelRuntime5824HelpersCreateClass['default'];
		}, function (_npmBabelRuntime5824HelpersClassCallCheck) {
			_classCallCheck = _npmBabelRuntime5824HelpersClassCallCheck['default'];
		}, function (_npmMoment2106) {
			moment = _npmMoment2106['default'];
		}],
		execute: function () {
			'use strict';

			TreeMapNode = (function () {
				function TreeMapNode(treeMap, node, parentId) {
					_classCallCheck(this, TreeMapNode);

					// Copy over arbitrary metadata
					angular.extend(this, node);

					this.parentId = parentId;
					this._treeMap = treeMap;

					if (node.effectiveTime) {
						// Prefer long format
						this.effectiveMoment = moment(node.effectiveTime);
					} else if (node.effectiveTs) {
						// temporary since effectiveTime is not available from action call yet
						this.effectiveMoment = moment(node.effectiveTs);
					}
				}

				_createClass(TreeMapNode, [{
					key: 'getDepth',
					value: function getDepth() {
						return this.getPath().length;
					}
				}, {
					key: 'getPosition',
					value: function getPosition() {
						return this._position;
					}
				}, {
					key: 'getChildren',
					value: function getChildren() {
						var _this = this;

						return this.childIdList.map(function (childId) {
							return _this._treeMap.getNode(childId);
						});
					}
				}, {
					key: 'getParent',
					value: function getParent() {
						return this._treeMap.getNode(this.parentId);
					}
				}, {
					key: 'getPath',
					value: function getPath() {
						var path = [];
						var rootId = this._treeMap.getRootId();

						for (var node = this; node && node.id != rootId; node = node.getParent()) {
							path.push(node);
						}
						return path.reverse();
					}
				}, {
					key: 'setPosition',
					value: function setPosition(position) {
						var self = this;
						return self._position = position;
					}
				}, {
					key: 'compareTo',
					value: function compareTo(that) {
						var a = this;
						var b = that;
						var aPositions = a.getPath().map(function (node) {
							return node._position;
						});
						var bPositions = b.getPath().map(function (node) {
							return node._position;
						});

						for (var i = 0; i < aPositions.length && i < bPositions.length; ++i) {
							if (aPositions[i] != bPositions[i]) {
								return aPositions[i] - bPositions[i];
							}
						}
						return aPositions.length - bPositions.length;
					}
				}]);

				return TreeMapNode;
			})();

			_export('default', TreeMapNode);
		}
	};
});
System.register('promo-manager/layout-view/controller/actions-handler', ['npm:babel-runtime@5.8.24/helpers/create-class', 'npm:babel-runtime@5.8.24/helpers/class-call-check', 'helpers/util', 'promo-manager/layout-view/layout-view-consts', 'promo-manager/common/item-selection/item-selection', 'promo-manager/layout-view/page-actions/add-pages-modal', 'promo-manager/layout-view/page-actions/index-pages-modal', 'promo-manager/layout-view/page-actions/edit-page-modal', 'promo-manager/layout-view/block-actions/edit-block-modal'], function (_export) {
    var _createClass, _classCallCheck, Util, LayoutConsts, ItemSelection, AddPagesModal, IndexPagesModal, EditPageModal, EditBlockModal, ActionsHandler;

    return {
        setters: [function (_npmBabelRuntime5824HelpersCreateClass) {
            _createClass = _npmBabelRuntime5824HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5824HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5824HelpersClassCallCheck['default'];
        }, function (_helpersUtil) {
            Util = _helpersUtil['default'];
        }, function (_promoManagerLayoutViewLayoutViewConsts) {
            LayoutConsts = _promoManagerLayoutViewLayoutViewConsts['default'];
        }, function (_promoManagerCommonItemSelectionItemSelection) {
            ItemSelection = _promoManagerCommonItemSelectionItemSelection.ItemSelection;
        }, function (_promoManagerLayoutViewPageActionsAddPagesModal) {
            AddPagesModal = _promoManagerLayoutViewPageActionsAddPagesModal.AddPagesModal;
        }, function (_promoManagerLayoutViewPageActionsIndexPagesModal) {
            IndexPagesModal = _promoManagerLayoutViewPageActionsIndexPagesModal.IndexPagesModal;
        }, function (_promoManagerLayoutViewPageActionsEditPageModal) {
            EditPageModal = _promoManagerLayoutViewPageActionsEditPageModal.EditPageModal;
        }, function (_promoManagerLayoutViewBlockActionsEditBlockModal) {
            EditBlockModal = _promoManagerLayoutViewBlockActionsEditBlockModal.EditBlockModal;
        }],
        execute: function () {
            'use strict';

            ActionsHandler = (function () {
                function ActionsHandler($scope, layoutView, context, $translate, $modal, Notifier) {
                    _classCallCheck(this, ActionsHandler);

                    this.layoutView = layoutView;
                    this.context = context;
                    this.$translate = $translate;
                    this.$modal = $modal;
                    this.Notifier = Notifier;
                    this.$scope = $scope;
                    this.pageLevelActions = [{ id: 'add-page', name: $translate.instant('LAYOUT_VIEW_PAGE_ADD_BUTTON') }, { id: 're-order', name: $translate.instant('LAYOUT_VIEW_PAGE_INDEX_BUTTON') }, { id: 'clear-template', name: $translate.instant('CLEAR_TEMPLATE_LABEL') }, { id: 'delete-page', name: $translate.instant('DELETE_PAGE_LABEL') }, { id: 'import-template', name: $translate.instant('IMPORT_TEMPLATE_LABEL') }, { id: 'allocate-grid', name: $translate.instant('ALLOCATE_GRID_LABEL') }];
                }

                _createClass(ActionsHandler, [{
                    key: 'openMultiSelectionPagesModal',
                    value: function openMultiSelectionPagesModal(action) {
                        this.selectedPageLevelAction = {};
                        if (action == 'add-page' || action == 're-order') {
                            this.getPageModalHandler(action);
                            return;
                        }
                        //first get all selected pages
                        var pages = this.layoutView.getSelectedPagesInWorld();
                        var multiSelctionAction = true;
                        var pageVersion = [];
                        if (pages && pages.length) {
                            //open modal if action is allowed
                            pages.forEach(function (page) {
                                //reset selected pages
                                page.selected = false;
                                var pv = page.pageVersion;
                                var permitted = null;
                                if (pv.permittedActions && pv.permittedActions.length) {
                                    permitted = pv.permittedActions.some(function (pa) {
                                        if (pa.id == action) {
                                            return true;
                                        }
                                    });
                                }
                                if (!permitted) {
                                    multiSelctionAction = false;
                                    return;
                                }
                                pageVersion.push(pv);
                            });
                            if (!multiSelctionAction) {
                                this.Notifier.info('ACTION_NOT_PERMITTED_ERROR');
                                return;
                            }
                            var multiSelect = true;

                            this.getPageVersionModalHandler(action, pageVersion, multiSelect);
                        }
                    }
                }, {
                    key: 'getBlockModalHandler',
                    value: function getBlockModalHandler(action, block, pageVersion) {
                        //most actions at the block level are performed in the legacy code
                        // check to see if the legacy context object has an entry for the action
                        if (this.context.legacyHooks && this.context.legacyHooks[action]) {

                            // adBlockId: 810
                            // channel: "printMedia"
                            // displayType: NaN
                            // isWorkflowLocked: "false"
                            // loadFromContextMenu: true
                            // merchandiseHierarchy: NaN
                            // offerId: -1
                            // rfcCanModify: "false"
                            // rfcCanRequest: "true"
                            // rfcId: NaN
                            var ctxMenu = {
                                adBlockId: block.id,
                                channel: this.context.channelCode,
                                offerId: block.offerVersion ? block.offerVersion.getOffer().id : -1
                            };
                            this.context.legacyHooks[action](ctxMenu);
                            return;
                        }

                        var fn = Util.camelize('open-' + action + '-modal');
                        // find object (using this)
                        fn = this[fn];
                        // is object a function?
                        if (typeof fn === "function") {
                            //run it
                            fn.apply(null, [block, pageVersion, this]);
                        }
                    }
                }, {
                    key: 'getPageVersionModalHandler',
                    value: function getPageVersionModalHandler(action, pageVersion, multiSelect) {
                        if (!multiSelect) {
                            multiSelect = false;
                        }
                        // for context menu items, read the permitted actios and find/run the required funtion
                        var fn = Util.camelize('open-' + action + '-modal');
                        // find object (using this)
                        fn = this[fn];
                        // is object a function?
                        if (typeof fn === "function") {
                            //run it
                            fn.apply(null, [pageVersion, this, multiSelect]); // "this" is lost during the apply, so take it with us
                        }
                    }
                }, {
                    key: 'getPageModalHandler',
                    value: function getPageModalHandler(action) {
                        // for page level actions, read the permitted actions and find/run the required funtion
                        var fn = Util.camelize('open-' + action + '-modal');
                        // find object (using this)
                        fn = this[fn];
                        // is object a function?
                        if (typeof fn === "function") {
                            //run it
                            fn.apply(null, [this]); // "this" is lost during the apply, so take it with us
                        }
                    }

                    // this is for testing only -- remove this and attach to the offer wizard
                }, {
                    key: 'openItemSelectionModal',
                    value: function openItemSelectionModal() {
                        ItemSelection.open(this.$scope, this.$modal, this.$translate, this.layoutView);
                    }

                    //pages      
                }, {
                    key: 'openAddPageModal',
                    value: function openAddPageModal(self) {
                        AddPagesModal.open(self.$scope, self.$modal, self.$translate, self.layoutView);
                    }
                }, {
                    key: 'openReOrderModal',
                    value: function openReOrderModal(self) {
                        IndexPagesModal.open(self.$scope, self.$modal, self.$translate, self.layoutView);
                    }

                    //page versions      
                }, {
                    key: 'openAllocateGridModal',
                    value: function openAllocateGridModal(pageVersion, self, multiSelect) {
                        EditPageModal.open(self.$scope, self.$modal, self.$translate, self.layoutView, pageVersion, LayoutConsts.EDIT_MODE, multiSelect);
                    }
                }, {
                    key: 'openDeletePageModal',
                    value: function openDeletePageModal(pageVersion, self, multiSelect) {
                        if (multiSelect) {
                            var isSpread = pageVersion.some(function (pv) {
                                return pv.isInSpreadGroup();
                            });
                            if (isSpread) {
                                this.layoutView.Notifier.error('LAYOUT_VIEW_DELETE_PAGE_SPREAD_GROUP_ERROR');
                                return;
                            }
                        } else if (pageVersion.isInSpreadGroup()) {
                            this.layoutView.Notifier.error('LAYOUT_VIEW_DELETE_PAGE_SPREAD_GROUP_ERROR');
                            return;
                        }
                        EditPageModal.open(self.$scope, self.$modal, self.$translate, self.layoutView, pageVersion, LayoutConsts.DELETE_MODE, multiSelect);
                    }
                }, {
                    key: 'openClearTemplateModal',
                    value: function openClearTemplateModal(pageVersion, self, multiSelect) {
                        EditPageModal.open(self.$scope, self.$modal, self.$translate, self.layoutView, pageVersion, LayoutConsts.TEMPLATE_CLEAR_MODE, multiSelect);
                    }
                }, {
                    key: 'openImportTemplateModal',
                    value: function openImportTemplateModal(pageVersion, self, multiSelect) {
                        EditPageModal.open(self.$scope, self.$modal, self.$translate, self.layoutView, pageVersion, LayoutConsts.TEMPLATE_APPLY_MODE, multiSelect);
                    }

                    // not used, not tested      
                }, {
                    key: 'openMoveOffersToParkingLotModal',
                    value: function openMoveOffersToParkingLotModal(pageVersion, self) {
                        EditPageModal.open(self.$scope, self.$modal, self.$translate, self.layoutView, pageVersion, LayoutConsts.MOVE_OFFERS_MODE);
                    }

                    //blocks             
                }, {
                    key: 'openAddToBasketModal',
                    value: function openAddToBasketModal(block, pageVersion, self) {
                        EditBlockModal.open(self.$scope, self.$modal, self.$translate, self.layoutView, block, pageVersion, LayoutConsts.ADD_TO_BASKET_MODE);
                    }
                }, {
                    key: 'openEditAllocationModal',
                    value: function openEditAllocationModal(block, pageVersion, self) {
                        EditBlockModal.open(self.$scope, self.$modal, self.$translate, self.layoutView, block, pageVersion, LayoutConsts.EDIT_MODE);
                    }
                }]);

                return ActionsHandler;
            })();

            _export('default', ActionsHandler);
        }
    };
});
System.register('promo-manager/common/item-selection/item-search-directive', ['promo-manager/common/item-selection/item-search'], function (_export) {
    'use strict';

    var ItemSearchController;

    _export('default', itemSearch);

    function itemSearch() {
        return {
            restrict: 'A',
            scope: {
                'context': '='
            },
            template: '<button class="btn" ng-click="ctrl.open()" translate="ITEM_SELECTION_BUTTON">Click me</button>',
            controller: ItemSearchController,
            controllerAs: 'ctrl',
            bindToController: true
        };
    }

    return {
        setters: [function (_promoManagerCommonItemSelectionItemSearch) {
            ItemSearchController = _promoManagerCommonItemSelectionItemSearch.ItemSearchController;
        }],
        execute: function () {}
    };
});
System.register('helpers/tree-map', ['npm:babel-runtime@5.8.24/helpers/create-class', 'npm:babel-runtime@5.8.24/helpers/class-call-check', 'helpers/tree-map-node'], function (_export) {
	var _createClass, _classCallCheck, TreeMapNode, TreeMap;

	return {
		setters: [function (_npmBabelRuntime5824HelpersCreateClass) {
			_createClass = _npmBabelRuntime5824HelpersCreateClass['default'];
		}, function (_npmBabelRuntime5824HelpersClassCallCheck) {
			_classCallCheck = _npmBabelRuntime5824HelpersClassCallCheck['default'];
		}, function (_helpersTreeMapNode) {
			TreeMapNode = _helpersTreeMapNode['default'];
		}],
		execute: function () {
			'use strict';

			TreeMap = (function () {
				// initNodeMap:
				//   contains a map of id -> { id, parentId, childIdList }
				//   contains one well-defined key 'root' -> id of the rooted tree

				function TreeMap(initNodeMap, rootId, collapseFn, comparatorFn) {
					_classCallCheck(this, TreeMap);

					this.rootId = rootId;
					this.nodeMap = {};
					this.init(initNodeMap, this.rootId, null, collapseFn, comparatorFn);
				}

				// Recursively walk the tree for all connected elements and return array containing current node
				// at each step if a node is collapsed, instead return the nodes created by the children

				_createClass(TreeMap, [{
					key: 'init',
					value: function init(initNodeMap, nodeId, parentId, collapseFn, comparatorFn) {
						var _this = this;

						var node = initNodeMap[nodeId];
						if (nodeId == this.rootId) {
							this.nodeMap[this.rootId] = new TreeMapNode(this, node, parentId);
						}

						if (angular.isFunction(collapseFn) && collapseFn(node)) {
							if (!node.childIdList) {
								node.childIdList = [];
							}
							// If it's a collapse node, just return the initialized children results instead
							return angular.element.map(node.childIdList, function (childId) {
								// childId represents the child id under a collapsed parent we want to init
								return _this.init(initNodeMap, childId, parentId, collapseFn, comparatorFn);
							});
						}

						var tmNode = this.nodeMap[node.id] = new TreeMapNode(this, node, parentId);
						this.initChildren(initNodeMap, tmNode, collapseFn, comparatorFn);
						return tmNode;
					}
				}, {
					key: 'initChildren',
					value: function initChildren(initNodeMap, parentNode, collapseFn, comparatorFn) {
						var _this2 = this;

						if (!parentNode.childIdList) {
							parentNode.childIdList = [];
						}
						// For each child, initialize them and get their TreeMapNode(s) back
						// Use jQuery's map to flatten list of each child node/nodes
						var includedChildNodes = angular.element.map(parentNode.childIdList, function (childId) {
							return _this2.init(initNodeMap, childId, parentNode.id, collapseFn, comparatorFn);
						});

						// Sort child nodes if a compareFn is provided
						if (angular.isFunction(comparatorFn)) {
							includedChildNodes.sort(comparatorFn);
						}

						// Index nodes according to their final position
						includedChildNodes.forEach(function (node, i) {
							return node.setPosition(i);
						});

						// Resync the childrenId list
						parentNode.childIdList = includedChildNodes.map(function (node) {
							return node.id;
						});
					}

					// Get tree root id
				}, {
					key: 'getRootId',
					value: function getRootId() {
						return this.rootId;
					}

					// Get a promise to root node
				}, {
					key: 'getRootNode',
					value: function getRootNode() {
						return this.getNode(this.rootId);
					}

					// Get promise to arbitrary tree node
				}, {
					key: 'getNode',
					value: function getNode(nodeId) {
						return this.nodeMap[nodeId];
					}
				}]);

				return TreeMap;
			})();

			_export('default', TreeMap);
		}
	};
});
System.register('promo-manager/layout-view/layout-view-camera', ['npm:babel-runtime@5.8.24/helpers/create-class', 'npm:babel-runtime@5.8.24/helpers/class-call-check', 'npm:gl-matrix@2.3.1', 'helpers/storage', 'promo-manager/layout-view/layout-view-consts'], function (_export) {
	var _createClass, _classCallCheck, glMatrix, Storage, LayoutConsts, vec3, vec4, mat4, Camera;

	return {
		setters: [function (_npmBabelRuntime5824HelpersCreateClass) {
			_createClass = _npmBabelRuntime5824HelpersCreateClass['default'];
		}, function (_npmBabelRuntime5824HelpersClassCallCheck) {
			_classCallCheck = _npmBabelRuntime5824HelpersClassCallCheck['default'];
		}, function (_npmGlMatrix231) {
			glMatrix = _npmGlMatrix231['default'];
		}, function (_helpersStorage) {
			Storage = _helpersStorage['default'];
		}, function (_promoManagerLayoutViewLayoutViewConsts) {
			LayoutConsts = _promoManagerLayoutViewLayoutViewConsts['default'];
		}],
		execute: function () {
			'use strict';

			vec3 = glMatrix.vec3;
			vec4 = glMatrix.vec4;
			mat4 = glMatrix.mat4;

			Camera = (function () {
				function Camera() {
					_classCallCheck(this, Camera);

					var restoreMatrix = this.restore();
					if (restoreMatrix) {
						this.cameraSpaceMat4 = restoreMatrix;
					} else {
						this.cameraSpaceMat4 = mat4.identity(mat4.create());
					}
				}

				_createClass(Camera, [{
					key: 'translate',
					value: function translate(tx, ty, tz) {
						var transform1 = mat4.identity(mat4.create());
						mat4.translate(transform1, transform1, vec4.fromValues(-tx, -ty, -tz, 1));
						mat4.multiply(this.cameraSpaceMat4, transform1, this.cameraSpaceMat4);
					}
				}, {
					key: 'scale',
					value: function scale(sx, sy, sz) {
						var transform1 = mat4.identity(mat4.create());
						mat4.scale(transform1, transform1, vec4.fromValues(sx, sy, sz, 1));
						mat4.multiply(this.cameraSpaceMat4, transform1, this.cameraSpaceMat4);
					}
				}, {
					key: 'scaleAbout',
					value: function scaleAbout(sx, sy, sz, tx, ty, tz) {
						this.translate(tx, ty, tz);
						this.scale(sx, sy, sz);
						this.translate(-tx, -ty, -tz);
					}
				}, {
					key: 'setPosition',
					value: function setPosition(tx, ty, tz) {
						mat4.identity(this.cameraSpaceMat4);
						this.translate(tx, ty, tz);
					}
				}, {
					key: 'setIdentity',
					value: function setIdentity() {
						mat4.identity(this.cameraSpaceMat4);
					}
				}, {
					key: 'getInverseDiagonal',
					value: function getInverseDiagonal() {
						var m = this.getInverse();
						return [m[0], m[5], m[10], m[15]];
					}
				}, {
					key: 'getDiagonal',
					value: function getDiagonal() {
						var m = this.getMatrix();
						return [m[0], m[5], m[10], m[15]];
					}
				}, {
					key: 'getMatrix',
					value: function getMatrix() {
						return this.cameraSpaceMat4;
					}

					// UPDATE LOCAL STORAGE (jStorage?)
					// WITH THE NEW CAMERA POSITION
				}, {
					key: 'save',
					value: function save() {
						Storage.setRecord(LayoutConsts.MODE_CAMERA, this.getMatrix());
					}
				}, {
					key: 'restore',
					value: function restore() {
						var matrix = Storage.getRecord(LayoutConsts.MODE_CAMERA);
						if (matrix) {
							return matrix;
						}
						return null;
					}
				}, {
					key: 'delete',
					value: function _delete() {
						Storage.deleteRecord(LayoutConsts.MODE_CAMERA);
					}
				}, {
					key: 'getInverse',
					value: function getInverse() {
						var inverse = mat4.identity(mat4.create());
						mat4.invert(inverse, this.getMatrix());
						return inverse;
					}
				}], [{
					key: 'printMatrix',
					value: function printMatrix(m) {
						console.log(m[4 * 0 + 0], m[4 * 1 + 0], m[4 * 2 + 0], m[4 * 3 + 0]);
						console.log(m[4 * 0 + 1], m[4 * 1 + 1], m[4 * 2 + 1], m[4 * 3 + 1]);
						console.log(m[4 * 0 + 2], m[4 * 1 + 2], m[4 * 2 + 2], m[4 * 3 + 2]);
						console.log(m[4 * 0 + 3], m[4 * 1 + 3], m[4 * 2 + 3], m[4 * 3 + 3]);
						console.log('---------------------');
					}
				}]);

				return Camera;
			})();

			_export('default', Camera);
		}
	};
});
System.register('promo-manager/layout-view/helpers/page-version-grip-ui', ['npm:babel-runtime@5.8.24/helpers/get', 'npm:babel-runtime@5.8.24/helpers/inherits', 'npm:babel-runtime@5.8.24/helpers/create-class', 'npm:babel-runtime@5.8.24/helpers/class-call-check', 'npm:babel-runtime@5.8.24/helpers/sliced-to-array', 'npm:gl-matrix@2.3.1', 'promo-manager/layout-view/layout-view-consts', 'promo-manager/layout-view/helpers/layout-view-ui-element'], function (_export) {
	var _get, _inherits, _createClass, _classCallCheck, _slicedToArray, glMatrix, LayoutConsts, LayoutViewUiElement, vec3, vec4, mat4, PageVersionGripUi;

	return {
		setters: [function (_npmBabelRuntime5824HelpersGet) {
			_get = _npmBabelRuntime5824HelpersGet['default'];
		}, function (_npmBabelRuntime5824HelpersInherits) {
			_inherits = _npmBabelRuntime5824HelpersInherits['default'];
		}, function (_npmBabelRuntime5824HelpersCreateClass) {
			_createClass = _npmBabelRuntime5824HelpersCreateClass['default'];
		}, function (_npmBabelRuntime5824HelpersClassCallCheck) {
			_classCallCheck = _npmBabelRuntime5824HelpersClassCallCheck['default'];
		}, function (_npmBabelRuntime5824HelpersSlicedToArray) {
			_slicedToArray = _npmBabelRuntime5824HelpersSlicedToArray['default'];
		}, function (_npmGlMatrix231) {
			glMatrix = _npmGlMatrix231['default'];
		}, function (_promoManagerLayoutViewLayoutViewConsts) {
			LayoutConsts = _promoManagerLayoutViewLayoutViewConsts['default'];
		}, function (_promoManagerLayoutViewHelpersLayoutViewUiElement) {
			LayoutViewUiElement = _promoManagerLayoutViewHelpersLayoutViewUiElement['default'];
		}],
		execute: function () {
			'use strict';

			vec3 = glMatrix.vec3;
			vec4 = glMatrix.vec4;
			mat4 = glMatrix.mat4;

			PageVersionGripUi = (function (_LayoutViewUiElement) {
				_inherits(PageVersionGripUi, _LayoutViewUiElement);

				function PageVersionGripUi(pageVersion) {
					_classCallCheck(this, PageVersionGripUi);

					_get(Object.getPrototypeOf(PageVersionGripUi.prototype), 'constructor', this).call(this);
					this.pageVersion = pageVersion;
					this.type = LayoutConsts.TYPE_PAGE_GRIP;
					//context menu
					this.open = false;
					this.selected = false;
				}

				_createClass(PageVersionGripUi, [{
					key: 'calculateWorldSpaceCoordinates',
					value: function calculateWorldSpaceCoordinates(worldTransformMat4) {
						var objectSpacePoints = this.getObjectSpacePoints();
						var pv = this.pageVersion;
						var invertPageYVec4 = vec4.fromValues(1, 1 / (pv.dimension.h * pv.unitToPixelRatio), 1, 1);
						worldTransformMat4 = mat4.scale(mat4.create(), worldTransformMat4, invertPageYVec4);

						var _getTransformedPoints = this.getTransformedPoints(objectSpacePoints, worldTransformMat4);

						var _getTransformedPoints2 = _slicedToArray(_getTransformedPoints, 2);

						this._worldVec0 = _getTransformedPoints2[0];
						this._worldVec1 = _getTransformedPoints2[1];

						var _worldVec0 = _slicedToArray(this._worldVec0, 3);

						this._worldX0 = _worldVec0[0];
						this._worldY0 = _worldVec0[1];
						this._worldZ0 = _worldVec0[2];

						var _worldVec1 = _slicedToArray(this._worldVec1, 3);

						this._worldX1 = _worldVec1[0];
						this._worldY1 = _worldVec1[1];
						this._worldZ1 = _worldVec1[2];
					}
				}, {
					key: 'calculateCameraSpaceCoordinates',
					value: function calculateCameraSpaceCoordinates(cameraMat4) {
						// [Grips's CameraVec4] = [CameraMat4] * [Grip's WorldVec4]
						var worldSpacePoints = this.getWorldSpacePoints();

						// Convert CameraVec4 into css styles

						var _getTransformedPoints3 = this.getTransformedPoints(worldSpacePoints, cameraMat4);

						var _getTransformedPoints32 = _slicedToArray(_getTransformedPoints3, 2);

						this._cameraVec0 = _getTransformedPoints32[0];
						this._cameraVec1 = _getTransformedPoints32[1];
						var v0 = this._cameraVec0;
						var v1 = this._cameraVec1;

						this._cameraSpaceStyles = {
							'transform': 'translate(' + v0[0] + 'px, ' + v0[1] + 'px)',
							'-ms-transform': 'translate(' + v0[0] + 'px, ' + v0[1] + 'px)',
							'-webkit-transform': 'translate(' + v0[0] + 'px, ' + v0[1] + 'px)',
							'width': v1[0] - v0[0] + 1,
							'height': v1[1] - v0[1] + 1,
							'z-index': Math.floor(v0[2] + 1)
						};
						// FIXME - if subpixel blurring/aliasing is not a problem and all
						// supported browsers can handle the 2d/3d transforms, use that
					}

					// [ObjectVec4]
				}, {
					key: 'getObjectSpacePoints',
					value: function getObjectSpacePoints() {
						var h = LayoutConsts.PAGE_GRIP_HEIGHT;
						return [vec4.fromValues(0, -h, 0, 1), vec4.fromValues(1, 0, 0, 1)];
					}

					// [WorldVec4]
				}, {
					key: 'getWorldSpacePoints',
					value: function getWorldSpacePoints() {
						return [vec4.clone(this._worldVec0), vec4.clone(this._worldVec1)];
					}

					// [TransformMat4] * [PointVec4]
				}, {
					key: 'getTransformedPoints',
					value: function getTransformedPoints(points, transformMat4) {
						return points.map(function (pointVec4) {
							return vec4.transformMat4(pointVec4, pointVec4, transformMat4);
						});
					}
				}, {
					key: 'updateStyles',
					value: function updateStyles(cameraMat4) {
						// based on this.pageVersion, update coordinates
					}
				}]);

				return PageVersionGripUi;
			})(LayoutViewUiElement);

			_export('default', PageVersionGripUi);
		}
	};
});
System.register("helpers/util", ["npm:babel-runtime@5.8.24/helpers/create-class", "npm:babel-runtime@5.8.24/helpers/class-call-check", "npm:babel-runtime@5.8.24/core-js/map", "helpers/consts"], function (_export) {
	var _createClass, _classCallCheck, _Map, Consts, Util;

	return {
		setters: [function (_npmBabelRuntime5824HelpersCreateClass) {
			_createClass = _npmBabelRuntime5824HelpersCreateClass["default"];
		}, function (_npmBabelRuntime5824HelpersClassCallCheck) {
			_classCallCheck = _npmBabelRuntime5824HelpersClassCallCheck["default"];
		}, function (_npmBabelRuntime5824CoreJsMap) {
			_Map = _npmBabelRuntime5824CoreJsMap["default"];
		}, function (_helpersConsts) {
			Consts = _helpersConsts["default"];
		}],
		execute: function () {
			"use strict";

			Util = (function () {
				function Util() {
					_classCallCheck(this, Util);
				}

				_createClass(Util, null, [{
					key: "binarySearch",
					value: function binarySearch(a, k, compareFn) {
						if (compareFn == Consts.STRING_COMPARATOR_FUNCTION && !angular.isFunction(compareFn)) {
							compareFn = Util[Consts.STRING_COMPARATOR_FUNCTION];
						}
						if (!angular.isFunction(compareFn)) {
							compareFn = Util.defaultComparator;
						}
						var left = 0;
						var right = a.length - 1;
						while (left <= right) {
							var mid = Math.floor(0.5 * (left + right));
							var cmp = compareFn(a[mid], k);
							if (cmp < 0) {
								left = mid + 1;
							} else if (cmp > 0) {
								right = mid - 1;
							} else {
								return mid;
							}
						}
						return -(left + 1);
					}
				}, {
					key: "binarySearchInsertCeiling",
					value: function binarySearchInsertCeiling(a, k, compareFn) {
						var index = Util.binarySearch(a, k, compareFn);
						return index >= 0 ? index : -(index + 1);
					}
				}, {
					key: "binarySearchInsertFloor",
					value: function binarySearchInsertFloor(a, k, compareFn) {
						var index = Util.binarySearch(a, k, compareFn);
						return index >= 0 ? index : -(index + 2);
					}
				}, {
					key: "getFromSortedArray",
					value: function getFromSortedArray(a, obj, compareFn) {
						if (compareFn == Consts.STRING_COMPARATOR_FUNCTION && !angular.isFunction(compareFn)) {
							compareFn = Util[Consts.STRING_COMPARATOR_FUNCTION];
						}
						if (!angular.isFunction(compareFn)) {
							compareFn = Util.defaultComparator;
						}
						var searchIdx = Util.binarySearch(a, obj, compareFn);
						if (searchIdx >= 0) {
							return a[searchIdx];
						}
						return undefined;
					}
				}, {
					key: "insertIntoSortedArray",
					value: function insertIntoSortedArray(a, obj, compareFn) {
						if (compareFn == Consts.STRING_COMPARATOR_FUNCTION && !angular.isFunction(compareFn)) {
							compareFn = Util[Consts.STRING_COMPARATOR_FUNCTION];
						}
						if (!angular.isFunction(compareFn)) {
							compareFn = Util.defaultComparator;
						}

						var searchIdx = Util.binarySearch(a, obj, compareFn);
						var insertIdx = searchIdx >= 0 ? searchIdx : -(searchIdx + 1);
						a.splice(insertIdx, 0, obj);
					}
				}, {
					key: "insertIntoUniqueSortedArray",
					value: function insertIntoUniqueSortedArray(a, obj, compareFn) {
						if (compareFn == Consts.STRING_COMPARATOR_FUNCTION && !angular.isFunction(compareFn)) {
							compareFn = Util[Consts.STRING_COMPARATOR_FUNCTION];
						}
						if (!angular.isFunction(compareFn)) {
							compareFn = Util.defaultComparator;
						}

						var searchIdx = Util.binarySearch(a, obj, compareFn);
						if (searchIdx < 0) {
							a.splice(-(searchIdx + 1), 0, obj);
						}
					}
				}, {
					key: "removeFromSortedArray",
					value: function removeFromSortedArray(a, obj, compareFn) {
						if (compareFn == Consts.STRING_COMPARATOR_FUNCTION && !angular.isFunction(compareFn)) {
							compareFn = Util[Consts.STRING_COMPARATOR_FUNCTION];
						}
						if (!angular.isFunction(compareFn)) {
							compareFn = Util.defaultComparator;
						}

						var searchIdx = Util.binarySearch(a, obj, compareFn);
						if (searchIdx >= 0) {
							return a.splice(searchIdx, 1)[0];
						}
						return false;
					}
				}, {
					key: "removeFromUnsortedArray",
					value: function removeFromUnsortedArray(a, obj) {
						var idx = a.indexOf(obj);
						if (idx >= 0) {
							a.splice(idx, 1);
						}
					}

					// Assumes numeric input
					// Clamps x within the range [min, max]
				}, {
					key: "clamp",
					value: function clamp(x, min, max) {
						return Math.max(Math.min(x, max), min);
					}

					// Returns removed element if found or undefined if not found
				}, {
					key: "removeElement",
					value: function removeElement(array, target) {
						var idx = array.indexOf(target);
						if (idx >= 0) {
							return array.splice(idx, 1);
						}
						return undefined;
					}

					// Returns array with unique elements
				}, {
					key: "removeDuplicateElements",
					value: function removeDuplicateElements(array) {
						var a = array;
						for (var i = 0; i < a.length; ++i) {
							for (var j = i + 1; j < a.length; ++j) {
								if (a[i] === a[j]) {
									a.splice(j--, 1);
								}
							}
						}
						return a;
					}

					// merges an array then returns array with unique elements
				}, {
					key: "mergeRemoveDuplicateElements",
					value: function mergeRemoveDuplicateElements(array) {
						var a = array.concat();
						for (var i = 0; i < a.length; ++i) {
							for (var j = i + 1; j < a.length; ++j) {
								if (a[i] === a[j]) a.splice(j--, 1);
							}
						}
						return a;
					}

					// Create an es6 version of some ng-tasty services
				}, {
					key: "debounce",
					value: function debounce() {
						return function (func, wait, immediate) {
							var args, context, debounceTimeout, timeout;
							debounceTimeout = function () {
								timeout = null;
								if (!immediate) {
									func.apply(context, args);
								}
							};
							return function debounce() {
								context = this;
								args = arguments;
								var callNow = immediate && !timeout;
								clearTimeout(timeout);
								timeout = setTimeout(debounceTimeout, wait);
								if (callNow) {
									func.apply(context, args);
								}
							};
						};
					}
				}, {
					key: "throttle",
					value: function throttle() {
						return function (fn, threshhold, scope) {
							threshhold = threshhold || 250;
							var last, promise;
							return function throttle() {
								var context = scope || this;
								var now = Date.now(),
								    args = arguments;
								if (last && now < last + threshhold) {
									// hold on to it
									clearTimeout(promise);
									promise = setTimeout(function throttleTimeout() {
										last = now;
										fn.apply(context, args);
									}, threshhold);
								} else {
									last = now;
									fn.apply(context, args);
								}
							};
						};
					}
				}, {
					key: "objectAsMap",
					value: function objectAsMap(data, mapper) {
						var m = new _Map();
						angular.forEach(data, function (v, k) {
							m.set(k, angular.isFunction(mapper) ? mapper(v) : v);
						});
						return m;
					}

					// Reverse mapping from [ a, b, c ] to { a: 0, b: 1, c: 2 }
				}, {
					key: "arrayAsMap",
					value: function arrayAsMap(data) {
						var m = new _Map();
						data.forEach(function (ele, i) {
							m.set(ele, i);
						});
						return m;
					}
				}, {
					key: "camelize",
					value: function camelize(str) {
						return str.replace(/^([A-Z])|[\s-_](\w)/g, function (match, p1, p2) {
							if (p2) {
								return p2.toUpperCase();
							}
							return p1.toLowerCase();
						});
					}
				}, {
					key: "dynamicSort",
					value: function dynamicSort(property) {
						var sortOrder = 1;
						if (property[0] === "-") {
							sortOrder = -1;
							property = property.substr(1);
						}
						return function (a, b) {
							var result = a[property] < b[property] ? -1 : a[property] > b[property] ? 1 : 0;
							return result * sortOrder;
						};
					}
				}, {
					key: "defaultComparator",
					value: function defaultComparator(a, b) {
						return a - b;
					}
				}, {
					key: "stringComparator",
					value: function stringComparator(a, b) {
						return a.localeCompare(b);
					}
				}]);

				return Util;
			})();

			_export("default", Util);
		}
	};
});
System.register('promo-manager/layout-view/model/page-version', ['npm:babel-runtime@5.8.24/helpers/create-class', 'npm:babel-runtime@5.8.24/helpers/class-call-check', 'npm:babel-runtime@5.8.24/helpers/sliced-to-array', 'npm:gl-matrix@2.3.1', 'promo-manager/layout-view/layout-view-consts', 'promo-manager/layout-view/model/block', 'promo-manager/layout-view/model/block-group-to-blockId-manager', 'promo-manager/layout-view/helpers/page-version-grip-ui', 'promo-manager/layout-view/model/permitted-action'], function (_export) {
	var _createClass, _classCallCheck, _slicedToArray, glMatrix, LayoutConsts, Block, BlockGroupToBlockIdManager, PageVersionGripUi, PermittedAction, vec3, vec4, mat4, PageVersion;

	return {
		setters: [function (_npmBabelRuntime5824HelpersCreateClass) {
			_createClass = _npmBabelRuntime5824HelpersCreateClass['default'];
		}, function (_npmBabelRuntime5824HelpersClassCallCheck) {
			_classCallCheck = _npmBabelRuntime5824HelpersClassCallCheck['default'];
		}, function (_npmBabelRuntime5824HelpersSlicedToArray) {
			_slicedToArray = _npmBabelRuntime5824HelpersSlicedToArray['default'];
		}, function (_npmGlMatrix231) {
			glMatrix = _npmGlMatrix231['default'];
		}, function (_promoManagerLayoutViewLayoutViewConsts) {
			LayoutConsts = _promoManagerLayoutViewLayoutViewConsts['default'];
		}, function (_promoManagerLayoutViewModelBlock) {
			Block = _promoManagerLayoutViewModelBlock['default'];
		}, function (_promoManagerLayoutViewModelBlockGroupToBlockIdManager) {
			BlockGroupToBlockIdManager = _promoManagerLayoutViewModelBlockGroupToBlockIdManager['default'];
		}, function (_promoManagerLayoutViewHelpersPageVersionGripUi) {
			PageVersionGripUi = _promoManagerLayoutViewHelpersPageVersionGripUi['default'];
		}, function (_promoManagerLayoutViewModelPermittedAction) {
			PermittedAction = _promoManagerLayoutViewModelPermittedAction['default'];
		}],
		execute: function () {
			'use strict';

			vec3 = glMatrix.vec3;
			vec4 = glMatrix.vec4;
			mat4 = glMatrix.mat4;

			PageVersion = (function () {
				function PageVersion(data, page) {
					var _this = this;

					_classCallCheck(this, PageVersion);

					var blockList = [];
					if (data.blockList) {
						blockList = data.blockList;
					}
					this.type = LayoutConsts.TYPE_PAGE;
					this.id = data.id;
					this.name = data.name;
					this.description = data.description;
					this.position = page.position; // Remember to modify BY REFERENCE
					this.dimension = { w: data.pageWidth, h: data.pageHeight, d: 0 };
					this.unit = data.unit;
					this.unitToPixelRatio = LayoutConsts.LAYOUT_VIEW_UNITS[this.unit];
					this.marketIds = data.versionMarketIdList;
					this.page = page; // Parent reference
					this.blockMap = new BlockGroupToBlockIdManager();
					this.merchandiseHierarchyList = (data.merchandiseHierarchyList || []).map(function (mh) {
						return mh.id;
					});
					this.blockList = blockList.map(function (blockData) {
						var block = new Block(blockData, _this.page);
						angular.forEach(blockData.blockGroupMap, function (bgm, k) {
							_this.blockMap.addBlockGroup(bgm.id, bgm.name, bgm.blockIdList);
						});
						return block;
					});
					if (data.permittedActions) {
						this.permittedActions = $.map(data.permittedActions, function (name, action) {
							return new PermittedAction(name, action);
						});
					}

					if (this.position.x || this.position.y) {
						this.ui = {
							grip: new PageVersionGripUi(this)
						};
					}
				}

				_createClass(PageVersion, [{
					key: 'isActiveChangeRequest',
					value: function isActiveChangeRequest() {
						return this.blockList.some(function (block) {
							return block.isActiveChangeRequest();
						});
					}
				}, {
					key: 'hasOffers',
					value: function hasOffers() {
						return this.blockList.some(function (block) {
							return block.hasOffers();
						});
					}
				}, {
					key: 'getPageVersionUiOffset',
					value: function getPageVersionUiOffset() {
						return vec4.fromValues(0, LayoutConsts.PAGE_GRIP_HEIGHT, 0, 0);
					}
				}, {
					key: 'getExtent',
					value: function getExtent() {
						var pageVersionExtentVec4 = vec4.fromValues(this.dimension.w, this.dimension.h, this.dimension.d, 1);
						vec4.multiply(pageVersionExtentVec4, pageVersionExtentVec4, vec4.fromValues(this.unitToPixelRatio, this.unitToPixelRatio, 1, 1));
						var pageVersionConstantsVec4 = vec4.fromValues(0, LayoutConsts.PAGE_GRIP_HEIGHT, 0, 0);
						return vec4.add(pageVersionExtentVec4, pageVersionExtentVec4, pageVersionConstantsVec4);
					}

					// [ObjectVec4]
				}, {
					key: 'getObjectSpacePoints',
					value: function getObjectSpacePoints() {
						return [vec4.fromValues(0, 0, 0, 1), vec4.fromValues(1, 1, 0, 1)];
					}

					// [WorldVec4]
				}, {
					key: 'getWorldSpacePoints',
					value: function getWorldSpacePoints() {
						return [vec4.clone(this._worldVec0), vec4.clone(this._worldVec1)];
					}

					// [TransformMat4] * [PointVec4]
				}, {
					key: 'getTransformedPoints',
					value: function getTransformedPoints(points, transformMat4) {
						return points.map(function (pointVec4) {
							return vec4.transformMat4(pointVec4, pointVec4, transformMat4);
						});
					}
				}, {
					key: 'getWorldTransformMat4',
					value: function getWorldTransformMat4() {
						var pos = this.position;
						var dim = this.dimension;
						var unitRatio = this.unitToPixelRatio;
						// [WorldTransformMat4] = [TranslateMat4] * [ScaleMat4]
						var worldTransformMat4 = mat4.identity(mat4.create());
						mat4.translate(worldTransformMat4, worldTransformMat4, vec4.fromValues(pos.x, pos.y, pos.z, 1));
						return mat4.scale(worldTransformMat4, worldTransformMat4, vec3.fromValues(dim.w * unitRatio, dim.h * unitRatio, 1));
					}

					// Calculate world space coordinates for the page and underlying entities
					// Full calculation:
					//     [CameraVec4] = [CameraMat4] * [TranslateMat4] * [ScaleMat4] * [ObjectVec4]
					// World space step:
					//     [WorldTransformMat4] = [TranslateMat4] * [ScaleMat4]
					//     [WorldVec4] = [WorldTransformMat4] * [ObjectVec4]
					// Camera space step:
					//     [CameraVec4] = [CameraMat4] * [WorldVec4]
					// Note: ObjectVec4 represents the two Vec4's representing the
					// top-left and bottom-right of the entity's rectangle
				}, {
					key: 'calculateWorldSpaceCoordinates',
					value: function calculateWorldSpaceCoordinates() {
						var pos = this.position;
						var dim = this.dimension;
						var unitRatio = this.unitToPixelRatio;
						// [WorldTransformMat4] = [TranslateMat4] * [ScaleMat4]
						var worldTransformMat4 = this.getWorldTransformMat4();

						// Calculate world space coordinates for [Blocks]
						// [Block's WorldVec4] = [WorldTransformMat4] * [BlockVec4]
						this.blockList.forEach(function (block) {
							block.calculateWorldSpaceCoordinates(worldTransformMat4);
						});

						// Calculate world space coordinates for the [Page]
						// [Page's WorldVec4] = [WorldTransformMat4] * [PageVec4]
						var objectSpacePoints = this.getObjectSpacePoints();

						var _getTransformedPoints = this.getTransformedPoints(objectSpacePoints, worldTransformMat4);

						var _getTransformedPoints2 = _slicedToArray(_getTransformedPoints, 2);

						this._worldVec0 = _getTransformedPoints2[0];
						this._worldVec1 = _getTransformedPoints2[1];

						var _worldVec0 = _slicedToArray(this._worldVec0, 3);

						this._worldX0 = _worldVec0[0];
						this._worldY0 = _worldVec0[1];
						this._worldZ0 = _worldVec0[2];

						// Recalculate Page Version Grip UI World space coordinates

						var _worldVec1 = _slicedToArray(this._worldVec1, 3);

						this._worldX1 = _worldVec1[0];
						this._worldY1 = _worldVec1[1];
						this._worldZ1 = _worldVec1[2];
						this.ui.grip.calculateWorldSpaceCoordinates(worldTransformMat4);
					}
				}, {
					key: 'calculateCameraSpaceCoordinates',
					value: function calculateCameraSpaceCoordinates(cameraMat4) {
						// [Block's CameraVec4] = [CameraMat4] * [Block's WorldVec4]
						this.blockList.forEach(function (block) {
							block.calculateCameraSpaceCoordinates(cameraMat4);
						});

						// [Page's CameraVec4] = [CameraMat4] * [Page's WorldVec4]
						var worldSpacePoints = this.getWorldSpacePoints();

						// Convert CameraVec4 into css styles

						var _getTransformedPoints3 = this.getTransformedPoints(worldSpacePoints, cameraMat4);

						var _getTransformedPoints32 = _slicedToArray(_getTransformedPoints3, 2);

						this._cameraVec0 = _getTransformedPoints32[0];
						this._cameraVec1 = _getTransformedPoints32[1];
						var v0 = this._cameraVec0;
						var v1 = this._cameraVec1;

						this._cameraSpaceStyles = {
							'transform': 'translate(' + v0[0] + 'px, ' + v0[1] + 'px)',
							'-ms-transform': 'translate(' + v0[0] + 'px, ' + v0[1] + 'px)',
							'-webkit-transform': 'translate(' + v0[0] + 'px, ' + v0[1] + 'px)',
							'width': v1[0] - v0[0] + 1,
							'height': v1[1] - v0[1] + 1,
							'z-index': Math.floor(v0[2])
							// FIXME - if subpixel blurring/aliasing is not a problem and all
							// supported browsers can handle the 2d/3d transforms, use that
						};

						//Recalculate Page Version Grip UI Camera space coordinates
						this.ui.grip.calculateCameraSpaceCoordinates(cameraMat4);
					}
				}, {
					key: 'updateStyles',
					value: function updateStyles(cameraMat4) {
						this.calculateCameraSpaceCoordinates(cameraMat4);
					}
				}, {
					key: 'getPageNumber',
					value: function getPageNumber() {
						return this.page.getPageNumber();
					}
				}, {
					key: 'isInSpreadGroup',
					value: function isInSpreadGroup() {
						return this.page.isInSpreadGroup();
					}
				}, {
					key: 'getPageName',
					value: function getPageName() {
						return this.name;
					}
				}, {
					key: 'getPageId',
					value: function getPageId() {
						return this.page.getPageId();
					}
				}, {
					key: 'getPageVersionId',
					value: function getPageVersionId() {
						return this.id;
					}
				}, {
					key: 'getZindex',
					value: function getZindex() {
						return this.position.z;
					}
				}, {
					key: 'getPosX',
					value: function getPosX() {
						return this.position.x;
					}
				}, {
					key: 'getPosY',
					value: function getPosY() {
						return this.position.y;
					}
				}, {
					key: 'getPos',
					value: function getPos() {
						return this.position;
					}
				}, {
					key: 'exportPageVersion',
					value: function exportPageVersion() {
						return {
							id: this.page.id,
							position: this.page.index,
							x: this.position.x,
							y: this.position.y,
							z: this.position.z
						};
					}
				}, {
					key: 'exportPageUpdate',
					value: function exportPageUpdate() {
						return {
							layoutPageList: [this.exportPageVersion()]
						};
					}
				}, {
					key: 'exportPageVersionUpdate',
					value: function exportPageVersionUpdate(pageGridVersion, originalPageGridVersion) {
						var dataChange = false;
						var gridVersion = {
							id: pageGridVersion.id
						};
						var x = undefined;
						for (x in pageGridVersion) {
							if (originalPageGridVersion[x] != pageGridVersion[x] && x != 'merchandiseHierarchyList' && x != 'layoutPage') {
								dataChange = true;
								gridVersion[x] = pageGridVersion[x];
							}
							if (x == 'merchandiseHierarchyList' && originalPageGridVersion[x] && originalPageGridVersion[x].id != pageGridVersion[x].id) {
								dataChange = true;
								gridVersion[x] = pageGridVersion[x];
							}
						}
						if (!dataChange) {
							return null;
						}

						return { pageGridVersionList: [gridVersion] };
					}
				}, {
					key: 'exportPageVersionDelete',
					value: function exportPageVersionDelete(pageId, moveOffers) {
						var format = {
							layoutPageList: [{
								id: pageId
							}],
							moveOffersToParkingLot: moveOffers
						};
						return format;
					}
				}, {
					key: 'exportPageVersionClearTemplate',
					value: function exportPageVersionClearTemplate(pageVersionId, moveOffers) {
						var format = {
							pageGridVersionList: [{
								id: pageVersionId
							}],
							moveOffersToParkingLot: moveOffers
						};
						return format;
					}
				}, {
					key: 'exportPageVersionApplyTemplate',
					value: function exportPageVersionApplyTemplate(template, pageVersionId, moveOffers) {
						var format = {
							pageLayoutTemplate: {
								id: template
							},
							pageGridVersionList: [{
								id: pageVersionId
							}],
							moveOffersToParkingLot: moveOffers
						};
						return format;
					}
				}]);

				return PageVersion;
			})();

			_export('default', PageVersion);
		}
	};
});
System.register('promo-manager/layout-view/helpers/transfer-state', ['npm:babel-runtime@5.8.24/helpers/create-class', 'npm:babel-runtime@5.8.24/helpers/class-call-check', 'npm:jquery@2.1.4', 'promo-manager/layout-view/layout-view-consts', 'npm:gl-matrix@2.3.1', 'promo-manager/layout-view/model/page-version', 'promo-manager/layout-view/model/block'], function (_export) {
    var _createClass, _classCallCheck, $, LayoutConsts, glMatrix, PageVersion, Block, vec4, mat4, TransferState;

    return {
        setters: [function (_npmBabelRuntime5824HelpersCreateClass) {
            _createClass = _npmBabelRuntime5824HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5824HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5824HelpersClassCallCheck['default'];
        }, function (_npmJquery214) {
            $ = _npmJquery214['default'];
        }, function (_promoManagerLayoutViewLayoutViewConsts) {
            LayoutConsts = _promoManagerLayoutViewLayoutViewConsts['default'];
        }, function (_npmGlMatrix231) {
            glMatrix = _npmGlMatrix231['default'];
        }, function (_promoManagerLayoutViewModelPageVersion) {
            PageVersion = _promoManagerLayoutViewModelPageVersion['default'];
        }, function (_promoManagerLayoutViewModelBlock) {
            Block = _promoManagerLayoutViewModelBlock['default'];
        }],
        execute: function () {
            'use strict';

            vec4 = glMatrix.vec4;
            mat4 = glMatrix.mat4;

            TransferState = (function () {
                function TransferState(positionOriginEle, originalEvent, src, type, viewport, camera) {
                    _classCallCheck(this, TransferState);

                    this.type = type;
                    this.src = src;
                    this.viewport = viewport;
                    this.camera = camera;
                    this.positionOriginEle = positionOriginEle;
                    this.updateWorldCoordEndVector(originalEvent);
                    this.worldCoordStartVec4 = angular.copy(this.worldCoordEndVec4);
                    this.updateCameraSpaceStyles();
                }

                // Future: screen-edge panning

                _createClass(TransferState, [{
                    key: 'move',
                    value: function move(originalEvent) {
                        this.updateWorldCoordEndVector(originalEvent, this.camera);
                        this.updateCameraSpaceStyles();
                        return this.getFromCursorByType(PageVersion);
                    }

                    /*
                    On resolving drop action:
                      Perform rtree search on worldCoordEndVec4 +/- hitbox depending on the initiated action (i.e. 'type')
                        usually this will be a single point (x, y, w=0~1, h=0~1) directly under the cursor
                      Dispatch to an appropriate handler based on source object logic (e.g. PageVersion or Offer)
                        Dispatch provides a function which takes 'hitboxX', 'hitboxY' as parameters and returns the
                        search results around the worldCoordEndVec4 which the handler can sort (e.g. z-position) and
                        filter by type (e.g. only interested in PageVersions) to decide whether the target is a valid
                        destination
                        If handler finds a valid destination, execute the action
                          e.g. copy offer, move offer, replace offer, copy to clipboard
                          Also update the rtree if any object was moved/relocated
                          Update styles on modified objects
                        If handler finds no valid destination, revert the action (e.g. same as escape)
                      // Future: queue up an animation show revert of the drop back to original location fading to opacity: 0
                    */
                }, {
                    key: 'drop',
                    value: function drop(originalEvent, globalClipboard, localClipboard) {
                        // Update with the final position, then execute the
                        // card transfer onto the selected destination object
                        this.updateCameraSpaceStyles();
                        this.updateWorldCoordEndVector(originalEvent);
                        this.createDestinationContext(originalEvent, globalClipboard, localClipboard);
                        this.executeTransfer(this.dstContext, this.srcContext);
                    }
                }, {
                    key: 'getFromCursorByType',
                    value: function getFromCursorByType(type) {
                        return this.viewport.lookup(this.worldCoordEndVec4).filter(function (o) {
                            return o instanceof type;
                        }).reduce(function (a, b) {
                            return a && a._worldZ1 > b._worldZ1 ? a : b;
                        }, null);
                    }
                }, {
                    key: 'updateCameraSpaceStyles',
                    value: function updateCameraSpaceStyles() {
                        var worldToCameraMat4 = this.camera.getMatrix();
                        var cameraSpaceCursorVec4 = vec4.transformMat4(vec4.create(), this.worldCoordEndVec4, worldToCameraMat4);
                        var cameraSpaceObjectTopLeftVec4 = vec4.fromValues(-0.5 * LayoutConsts.DRAGCARD_WIDTH, -0.5 * LayoutConsts.DRAGCARD_HEIGHT, LayoutConsts.INT_32_MAX, 0);
                        var c0 = vec4.add(cameraSpaceObjectTopLeftVec4, cameraSpaceObjectTopLeftVec4, cameraSpaceCursorVec4);

                        this._cameraSpaceStyles = {
                            'transform': 'translate(' + c0[0] + 'px, ' + c0[1] + 'px)',
                            '-ms-transform': 'translate(' + c0[0] + 'px, ' + c0[1] + 'px)',
                            '-webkit-transform': 'translate(' + c0[0] + 'px, ' + c0[1] + 'px)'
                        };
                    }

                    // Calculate camera-space extent of the card object centered around the cursor
                }, {
                    key: 'updateWorldCoordEndVector',
                    //        'z-index': `${c0[2]}`
                    value: function updateWorldCoordEndVector(originalEvent) {
                        var originOffset = this.positionOriginEle.offset();
                        var cameraToWorldMat4 = this.camera.getInverse();
                        var viewportX = originalEvent.pageX - originOffset.left;
                        var viewportY = originalEvent.pageY - originOffset.top;
                        var cameraSpaceCursorVec4 = vec4.fromValues(viewportX, viewportY, 0, 1);
                        var worldSpaceCursorVec4 = vec4.transformMat4(vec4.create(), cameraSpaceCursorVec4, cameraToWorldMat4);
                        this.worldCoordEndVec4 = worldSpaceCursorVec4;
                    }
                }, {
                    key: 'createDestinationContext',
                    value: function createDestinationContext(originalEvent, globalClipboard, localClipboard) {
                        switch (this.type) {
                            case LayoutConsts.MODE_OFFER_DRAG:
                                // Find the DOM element under the cursor (first hiding the dragged card)
                                var dragEle = $(originalEvent.target).closest(LayoutConsts.Selectors.LAYOUTVIEW_DRAGGED).css('display', 'none');
                                var cursorEle = $(document.elementFromPoint(originalEvent.pageX, originalEvent.pageY));

                                // Case: Global Clipboard destination
                                if (cursorEle.closest(LayoutConsts.Selectors.LAYOUTVIEW_CLIPBOARD_GLOBAL).length > 0) {
                                    // FIXME
                                    console.log("Drop to global clipboard", globalClipboard);
                                    return;
                                }
                                // Case: Local Clipboard destination
                                if (cursorEle.closest(LayoutConsts.Selectors.LAYOUTVIEW_CLIPBOARD_LOCAL).length > 0) {
                                    // FIXME
                                    console.log("Drop to local clipboard", localClipboard);
                                    return;
                                }

                                // FIXME: Offer (SRC) - which level MH (List)?  O? Curr OV? All OV? Block?
                                var srcMhId = this.src.offerVersion.offer.hierarchyId;
                                var block = this.getFromCursorByType(Block);
                                if (!block) return;
                                console.log(block, this.src.offerVersion);

                                // Case: Offer destination
                                var hasOffer = block.offerVersion && block.offerVersion.offer && block.offerVersion.offer.id > 0;
                                if (hasOffer) {
                                    // FIXME: Offer (DST) - which level MH (List)?  O? Curr OV? All OV? Block?
                                    var dstMhId = block.offerVersion.offer.hierarchyId;
                                    var isMhCompatible = srcMhId === dstMhId;
                                    console.log("Dst Offer MH Compatible =", !!isMhCompatible);
                                    if (!isMhCompatible) return;

                                    return block.offerVersion.offer;
                                }

                                // Case: Block destination
                                if (block) {
                                    var dstMhId = block.hierarchyId;
                                    var isMhCompatible = srcMhId === dstMhId;
                                    console.log("Dst Block MH Compatible =", !!isMhCompatible);
                                    if (!isMhCompatible) return;

                                    return block;
                                }

                            default:
                                break;
                        }
                    }
                }, {
                    key: 'executeTransfer',
                    value: function executeTransfer(dstContext, srcContext) {
                        if (!dstContext || !srcContext) return;

                        // Also check that it's not dropped onto the same location we started from

                        // const offerVersion = angular.copy(this.src.offerVersion);
                        // delete this.src.offerVersion;
                        // target.offerVersion = offerVersion;

                        //updating the block hierarchy leave the problem of what to do if the offer is
                        //moved (has implications for filtering)
                        //        target.hierarchyId = offer.hierarchyId;

                        //send to server
                    }
                }]);

                return TransferState;
            })();

            _export('default', TransferState);
        }
    };
});
System.register('promo-manager/layout-view/controller/viewport', ['npm:babel-runtime@5.8.24/helpers/create-class', 'npm:babel-runtime@5.8.24/helpers/class-call-check', 'npm:babel-runtime@5.8.24/helpers/sliced-to-array', 'npm:rbush@1.4.1', 'npm:gl-matrix@2.3.1', 'promo-manager/layout-view/model/page-version', 'promo-manager/layout-view/helpers/page-version-grip-ui', 'promo-manager/layout-view/layout-view-consts'], function (_export) {
    var _createClass, _classCallCheck, _slicedToArray, rbush, glMatrix, PageVersion, PageVersionGripUi, LayoutConsts, vec4, mat4, Viewport;

    return {
        setters: [function (_npmBabelRuntime5824HelpersCreateClass) {
            _createClass = _npmBabelRuntime5824HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5824HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5824HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5824HelpersSlicedToArray) {
            _slicedToArray = _npmBabelRuntime5824HelpersSlicedToArray['default'];
        }, function (_npmRbush141) {
            rbush = _npmRbush141['default'];
        }, function (_npmGlMatrix231) {
            glMatrix = _npmGlMatrix231['default'];
        }, function (_promoManagerLayoutViewModelPageVersion) {
            PageVersion = _promoManagerLayoutViewModelPageVersion['default'];
        }, function (_promoManagerLayoutViewHelpersPageVersionGripUi) {
            PageVersionGripUi = _promoManagerLayoutViewHelpersPageVersionGripUi['default'];
        }, function (_promoManagerLayoutViewLayoutViewConsts) {
            LayoutConsts = _promoManagerLayoutViewLayoutViewConsts['default'];
        }],
        execute: function () {
            'use strict';

            vec4 = glMatrix.vec4;
            mat4 = glMatrix.mat4;

            Viewport = (function () {
                function Viewport() {
                    _classCallCheck(this, Viewport);

                    this.layoutTree = new rbush(9, ['._worldX0', '._worldY0', '._worldX1', '._worldY1']);
                }

                _createClass(Viewport, [{
                    key: 'getPagesInViewport',
                    value: function getPagesInViewport(cameraToWorldMat4, viewport) {
                        var spatialObjects = this.layoutTree.search(this.getViewport(cameraToWorldMat4, viewport));
                        return spatialObjects.filter(function (o) {
                            return o instanceof PageVersion || o instanceof PageVersionGripUi;
                        });
                    }
                }, {
                    key: 'getSelectedPagesInWorld',
                    value: function getSelectedPagesInWorld() {
                        var spatialObjects = this.layoutTree.all();
                        return spatialObjects.filter(function (o) {
                            return o instanceof PageVersionGripUi && o.selected;
                        });
                    }
                }, {
                    key: 'getViewport',
                    value: function getViewport(cameraToWorldMat4, viewport) {
                        //calculate the area x and y
                        var w = viewport.width();
                        var h = viewport.height();
                        var viewportP0Vec4 = vec4.fromValues(0, 0, 0, 1);
                        var viewportP1Vec4 = vec4.fromValues(w, h, 0, 1);

                        var _vec4$transformMat4 = vec4.transformMat4(viewportP0Vec4, viewportP0Vec4, cameraToWorldMat4);

                        var _vec4$transformMat42 = _slicedToArray(_vec4$transformMat4, 2);

                        var vx0 = _vec4$transformMat42[0];
                        var vy0 = _vec4$transformMat42[1];

                        var _vec4$transformMat43 = vec4.transformMat4(viewportP1Vec4, viewportP1Vec4, cameraToWorldMat4);

                        var _vec4$transformMat432 = _slicedToArray(_vec4$transformMat43, 2);

                        var vx1 = _vec4$transformMat432[0];
                        var vy1 = _vec4$transformMat432[1];

                        return [vx0, vy0, vx1, vy1];
                    }
                }, {
                    key: 'lookup',
                    value: function lookup(v) {
                        return this.layoutTree.search([v[0], v[1], v[0], v[1]]);
                    }
                }, {
                    key: 'insertRtreeObjects',
                    value: function insertRtreeObjects() {
                        var _this = this;

                        var addPage = function addPage(spatialObject) {
                            if (!spatialObject.type == LayoutConsts.TYPE_PAGE) return;
                            _this.layoutTree.insert(spatialObject);
                            _this.layoutTree.insert(spatialObject.ui.grip);
                            spatialObject.blockList.forEach(function (block) {
                                return _this.layoutTree.insert(block);
                            });
                        };

                        for (var _len = arguments.length, parameters = Array(_len), _key = 0; _key < _len; _key++) {
                            parameters[_key] = arguments[_key];
                        }

                        parameters.forEach(function (collection) {
                            (angular.isArray(collection) ? collection : [collection]).forEach(addPage);
                        });
                    }
                }, {
                    key: 'removeRtreeObjects',
                    value: function removeRtreeObjects() {
                        var _this2 = this;

                        var removePage = function removePage(spatialObject) {
                            if (!spatialObject.type == LayoutConsts.TYPE_PAGE) return;
                            _this2.layoutTree.remove(spatialObject);
                            _this2.layoutTree.remove(spatialObject.ui.grip);
                            spatialObject.blockList.forEach(function (block) {
                                return _this2.layoutTree.remove(block);
                            });
                        };

                        for (var _len2 = arguments.length, parameters = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                            parameters[_key2] = arguments[_key2];
                        }

                        parameters.forEach(function (collection) {
                            (angular.isArray(collection) ? collection : [collection]).forEach(removePage);
                        });
                    }
                }, {
                    key: 'clearRtreeObjects',
                    value: function clearRtreeObjects() {
                        this.layoutTree.clear();
                    }
                }]);

                return Viewport;
            })();

            _export('default', Viewport);
        }
    };
});
System.register('promo-manager/layout-view/controller/input-handler', ['npm:babel-runtime@5.8.24/helpers/create-class', 'npm:babel-runtime@5.8.24/helpers/class-call-check', 'npm:babel-runtime@5.8.24/helpers/sliced-to-array', 'npm:babel-runtime@5.8.24/helpers/to-consumable-array', 'npm:gl-matrix@2.3.1', 'promo-manager/layout-view/helpers/math-util', 'helpers/util', 'helpers/consts', 'promo-manager/layout-view/layout-view-consts', 'promo-manager/layout-view/helpers/transfer-state'], function (_export) {
    var _createClass, _classCallCheck, _slicedToArray, _toConsumableArray, glMatrix, MathUtil, Util, Consts, LayoutConsts, TransferState, vec4, mat4, $, InputHandler;

    return {
        setters: [function (_npmBabelRuntime5824HelpersCreateClass) {
            _createClass = _npmBabelRuntime5824HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5824HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5824HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5824HelpersSlicedToArray) {
            _slicedToArray = _npmBabelRuntime5824HelpersSlicedToArray['default'];
        }, function (_npmBabelRuntime5824HelpersToConsumableArray) {
            _toConsumableArray = _npmBabelRuntime5824HelpersToConsumableArray['default'];
        }, function (_npmGlMatrix231) {
            glMatrix = _npmGlMatrix231['default'];
        }, function (_promoManagerLayoutViewHelpersMathUtil) {
            MathUtil = _promoManagerLayoutViewHelpersMathUtil['default'];
        }, function (_helpersUtil) {
            Util = _helpersUtil['default'];
        }, function (_helpersConsts) {
            Consts = _helpersConsts['default'];
        }, function (_promoManagerLayoutViewLayoutViewConsts) {
            LayoutConsts = _promoManagerLayoutViewLayoutViewConsts['default'];
        }, function (_promoManagerLayoutViewHelpersTransferState) {
            TransferState = _promoManagerLayoutViewHelpersTransferState['default'];
        }],
        execute: function () {
            'use strict';

            vec4 = glMatrix.vec4;
            mat4 = glMatrix.mat4;
            $ = null;

            InputHandler = (function () {
                function InputHandler(viewport, layoutView, layoutViewCamera) {
                    _classCallCheck(this, InputHandler);

                    this.inputEvents = ['mousedown', 'mouseup', 'wheel', 'keydown'].sort(Util.stringComparator);
                    this.viewport = viewport;
                    this.layoutView = layoutView;
                    this.layoutViewCamera = layoutViewCamera;
                    this.dragState = null;
                    this.transferObject = null;
                    this.doubleClickState = null;
                    this.X = 0;
                    this.Y = 1;
                    $ = (window.angular || angular).element;
                }

                _createClass(InputHandler, [{
                    key: 'handleWheelEvent',
                    value: function handleWheelEvent($event) {
                        var originalEvent = $event.originalEvent;
                        // minor movements - which seems to be around these numbers are ignored
                        if (originalEvent.wheelDelta < 4 && originalEvent.wheelDelta > -4) {
                            return;
                        }
                        var delta = Math.max(-1, Math.min(1, originalEvent.wheelDelta || -originalEvent.detail));
                        var containerOffset = $($event.currentTarget).offset();
                        var cursorX = originalEvent.pageX - containerOffset.left;
                        var cursorY = originalEvent.pageY - containerOffset.top;

                        var deltaAmount = LayoutConsts.DELTA_AMOUNT_WHEEL;
                        var invDeltaAmount = 1 / deltaAmount;

                        var camera = this.layoutViewCamera;
                        var scaleFactor = delta < 0 ? invDeltaAmount : deltaAmount;
                        camera.scaleAbout(scaleFactor, scaleFactor, 1, cursorX, cursorY, 0);

                        if (delta) {
                            // If we were in single page view mode, cancel it
                            this.layoutView.setSinglePageVersionMode(null);

                            this.layoutView.pageUi.updateCameraSpaceCoordinates(camera); // update all page versions
                        }
                    }
                }, {
                    key: 'handleKeyEvent',
                    value: function handleKeyEvent($event) {
                        var deltaAmount = LayoutConsts.DELTA_AMOUNT_KEY;
                        switch ($event.keyCode) {
                            case 37:
                                // left
                                this.layoutViewCamera.translate(-deltaAmount, 0, 0);
                                break;
                            case 39:
                                // right
                                this.layoutViewCamera.translate(deltaAmount, 0, 0);
                                break;
                            case 38:
                                // up
                                this.layoutViewCamera.translate(0, -deltaAmount, 0);
                                break;
                            case 40:
                                // down
                                this.layoutViewCamera.translate(0, deltaAmount, 0);
                                break;
                            case 82: // R, r
                            case 114:
                                this.layoutView.setSinglePageVersionMode(null);
                                this.layoutViewCamera.setIdentity();
                                break;
                            default:
                                return;
                        }
                        this.layoutView.pageUi.updateCameraSpaceCoordinates(this.layoutViewCamera); // update all page versions
                    }
                }, {
                    key: 'dispatchMouseDown',
                    value: function dispatchMouseDown($event) {
                        var handled = false;

                        var getEle = function getEle(selector) {
                            return $($event.target.closest(selector));
                        };
                        var getScope = function getScope(selector) {
                            return getEle(selector).scope();
                        };

                        // Elevate the page if anywhere on it was clicked
                        var pageVersionUiScope = getScope(LayoutConsts.Selectors.LAYOUTVIEW_PAGEVERSION_UI);
                        if (pageVersionUiScope) {
                            this.clickedPage(pageVersionUiScope.pageRenderable.pageVersion);
                        }

                        this.checkDoubleClickStart($event);

                        var offerScope = getScope(LayoutConsts.Selectors.LAYOUTVIEW_OFFER_GRIP);
                        var pageVersionScope = getScope(LayoutConsts.Selectors.LAYOUTVIEW_PAGEVERSION_GRIP);
                        var viewportScope = getScope(LayoutConsts.Selectors.LAYOUTVIEW_VIEWPORT);

                        if (offerScope) {
                            handled = this.dragStartOffer($event, getEle(LayoutConsts.Selectors.LAYOUTVIEW_DRAGGABLE_ORIGIN), offerScope.block);
                        } else if (pageVersionScope) {
                            handled = this.dragStartPage($event, pageVersionScope.pageRenderable.pageVersion);
                        } else if (viewportScope) {
                            handled = this.dragStartCamera($event);
                        }

                        if (handled) {
                            Util.insertIntoUniqueSortedArray(this.inputEvents, 'mousemove', Consts.STRING_COMPARATOR_FUNCTION);
                            Util.insertIntoUniqueSortedArray(this.inputEvents, 'mouseleave', Consts.STRING_COMPARATOR_FUNCTION);
                            // this.clearEvent($event); // causes keydown to be consumed
                        }
                    }
                }, {
                    key: 'dispatchMouseMove',
                    value: function dispatchMouseMove($event) {
                        var handled = false;

                        if (this.dragState && this.dragState.mode === LayoutConsts.MODE_CAMERA) {
                            handled = this.dragMoveCamera($event);
                        } else if (this.dragState && this.dragState.mode === LayoutConsts.MODE_PAGE_DRAG) {
                            handled = this.dragMovePage($event);
                        } else if (this.transferObject) {
                            handled = this.dragMoveOffer($event);
                        }

                        if (handled) {
                            this.clearEvent($event);
                        }
                    }
                }, {
                    key: 'dispatchMouseUp',
                    value: function dispatchMouseUp($event) {
                        var handled = false;

                        // Check if this concludes a double click
                        this.checkDoubleClickEnd($event);

                        if (this.dragState && this.dragState.mode === LayoutConsts.MODE_CAMERA) {
                            handled = this.dragStopCamera($event);
                        } else if (this.dragState && this.dragState.mode === LayoutConsts.MODE_PAGE_DRAG) {
                            handled = this.dragStopPage($event);
                        } else if (this.transferObject) {
                            handled = this.dragStopOffer($event);
                        }

                        // Clear drag state regardless of source
                        this.transferObject = null;
                        this.dragState = null;

                        if (handled) {
                            this.clearEvent($event);
                            Util.removeFromSortedArray(this.inputEvents, 'mousemove', Consts.STRING_COMPARATOR_FUNCTION);
                            Util.removeFromSortedArray(this.inputEvents, 'mouseleave', Consts.STRING_COMPARATOR_FUNCTION);
                        }
                    }
                }, {
                    key: 'checkDoubleClickStart',
                    value: function checkDoubleClickStart($event) {
                        var getEle = function getEle(selector) {
                            return $($event.target.closest(selector));
                        };

                        var now = new Date().getTime();
                        var dcs = this.doubleClickState;

                        var maxDx = LayoutConsts.DOUBLE_CLICK_MAX_DELTA.X;
                        var maxDy = LayoutConsts.DOUBLE_CLICK_MAX_DELTA.Y;
                        var maxDt = LayoutConsts.DOUBLE_CLICK_MAX_DELTA.T;

                        var dx = dcs && $event.originalEvent.pageX - dcs.origin[0];
                        var dy = dcs && $event.originalEvent.pageY - dcs.origin[1];
                        var dt = dcs && now - dcs.startTime;

                        var isInActiveZone = dcs && dx <= maxDx && dy <= maxDy && dt <= maxDt;
                        if (isInActiveZone) return;

                        var doubleClickableEle = getEle(LayoutConsts.Selectors.LAYOUTVIEW_DOUBLE_CLICKABLE);
                        if (!(doubleClickableEle.length > 0)) return;

                        // Init when conditions are right to start tracking a -new- double click
                        var origin = [$event.originalEvent.pageX, $event.originalEvent.pageY];
                        this.doubleClickState = { target: doubleClickableEle, origin: origin, startTime: now, counter: 0 };
                    }
                }, {
                    key: 'checkDoubleClickEnd',
                    value: function checkDoubleClickEnd($event) {
                        var now = new Date().getTime();
                        var dcs = this.doubleClickState;

                        var maxDx = LayoutConsts.DOUBLE_CLICK_MAX_DELTA.X;
                        var maxDy = LayoutConsts.DOUBLE_CLICK_MAX_DELTA.Y;
                        var maxDt = LayoutConsts.DOUBLE_CLICK_MAX_DELTA.T;

                        var dx = dcs && $event.originalEvent.pageX - dcs.origin[0];
                        var dy = dcs && $event.originalEvent.pageY - dcs.origin[1];
                        var dt = dcs && now - dcs.startTime;

                        var isInActiveZone = dcs && dx <= maxDx && dy <= maxDy && dt <= maxDt;
                        var isSecondClick = dcs && ++dcs.counter >= 2;
                        if (!isInActiveZone || !isSecondClick) return;

                        // Execute the double click if it ended in a success state
                        this.doubleClicked($event);
                        this.doubleClickState = null;
                    }
                }, {
                    key: 'doubleClicked',
                    value: function doubleClicked($event) {
                        var getEle = function getEle(selector) {
                            return $($event.target.closest(selector));
                        };
                        var getEleScope = function getEleScope(ele) {
                            return ele.scope();
                        };
                        var dcs = this.doubleClickState;

                        if (dcs.target.is(LayoutConsts.Selectors.LAYOUTVIEW_PAGEVERSION_GRIP)) {
                            var viewportEle = getEle(LayoutConsts.Selectors.LAYOUTVIEW_VIEWPORT);
                            var eventScope = getEleScope(dcs.target);
                            var pageVersion = eventScope.pageRenderable.pageVersion;
                            this.setSinglePageView(viewportEle, pageVersion);
                        } else if (dcs.target.is(LayoutConsts.Selectors.LAYOUTVIEW_OFFER_UI)) {
                            var eventScope = getEleScope(dcs.target);
                            eventScope.ctrl.openOfferQuickView(eventScope.block);
                        }
                    }
                }, {
                    key: 'setSinglePageView',
                    value: function setSinglePageView(viewportEle, pageVersion) {
                        this.layoutView.setSinglePageVersionMode(pageVersion);

                        var _LayoutConsts$SINGLE_PAGEVERSION_VIEW_PADDING = _slicedToArray(LayoutConsts.SINGLE_PAGEVERSION_VIEW_PADDING, 2);

                        var padX = _LayoutConsts$SINGLE_PAGEVERSION_VIEW_PADDING[0];
                        var padY = _LayoutConsts$SINGLE_PAGEVERSION_VIEW_PADDING[1];

                        // Get usable view region
                        var vx0 = padX;
                        var vy0 = padY;
                        var vx1 = viewportEle.width() - padX;
                        var vy1 = viewportEle.height() - padY;
                        var vw = vx1 - vx0;
                        var vh = vy1 - vy0;

                        // Get the world space size of the grip so we can account for it when scaling, positioning page
                        var gripVec4 = pageVersion.getPageVersionUiOffset();

                        // Declare world and screen space coordinates
                        var scrP0Vec4 = vec4.create();
                        var scrP1Vec4 = vec4.create();

                        var _pageVersion$getWorldSpacePoints = pageVersion.getWorldSpacePoints();

                        var _pageVersion$getWorldSpacePoints2 = _slicedToArray(_pageVersion$getWorldSpacePoints, 2);

                        var worP0Vec4 = _pageVersion$getWorldSpacePoints2[0];
                        var worP1Vec4 = _pageVersion$getWorldSpacePoints2[1];

                        // Get world space dimensions for the page so we can solve for the
                        // scale factor needed to achieve desired screen space dimensions
                        var worDimVec4 = vec4.subtract(vec4.create(), worP1Vec4, worP0Vec4);

                        // Get size of the page
                        var pw = pageVersion.dimension.w;
                        var ph = pageVersion.dimension.h;

                        // Calculate the aspect ratio to decide which direction to contain
                        // FIXME- aspect ratio check doesn't take into account the grip height?
                        var vAR = (vx1 - vx0) / (vy1 - vy0);
                        var pAR = pw / ph;

                        if (vAR > pAR) {
                            // view area is wider => constrain by height
                            if (worDimVec4[1] === 0) return; // Ensure the page has a height so we don't div/0

                            // Scale the page vertically to fill viewport (but exclude grip height!)
                            var scale = (vh - gripVec4[1]) / worDimVec4[1];
                            var scaledW = worDimVec4[0] * scale;

                            // Scale page height to fit (discard X value - we set it directly)
                            vec4.multiply(scrP1Vec4, worDimVec4, vec4.fromValues(0, scale, 1, 1));

                            // Horizontally center within usable viewport, Offset scaled vertical by usable viewport + grip
                            vec4.add(scrP0Vec4, scrP0Vec4, vec4.fromValues(vx0 + 0.5 * (vw - scaledW), vy0 + gripVec4[1], 0, 0));
                            vec4.add(scrP1Vec4, scrP1Vec4, vec4.fromValues(vx0 + 0.5 * (vw + scaledW), vy0 + gripVec4[1], 0, 0));
                        } else {
                            // view area is taller => constrain by width
                            if (worDimVec4[0] === 0) return; // Ensure the page has a width don't we don't div/0

                            // Scale the page horizontally to fill viewport
                            var scale = vw / worDimVec4[0];
                            var scaledH = worDimVec4[1] * scale;

                            // Scale page width to fit (discard Y value - we set it directly)
                            vec4.multiply(scrP1Vec4, worDimVec4, vec4.fromValues(scale, 0, 1, 1));

                            // Vertically center within usable viewport + grip, Offset scaled horizontal by usable viewport
                            vec4.add(scrP0Vec4, scrP0Vec4, vec4.fromValues(vx0, vy0 + gripVec4[1] + 0.5 * (vh - scaledH), 0, 0));
                            vec4.add(scrP1Vec4, scrP1Vec4, vec4.fromValues(vx0, vy0 + gripVec4[1] + 0.5 * (vh + scaledH), 0, 0));
                        }

                        // Solve for [sp], [tp] so we can update the camera matrix - p represents each of x,y,z
                        // Notes: Prime symbol (ʹ) is U+02B9 / &#697; / &#x02B9;
                        //     Assume simplified mat4: translation, scaling only
                        // p0ʹ = sp*p0+tp
                        // p1ʹ = sp*p1+tp
                        // tp = (p1 - p0*p1ʹ/p0ʹ) / (1 - p1ʹ/p0ʹ)
                        // sp = (p0 - ((p1 - p0*p1ʹ/p0ʹ) / (1 - p1ʹ/p0ʹ))) / p0ʹ
                        var x0 = worP0Vec4[0];
                        var x1 = worP1Vec4[0];
                        var x0_ = scrP0Vec4[0];
                        var x1_ = scrP1Vec4[0];
                        var y0 = worP0Vec4[1];
                        var y1 = worP1Vec4[1];
                        var y0_ = scrP0Vec4[1];
                        var y1_ = scrP1Vec4[1];

                        //    tp = (p1 - p0*p1ʹ/p0ʹ) / (1 - p1ʹ/p0ʹ)
                        var tx = (x1 - x0 * x1_ / x0_) / (1 - x1_ / x0_);
                        var ty = (y1 - y0 * y1_ / y0_) / (1 - y1_ / y0_);

                        // Note: sx, sy should be identical
                        //    sp = (p0 - ((p1 - p0*p1ʹ/p0ʹ) / (1 - p1ʹ/p0ʹ))) / p0ʹ
                        var sx = (x0 - (x1 - x0 * x1_ / x0_) / (1 - x1_ / x0_)) / x0_;
                        var sy = (y0 - (y1 - y0 * y1_ / y0_) / (1 - y1_ / y0_)) / y0_;

                        // Update camera
                        this.layoutViewCamera.setIdentity();
                        this.layoutViewCamera.translate(tx, ty, 0);
                        this.layoutViewCamera.scale(1 / sx, 1 / sy, 1);
                        return true;
                    }
                }, {
                    key: 'clickedPage',
                    value: function clickedPage(pageVersion) {
                        this.layoutView.pageUi.setPageIndex(pageVersion, this.layoutViewCamera);
                    }
                }, {
                    key: 'dragStartCamera',
                    value: function dragStartCamera($event) {
                        var origin = [$event.originalEvent.pageX, $event.originalEvent.pageY];
                        this.dragState = { origin: origin, screenDelta: [0, 0], worldDelta: [0, 0], mode: LayoutConsts.MODE_CAMERA };
                        return true;
                    }
                }, {
                    key: 'dragMoveCamera',
                    value: function dragMoveCamera($event) {
                        var ds = this.dragState;
                        var originalEvent = $event.originalEvent;

                        // Track panning in screen space (screen dx,dy)
                        var sdx = originalEvent.pageX - (ds.origin[0] + ds.screenDelta[0]);
                        var sdy = originalEvent.pageY - (ds.origin[1] + ds.screenDelta[1]);
                        ds.screenDelta[0] += sdx;
                        ds.screenDelta[1] += sdy;

                        // If we were in single page view mode, cancel it
                        this.layoutView.setSinglePageVersionMode(null);

                        // Update camera in screen space
                        this.layoutViewCamera.translate(-sdx, -sdy, 0);
                        this.layoutView.pageUi.updateCameraSpaceCoordinates(this.layoutViewCamera);
                        return true;
                    }
                }, {
                    key: 'dragStopCamera',
                    value: function dragStopCamera($event) {
                        this.layoutViewCamera.save();
                        return true;
                    }
                }, {
                    key: 'dragStartPage',
                    value: function dragStartPage($event, pageVersion) {
                        var origin = [$event.originalEvent.pageX, $event.originalEvent.pageY];
                        this.dragState = { origin: origin, screenDelta: [0, 0], worldDelta: [0, 0], mode: LayoutConsts.MODE_PAGE_DRAG, target: pageVersion };
                        return true;
                    }
                }, {
                    key: 'dragMovePage',
                    value: function dragMovePage($event) {
                        var ds = this.dragState;
                        var originalEvent = $event.originalEvent;
                        var target = $event.target;

                        // Track dx, dy in screen space
                        var sdx = originalEvent.pageX - (ds.origin[0] + ds.screenDelta[0]);
                        var sdy = originalEvent.pageY - (ds.origin[1] + ds.screenDelta[1]);
                        ds.screenDelta[0] += sdx;
                        ds.screenDelta[1] += sdy;

                        // Convert motions to world space to modify pages
                        var invCameraScale = this.layoutViewCamera.getInverseDiagonal();

                        var _vec4$multiply = vec4.multiply(invCameraScale, invCameraScale, vec4.fromValues(sdx, sdy, 0, 1));

                        var _vec4$multiply2 = _slicedToArray(_vec4$multiply, 2);

                        var wdx = _vec4$multiply2[0];
                        var wdy = _vec4$multiply2[1];

                        ds.worldDelta[0] += wdx;
                        ds.worldDelta[1] += wdy;

                        // Update spatial partitioning when repositioning page
                        this.viewport.removeRtreeObjects(ds.target);
                        ds.target.position.x += wdx;
                        ds.target.position.y += wdy;
                        this.layoutView.pageUi.updateWorldSpaceCoordinates(ds.target, this.layoutViewCamera);
                        this.viewport.insertRtreeObjects(ds.target);

                        return true;
                    }
                }, {
                    key: 'dragStopPage',
                    value: function dragStopPage($event) {
                        var pageVersion = this.dragState.target;
                        if (this.layoutView.isAutoArrangeMode) {
                            this.dropPageVersionAutoArrange.apply(this, [pageVersion].concat(_toConsumableArray(this.dragState.worldDelta)));
                        } else {
                            this.dropPageVersionFreeForm(pageVersion);
                        }
                        this.dragState = null;
                        return true;
                    }
                }, {
                    key: 'dragStartOffer',
                    value: function dragStartOffer($event, positionOriginEle, block) {
                        this.transferObject = new TransferState(positionOriginEle, $event.originalEvent, block, LayoutConsts.MODE_OFFER_DRAG, this.viewport, this.layoutViewCamera);
                        return true;
                    }
                }, {
                    key: 'dragMoveOffer',
                    value: function dragMoveOffer($event) {
                        switch (this.transferObject.type) {
                            case LayoutConsts.MODE_OFFER_DRAG:
                                var pageVersion = this.transferObject.move($event.originalEvent);
                                this.layoutView.pageUi.setPageIndex(pageVersion, this.layoutViewCamera);
                                break;
                        }
                    }
                }, {
                    key: 'dragStopOffer',
                    value: function dragStopOffer($event) {
                        this.transferObject.drop($event.originalEvent, this.layoutView.globalClipboard, this.layoutView.localClipboard);
                        this.transferObject = null;
                        return true;
                    }
                }, {
                    key: 'dropPageVersionAutoArrange',
                    value: function dropPageVersionAutoArrange(pageVersion, dx, dy) {
                        // Assumes page versions are correctly gridded beforehand
                        this.viewport.removeRtreeObjects(pageVersion);
                        pageVersion.position.x -= dx;
                        pageVersion.position.y -= dy;
                        this.layoutView.pageUi.updateWorldSpaceCoordinates(pageVersion, this.layoutViewCamera);
                        this.viewport.insertRtreeObjects(pageVersion);

                        if (this.layoutView.pageUi.autoArrangeDroppedPageVersion(pageVersion, dx, dy)) {
                            // auto-arrange determined there were some changes
                            // TODO: send modified pages only by tracking before/after positions
                            var modifiedPageVersions = this.layoutView.pageUi.getPageVersionsForSelectedLayoutVersion();
                            this.layoutView.updatePages({
                                layoutPageList: modifiedPageVersions.map(function (pv) {
                                    return pv.exportPageVersion();
                                })
                            });

                            this.viewport.clearRtreeObjects();
                            this.layoutView.pageUi.updateWorldSpaceCoordinates(this.layoutViewCamera);
                            this.viewport.insertRtreeObjects(this.layoutView.pageUi.getPageVersionsForSelectedLayoutVersion());
                        }
                    }
                }, {
                    key: 'dropPageVersionFreeForm',
                    value: function dropPageVersionFreeForm(pageVersion) {
                        this.layoutView.updatePages(pageVersion.exportPageUpdate());
                    }
                }, {
                    key: 'clearEvent',
                    value: function clearEvent(e) {
                        e.stopPropagation();
                        e.preventDefault();
                    }
                }, {
                    key: 'getTransferObject',
                    value: function getTransferObject() {
                        return this.transferObject;
                    }
                }]);

                return InputHandler;
            })();

            _export('default', InputHandler);
        }
    };
});
System.register('promo-manager/layout-view/controller/layout-view', ['npm:babel-runtime@5.8.24/helpers/create-class', 'npm:babel-runtime@5.8.24/helpers/class-call-check', 'npm:babel-runtime@5.8.24/core-js/map', 'npm:babel-runtime@5.8.24/core-js/array/from', 'promo-manager/layout-view/model/vehicle-version', 'promo-manager/layout-view/model/layout-model', 'promo-manager/layout-view/model/page-version', 'promo-manager/layout-view/helpers/page-version-grip-ui', 'promo-manager/layout-view/helpers/page-ui', 'promo-manager/layout-view/model/market-to-page-versionId-manager', 'promo-manager/layout-view/clipboard/clipboard-global', 'promo-manager/layout-view/clipboard/clipboard-layout-view', 'helpers/tree-map', 'helpers/notifier', 'helpers/util', 'promo-manager/layout-view/layout-view-consts', 'npm:trie-search@0.1.1', 'promo-manager/helpers/merchandise-hierarchy-helpers'], function (_export) {
    var _createClass, _classCallCheck, _Map, _Array$from, VehicleVersion, LayoutModel, PageVersion, PageVersionGripUi, PageUi, MarketToPageVersionIdManager, GlobalClipboard, LayoutViewClipboard, TreeMap, Notifier, Util, LayoutConsts, TrieSearch, MerchandiseHierarchyHelpers, LayoutView;

    return {
        setters: [function (_npmBabelRuntime5824HelpersCreateClass) {
            _createClass = _npmBabelRuntime5824HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5824HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5824HelpersClassCallCheck['default'];
        }, function (_npmBabelRuntime5824CoreJsMap) {
            _Map = _npmBabelRuntime5824CoreJsMap['default'];
        }, function (_npmBabelRuntime5824CoreJsArrayFrom) {
            _Array$from = _npmBabelRuntime5824CoreJsArrayFrom['default'];
        }, function (_promoManagerLayoutViewModelVehicleVersion) {
            VehicleVersion = _promoManagerLayoutViewModelVehicleVersion['default'];
        }, function (_promoManagerLayoutViewModelLayoutModel) {
            LayoutModel = _promoManagerLayoutViewModelLayoutModel['default'];
        }, function (_promoManagerLayoutViewModelPageVersion) {
            PageVersion = _promoManagerLayoutViewModelPageVersion['default'];
        }, function (_promoManagerLayoutViewHelpersPageVersionGripUi) {
            PageVersionGripUi = _promoManagerLayoutViewHelpersPageVersionGripUi['default'];
        }, function (_promoManagerLayoutViewHelpersPageUi) {
            PageUi = _promoManagerLayoutViewHelpersPageUi['default'];
        }, function (_promoManagerLayoutViewModelMarketToPageVersionIdManager) {
            MarketToPageVersionIdManager = _promoManagerLayoutViewModelMarketToPageVersionIdManager['default'];
        }, function (_promoManagerLayoutViewClipboardClipboardGlobal) {
            GlobalClipboard = _promoManagerLayoutViewClipboardClipboardGlobal['default'];
        }, function (_promoManagerLayoutViewClipboardClipboardLayoutView) {
            LayoutViewClipboard = _promoManagerLayoutViewClipboardClipboardLayoutView['default'];
        }, function (_helpersTreeMap) {
            TreeMap = _helpersTreeMap['default'];
        }, function (_helpersNotifier) {
            Notifier = _helpersNotifier['default'];
        }, function (_helpersUtil) {
            Util = _helpersUtil['default'];
        }, function (_promoManagerLayoutViewLayoutViewConsts) {
            LayoutConsts = _promoManagerLayoutViewLayoutViewConsts['default'];
        }, function (_npmTrieSearch011) {
            TrieSearch = _npmTrieSearch011['default'];
        }, function (_promoManagerHelpersMerchandiseHierarchyHelpers) {
            MerchandiseHierarchyHelpers = _promoManagerHelpersMerchandiseHierarchyHelpers['default'];
        }],
        execute: function () {
            'use strict';

            LayoutView = (function () {
                function LayoutView($q, API, viewport, layoutViewCamera, context, $translate) {
                    _classCallCheck(this, LayoutView);

                    this.done = false;
                    this.API = API;
                    this.Notifier = new Notifier($translate);
                    this.$translate = $translate;
                    this.vehicleId = context.vehicleId;
                    this.vehicleVersions = null; // VehicleVersions[]
                    this.selectedVehicleVersion = null; // VehicleVersion
                    this.selectedLayoutVersionIndex = 0;
                    this.selectedLayoutVersionId = null;
                    this.singlePageVersionMode = null;
                    this.viewport = viewport;
                    this.globalClipboard = new GlobalClipboard(this.API);
                    this.localClipboard = new LayoutViewClipboard(this.API, this.vehicleId, -1);
                    this.layoutViewCamera = layoutViewCamera;
                    this.$q = $q;
                    this.context = context;
                    this.isAutoArrangeMode = LayoutConsts.AUTO_ARRANGE_DEFAULT_MODE;
                    this.getLayout();
                }

                _createClass(LayoutView, [{
                    key: 'getLayout',
                    value: function getLayout() {
                        var _this = this;

                        this.loadVehicleVersions(this.vehicleId).then(function () {
                            _this.loadLayoutModel().then(function () {
                                _this.loadLayoutPageVersions().then(function () {
                                    MerchandiseHierarchyHelpers.loadMerchandiseHierarchies(_this.$q, _this.API).then(function (result) {
                                        _this.merchandiseHierarchy = result;
                                        _this.merchandiseHierarchySearch = MerchandiseHierarchyHelpers.buildMhSearchTree(_this.merchandiseHierarchy);
                                        _this.hierarchyId = _this.merchandiseHierarchy.getRootId();
                                        _this.done = true;
                                    });
                                });
                            });
                        }).then(null, function () {
                            _this.reportProblems.apply(_this, arguments);
                        });
                    }
                }, {
                    key: 'getPageUi',
                    value: function getPageUi() {
                        return this.pageUi;
                    }
                }, {
                    key: 'setVehicleVersion',
                    value: function setVehicleVersion(vehicleVersionId) {
                        var _this2 = this;

                        if (!vehicleVersionId) return;

                        this.vehicleVersions.filter(function (vv) {
                            return vv.id === vehicleVersionId;
                        }).forEach(function (vv) {
                            _this2.selectedVehicleVersion = vv;
                            _this2.selectedLayoutVersionIndex = 0; // reset to first layout version
                            _this2.localClipboard.updateVehicleVersion(vv.id);
                        });
                        this.getLayout();
                    }
                }, {
                    key: 'getNewLayoutVersion',
                    value: function getNewLayoutVersion(selectedLayoutVersionId) {
                        if (!selectedLayoutVersionId) {
                            return;
                        }
                        this.selectedLayoutVersionId = selectedLayoutVersionId;
                        this.selectedLayoutVersionIndex = this.layoutModel.getLayoutVersionIndex(selectedLayoutVersionId);
                        this.loadLayoutPageVersions();
                    }
                }, {
                    key: 'loadVehicleVersions',
                    value: function loadVehicleVersions() {
                        var _this3 = this;

                        if (this.vehicleVersions) {
                            return this.$q.when(this.vehicleVersions);
                        }
                        var promise = this.API.PromoManager.Common.getVehicleVersionList(this.vehicleId).then(function (result) {
                            _this3.vehicleVersions = result.data.data.map(function (vv) {
                                return new VehicleVersion(vv);
                            });

                            // Data constraint: vehicleVersions.length > 0
                            _this3.selectedVehicleVersion = angular.copy(_this3.vehicleVersions[0]);
                            _this3.localClipboard.updateVehicleVersion(_this3.selectedVehicleVersion.id);
                        }, function (reason) {
                            _this3.Notifier.warn(_this3.$translate.instant('LAYOUT_VIEW_DATA_ERROR_PAGE_VERSION'));
                        });
                        return promise;
                    }
                }, {
                    key: 'loadLayoutModel',
                    value: function loadLayoutModel() {
                        var _this4 = this;

                        this.pageUi = null;
                        this.pageVersions = new _Map(); // Map<pageVersionId, PageVersion>
                        this.layoutModel = null;
                        this.marketToPageVersionIdManager = new MarketToPageVersionIdManager(); // MarketToPageVersionIdManager (Map<marketId,Set<pageVersionId>>)
                        var promise = this.API.PromoManager.LayoutView.getLayout(this.selectedVehicleVersion.id).then(function (result) {
                            _this4.layoutModel = new LayoutModel(result.data.data.layout);
                            _this4.selectedLayoutVersionId = _this4.layoutModel.getLayoutVersionIdList()[0];
                        }, function (reason) {
                            _this4.Notifier.warn(_this4.$translate.instant('LAYOUT_VIEW_DATA_ERROR_PAGE_LAYOUT'));
                        });
                        return promise;
                    }
                }, {
                    key: 'loadLayoutPageVersions',
                    value: function loadLayoutPageVersions() {
                        var _this5 = this;

                        // FIXME
                        // verify ASSERT that version numbers in layout.layoutsVersionMap is [0...n-1]
                        // i.e. CONTIGUOUS, otherwise we need a way to specify a default selection
                        // layout-view/layout.getLayoutVersion.action
                        var layoutId = this.layoutModel.id;
                        var layoutMarketsList = this.layoutModel.getMarketsByIndex(this.selectedLayoutVersionIndex);
                        var list = [];
                        if (layoutMarketsList.length) {
                            layoutMarketsList.forEach(function (market) {
                                list.push({ id: market });
                            });
                        }
                        var promise = this.API.PromoManager.LayoutView.getLayoutVersion(layoutId, list).then(function (result) {
                            var gridVersionMap = result.data.data.gridVersionMap;
                            _this5.pageBuilder(gridVersionMap);
                        }, function (reason) {
                            _this5.Notifier.warn(_this5.$translate.instant('LAYOUT_VIEW_DATA_ERROR_PAGE_LAYOUT_VERSION'));
                        });

                        return promise;
                    }
                }, {
                    key: 'updatePages',
                    value: function updatePages(pages, refresh) {
                        var _this6 = this;

                        if (!pages) {
                            return;
                        }
                        var promise = this.API.PromoManager.LayoutView.updatePages(pages).then(function (result) {
                            //refresh the layout only if requested
                            if (refresh) {
                                _this6.getLayout();
                            }
                        }, function (reason) {
                            _this6.Notifier.warn(_this6.$translate.instant('LAYOUT_VIEW_DATA_ERROR_PAGE_UPDATE_ERROR'));
                            _this6.getLayout();
                        });
                        return promise;
                    }
                }, {
                    key: 'addPages',
                    value: function addPages(id, pages) {
                        var _this7 = this;

                        var promise = this.API.PromoManager.LayoutView.addPages(id, pages).then(function (result) {
                            _this7.addPagesToLayout(result.data.data.addedPageList);
                        }, function (reason) {
                            _this7.Notifier.warn(_this7.$translate.instant('LAYOUT_VIEW_DATA_ERROR_PAGE_UPDATE_ERROR'));
                            _this7.getLayout();
                        });
                        return promise;
                    }
                }, {
                    key: 'deletePages',
                    value: function deletePages(pages) {
                        var _this8 = this;

                        if (!pages) {
                            return;
                        }
                        var promise = this.API.PromoManager.LayoutView.removePages(pages).then(function (result) {
                            _this8.getLayout();
                        }, function (reason) {
                            _this8.Notifier.warn(_this8.$translate.instant('LAYOUT_VIEW_DATA_ERROR_PAGE_DELETE_ERROR'));
                            _this8.getLayout();
                        });
                        return promise;
                    }
                }, {
                    key: 'clearTemplate',
                    value: function clearTemplate(pages) {
                        var _this9 = this;

                        if (!pages) {
                            return;
                        }
                        var promise = this.API.PromoManager.LayoutView.clearTemplates(pages).then(function (result) {
                            _this9.getPagesForVersions(result.data.data.updatedPageGridVersionIdList);
                        }, function (reason) {
                            _this9.Notifier.warn(_this9.$translate.instant('LAYOUT_VIEW_DATA_ERROR_PAGE_CLEAR_TEMPLATE_ERROR'));
                            _this9.getLayout();
                        });
                        return promise;
                    }
                }, {
                    key: 'applyTemplate',
                    value: function applyTemplate(pages) {
                        var _this10 = this;

                        if (!pages) {
                            return;
                        }
                        var promise = this.API.PromoManager.LayoutView.applyTemplate(pages).then(function (result) {
                            _this10.getPagesForVersions(result.data.data.updatedPageGridVersionIdList);
                        }, function (reason) {
                            _this10.Notifier.warn(_this10.$translate.instant('LAYOUT_VIEW_DATA_ERROR_PAGE_CLEAR_TEMPLATE_ERROR'));
                            _this10.getLayout();
                        });
                        return promise;
                    }
                }, {
                    key: 'updatePageVersions',
                    value: function updatePageVersions(pages) {
                        var _this11 = this;

                        if (!pages) {
                            return;
                        }
                        var promise = this.API.PromoManager.LayoutView.updatePageGridVersions(pages).then(function (result) {
                            _this11.getPagesForVersions(result.data.data.updatedPageGridVersionIdList);
                        }, function (reason) {
                            _this11.Notifier.warn(_this11.$translate.instant('LAYOUT_VIEW_DATA_ERROR_PAGE_VERSION_UPDATE_ERROR'));
                            _this11.getLayout();
                        });
                        return promise;
                    }
                }, {
                    key: 'loadPageVersion',
                    value: function loadPageVersion(pageVersionId) {
                        var _this12 = this;

                        var promise = this.API.PromoManager.LayoutView.loadPageGridVersion(pageVersionId).then(function (result) {
                            return result.data;
                        }, function (reason) {
                            _this12.Notifier.warn(_this12.$translate.instant('LAYOUT_VIEW_DATA_ERROR_PAGE_VERSION_LOAD_ERROR'));
                            _this12.getLayout();
                        });
                        return promise;
                    }
                }, {
                    key: 'updateBlock',
                    value: function updateBlock(blocks, pageVersionId) {
                        var _this13 = this;

                        if (!blocks) {
                            return;
                        }
                        var promise = this.API.PromoManager.LayoutView.updateGridVersionBlocks(blocks).then(function (result) {
                            //load the revised page
                            _this13.getPagesForVersions([{ id: pageVersionId }]);
                        }, function (reason) {
                            _this13.Notifier.warn(_this13.$translate.instant('LAYOUT_VIEW_DATA_ERROR_BLOCK_UPDATE_ERROR'));
                            _this13.getLayout();
                        });
                        return promise;
                    }
                }, {
                    key: 'loadBlock',
                    value: function loadBlock(blockId) {
                        var _this14 = this;

                        var promise = this.API.PromoManager.LayoutView.loadGridVersionBlock(blockId).then(function (result) {
                            return result.data;
                        }, function (reason) {
                            _this14.Notifier.warn(_this14.$translate.instant('LAYOUT_VIEW_DATA_ERROR_BLOCK_LOAD_ERROR'));
                            _this14.getLayout();
                        });
                        return promise;
                    }
                }, {
                    key: 'getChannels',
                    value: function getChannels() {
                        var _this15 = this;

                        var promise = this.API.PromoManager.Common.getChannelList().then(function (result) {
                            return result.data;
                        }, function (reason) {
                            _this15.Notifier.warn(_this15.$translate.instant('DATA_ERROR_CHANNEL_LOAD_ERROR'));
                        });
                        return promise;
                    }
                }, {
                    key: 'pageBuilder',
                    value: function pageBuilder(gridVersionMap) {
                        var _this16 = this;

                        var pageList = this.layoutModel.pageList;
                        this.viewport.clearRtreeObjects();
                        var gridVersions = [];

                        var _loop = function (pageId) {
                            pageList.forEach(function (page) {
                                if (page.id == pageId) {
                                    gridVersions[page.id] = page;
                                }
                            });

                            var pageVersion = new PageVersion(gridVersionMap[pageId], gridVersions[pageId]);
                            _this16.pageVersions.set(pageVersion.id, pageVersion);
                            _this16.marketToPageVersionIdManager.add(pageVersion);
                            // FIXME: Think about how world coordinates for spread groups
                            // will be handled - the depedencies might not necessarily
                            // be loaded in order - perhaps a second pass after all
                            // PageVersion objects have been created might be in order...
                        };

                        for (var pageId in gridVersionMap) {
                            _loop(pageId);
                        }
                        // Initialize the camera coordinates for all PageVersion entities
                        this.pageUi = new PageUi(this.selectedLayoutVersionIndex, this.layoutModel, this.marketToPageVersionIdManager, this.pageVersions, this.viewport);

                        if (this.isAutoArrangeMode) {
                            this.pageUi.autoArrangePages();
                        }
                        this.pageUi.updateWorldSpaceCoordinates(this.layoutViewCamera);
                        this.viewport.insertRtreeObjects(this.pageUi.getPageVersionsForSelectedLayoutVersion());
                    }
                }, {
                    key: 'hasHierarchy',
                    value: function hasHierarchy(obj, filter) {
                        if (obj.pageVersion && obj.pageVersion.blockList && obj.pageVersion.blockList.length) {
                            return obj.pageVersion.blockList.some(this.blockContainsHierarchy, [this, filter]);
                        } else if (obj.blockList && obj.blockList.length) {
                            return obj.blockList.some(this.blockContainsHierarchy, [this, filter]);
                        } else {
                            return this.containsHierarchy(obj, filter);
                        }
                    }
                }, {
                    key: 'blockContainsHierarchy',
                    value: function blockContainsHierarchy(block, index, array) {
                        var self = this[0];
                        var filter = this[1];
                        return self.containsHierarchy(block, filter);
                    }
                }, {
                    key: 'containsHierarchy',
                    value: function containsHierarchy(obj, filter) {
                        var has = false;
                        if (obj.offerVersion && obj.offerVersion.hierarchyId > 1) {
                            has = this.hierarchyTreeSearch(obj.offerVersion.hierarchyId, filter);
                        }
                        if (!has && obj.hierarchyId && obj.hierarchyId > 1) {
                            has = this.hierarchyTreeSearch(obj.hierarchyId, filter);
                        }
                        return has;
                    }
                }, {
                    key: 'hierarchyTreeSearch',
                    value: function hierarchyTreeSearch(hierarchyId, filter) {
                        var node = this.merchandiseHierarchy.getNode(hierarchyId);
                        var filterNode = this.merchandiseHierarchy.getNode(filter);
                        var path = node.getPath();
                        var found = false;
                        angular.forEach(path, function (treeNode, i) {
                            if (treeNode.level == filterNode.level && filter == treeNode.id) {
                                found = true;
                            }
                        });
                        return found;
                    }
                }, {
                    key: 'merchandiseHierarchyByDepth',
                    value: function merchandiseHierarchyByDepth(blockMhList, offerVersionMhList) {
                        var _this17 = this;

                        var displayDepth = LayoutConsts.DISPLAY_DEPTH;
                        var mhValuesByDepth = _Array$from({ length: displayDepth }, function () {
                            return [];
                        });
                        var visitedNodes = {};

                        var collateMhList = function collateMhList(mhList, allocationLevel) {
                            mhList.forEach(function (mhId) {
                                var node = _this17.merchandiseHierarchy.getNode(mhId);
                                if (!node) {
                                    console.log("Unable to find block merchandise hierarchy for id=" + mhId);
                                    return;
                                }
                                var shownPath = node.getPath().slice(0, displayDepth);
                                shownPath.forEach(function (levelMhNode, i) {
                                    var isVisited = visitedNodes[levelMhNode.id];
                                    visitedNodes[levelMhNode.id] = allocationLevel;
                                    if (isVisited) return;

                                    mhValuesByDepth[i].push(levelMhNode);
                                });
                            });
                        };

                        collateMhList(blockMhList, 'block-level');
                        collateMhList(offerVersionMhList, 'offer-version-level');
                        return { mhLocations: visitedNodes, mhByDepth: mhValuesByDepth };
                    }
                }, {
                    key: 'setSinglePageVersionMode',
                    value: function setSinglePageVersionMode(pageVersion) {
                        this.singlePageVersionMode = pageVersion;
                    }
                }, {
                    key: 'getPagesInViewport',
                    value: function getPagesInViewport() {
                        var _this18 = this;

                        var cameraToWorldMat4 = this.layoutViewCamera.getInverse();
                        var viewportEle = $(LayoutConsts.Selectors.LAYOUTVIEW_VIEWPORT);
                        var pages = this.viewport.getPagesInViewport(cameraToWorldMat4, viewportEle);

                        if (this.singlePageVersionMode) {
                            (function () {
                                var focusId = _this18.singlePageVersionMode.id;
                                var focusedPageVersion = function focusedPageVersion(p) {
                                    return p instanceof PageVersion && focusId === p.id;
                                };
                                var focusedPageVersionGrip = function focusedPageVersionGrip(p) {
                                    return p instanceof PageVersionGripUi && focusId === p.pageVersion.id;
                                };
                                pages = pages.filter(function (p) {
                                    return focusedPageVersion(p) || focusedPageVersionGrip(p);
                                });
                            })();
                        }
                        return pages;
                    }
                }, {
                    key: 'getSelectedPagesInWorld',
                    value: function getSelectedPagesInWorld() {
                        var pages = this.viewport.getSelectedPagesInWorld();
                        if (pages && pages.length) {
                            return pages;
                        } else {
                            this.Notifier.info(this.$translate.instant('NO_PAGES_SELECTED_ERROR'));
                            return null;
                        }
                    }
                }, {
                    key: 'getViewport',
                    value: function getViewport() {
                        var cameraToWorldMat4 = this.layoutViewCamera.getInverse();
                        var viewportEle = $(LayoutConsts.Selectors.LAYOUTVIEW_VIEWPORT);
                        return this.viewport.getViewport(cameraToWorldMat4, viewportEle);
                    }
                }, {
                    key: 'getLayoutModel',
                    value: function getLayoutModel() {
                        return this.layoutModel;
                    }
                }, {
                    key: 'getMarketIdList',
                    value: function getMarketIdList() {
                        return this.layoutModel.getMarketsByIndex(this.selectedLayoutVersionIndex);
                    }
                }, {
                    key: 'addPagesToLayout',
                    value: function addPagesToLayout(pages) {
                        var _this19 = this;

                        pages.forEach(function (page) {
                            _this19.layoutModel.addPageToLayout(page);
                        });
                        this.getPageVersions(pages);
                    }
                }, {
                    key: 'getPagesForVersions',
                    value: function getPagesForVersions(pageVersionList) {
                        var _this20 = this;

                        var layoutPageList = [];
                        pageVersionList.forEach(function (pageVersionId) {
                            var pvId = angular.isObject(pageVersionId) ? pageVersionId.id : pageVersionId;
                            var page = _this20.pageUi.getPageVersionDetailsForVersionId(pvId);
                            layoutPageList.push(page);
                        });
                        this.getPageVersions(layoutPageList);
                    }
                }, {
                    key: 'getPageVersions',
                    value: function getPageVersions(pages) {
                        var _this21 = this;

                        var layoutPageList = [];
                        var marketIdList = [];
                        var markets = this.getMarketIdList();
                        markets.forEach(function (market) {
                            marketIdList.push({
                                id: market
                            });
                        });
                        pages.forEach(function (page) {
                            layoutPageList.push({
                                id: page.id
                            });
                        });

                        var promise = this.API.PromoManager.LayoutView.getPageVersion(layoutPageList, marketIdList).then(function (result) {
                            _this21.pageBuilder(result.data.data.gridVersionMap);
                        }, function (reason) {
                            _this21.Notifier.warn(_this21.$translate.instant('LAYOUT_VIEW_DATA_ERROR_PAGE_VERSION_GET_ERROR'));
                            _this21.getLayout();
                        });
                        return promise;
                    }
                }, {
                    key: 'haveChangeRequestAssociations',
                    value: function haveChangeRequestAssociations(id) {
                        var _this22 = this;

                        var layoutPageList = [{
                            id: id
                        }];
                        var promise = this.API.PromoManager.LayoutView.haveChangeRequestAssociations(layoutPageList).then(function (result) {
                            return result.data;
                        }, function (reason) {
                            _this22.Notifier.warn(_this22.$translate.instant('LAYOUT_VIEW_DATA_ERROR_PAGE_HAS_CHANGE_ASSOCIATIONS_ERROR'));
                        });
                        return promise;
                    }
                }, {
                    key: 'haveChangeRequestAssociationsGrid',
                    value: function haveChangeRequestAssociationsGrid(id) {
                        var _this23 = this;

                        var pageGridVersionList = [{
                            id: id
                        }];
                        var promise = this.API.PromoManager.LayoutView.haveChangeRequestAssociationsGrid(pageGridVersionList).then(function (result) {
                            return result.data;
                        }, function (reason) {
                            _this23.Notifier.warn(_this23.$translate.instant('LAYOUT_VIEW_DATA_ERROR_PAGE_HAS_CHANGE_ASSOCIATIONS_GRID_ERROR'));
                        });
                        return promise;
                    }
                }, {
                    key: 'haveOffers',
                    value: function haveOffers(id) {
                        var _this24 = this;

                        var layoutPageList = [{
                            id: id
                        }];
                        var promise = this.API.PromoManager.LayoutView.haveOffers(layoutPageList).then(function (result) {
                            return result.data;
                        }, function (reason) {
                            _this24.Notifier.warn(_this24.$translate.instant('LAYOUT_VIEW_DATA_ERROR_PAGE_HAS_OFFERS_ERROR'));
                        });
                        return promise;
                    }
                }, {
                    key: 'loadOffer',
                    value: function loadOffer(offer) {
                        var _this25 = this;

                        var promise = this.API.PromoManager.LayoutView.loadOffer(offer).then(function (result) {
                            return result.data;
                        }, function (reason) {
                            _this25.Notifier.warn(_this25.$translate.instant('LAYOUT_VIEW_DATA_ERROR_PAGE_LOAD_OFFERS_ERROR'));
                        });
                        return promise;
                    }
                }, {
                    key: 'haveOffersGrid',
                    value: function haveOffersGrid(id) {
                        var _this26 = this;

                        var pageGridVersionList = [{
                            id: id
                        }];
                        var promise = this.API.PromoManager.LayoutView.haveOffersGrid(pageGridVersionList).then(function (result) {
                            return result.data;
                        }, function (reason) {
                            _this26.Notifier.warn(_this26.$translate.instant('LAYOUT_VIEW_DATA_ERROR_PAGE_HAS_OFFERS_GRID_ERROR'));
                        });
                        return promise;
                    }
                }, {
                    key: 'moveOffersToParkingLot',
                    value: function moveOffersToParkingLot(id) {
                        var _this27 = this;

                        var layoutPageList = [{
                            id: id
                        }];
                        var promise = this.API.PromoManager.LayoutView.moveOffersToParkingLot(layoutPageList).then(function (result) {
                            return result.data;
                        }, function (reason) {
                            _this27.Notifier.warn(_this27.$translate.instant('LAYOUT_VIEW_DATA_ERROR_PAGE_MOVE_OFFERS_TO_PARKING_LOT_ERROR'));
                        });
                        return promise;
                    }
                }, {
                    key: 'moveOffersToParkingLotGrid',
                    value: function moveOffersToParkingLotGrid(id) {
                        var _this28 = this;

                        var pageGridVersionList = [{
                            id: id
                        }];
                        var promise = this.API.PromoManager.LayoutView.moveOffersToParkingLotGrid(pageGridVersionList).then(function (result) {
                            _this28.getPagesForVersions(result.data.data.updatedPageGridVersionIdList);
                        }, function (reason) {
                            _this28.Notifier.warn(_this28.$translate.instant('LAYOUT_VIEW_DATA_ERROR_PAGE_MOVE_OFFERS_TO_PARKING_LOT_GRID_ERROR'));
                        });
                        return promise;
                    }
                }, {
                    key: 'getTemplates',
                    value: function getTemplates(templateNameSearchString, channel, startingIndex, limit) {
                        var _this29 = this;

                        var qry = {};
                        qry.startingIndex = startingIndex || 0;
                        qry.limit = limit || null;
                        qry.channel = channel || this.getChannel();
                        qry.templateNameSearchString = templateNameSearchString || null;
                        var promise = this.API.PromoManager.LayoutView.loadTemplates(qry).then(function (result) {
                            return result.data;
                        }, function (reason) {
                            _this29.Notifier.warn(_this29.$translate.instant('DATA_ERROR_TEMPLATE_LOAD_ERROR'));
                        });
                        return promise;
                    }
                }, {
                    key: 'getChannel',
                    value: function getChannel() {
                        return { id: this.layoutModel.getChannel(), name: this.context.channelCode };
                    }
                }, {
                    key: 'reportProblems',
                    value: function reportProblems(reason) {
                        console.log(reason);
                    }
                }]);

                return LayoutView;
            })();

            _export('default', LayoutView);
        }
    };
});
System.register('promo-manager/layout-view/layout-view-controller', ['npm:babel-runtime@5.8.24/helpers/create-class', 'npm:babel-runtime@5.8.24/helpers/class-call-check', 'promo-manager/layout-view/layout-view-camera', 'helpers/util', 'promo-manager/layout-view/controller/viewport', 'promo-manager/layout-view/controller/layout-view', 'promo-manager/layout-view/controller/input-handler', 'promo-manager/layout-view/controller/actions-handler', 'promo-manager/layout-view/offer-quickview/offer-quickview', 'promo-manager/layout-view/layout-view-consts', 'helpers/notifier'], function (_export) {
    var _createClass, _classCallCheck, Camera, Util, Viewport, LayoutView, InputHandler, ActionsHandler, OfferQuickView, LayoutConsts, Notifier, $, LayoutViewController;

    return {
        setters: [function (_npmBabelRuntime5824HelpersCreateClass) {
            _createClass = _npmBabelRuntime5824HelpersCreateClass['default'];
        }, function (_npmBabelRuntime5824HelpersClassCallCheck) {
            _classCallCheck = _npmBabelRuntime5824HelpersClassCallCheck['default'];
        }, function (_promoManagerLayoutViewLayoutViewCamera) {
            Camera = _promoManagerLayoutViewLayoutViewCamera['default'];
        }, function (_helpersUtil) {
            Util = _helpersUtil['default'];
        }, function (_promoManagerLayoutViewControllerViewport) {
            Viewport = _promoManagerLayoutViewControllerViewport['default'];
        }, function (_promoManagerLayoutViewControllerLayoutView) {
            LayoutView = _promoManagerLayoutViewControllerLayoutView['default'];
        }, function (_promoManagerLayoutViewControllerInputHandler) {
            InputHandler = _promoManagerLayoutViewControllerInputHandler['default'];
        }, function (_promoManagerLayoutViewControllerActionsHandler) {
            ActionsHandler = _promoManagerLayoutViewControllerActionsHandler['default'];
        }, function (_promoManagerLayoutViewOfferQuickviewOfferQuickview) {
            OfferQuickView = _promoManagerLayoutViewOfferQuickviewOfferQuickview.OfferQuickView;
        }, function (_promoManagerLayoutViewLayoutViewConsts) {
            LayoutConsts = _promoManagerLayoutViewLayoutViewConsts['default'];
        }, function (_helpersNotifier) {
            Notifier = _helpersNotifier['default'];
        }],
        execute: function () {
            'use strict';

            $ = angular.element;

            LayoutViewController = (function () {
                function LayoutViewController($scope, $q, $translate, API, $uiModal) {
                    var _this = this;

                    _classCallCheck(this, LayoutViewController);

                    this.API = API;
                    this.$q = $q;
                    this.$modal = $uiModal;
                    this.viewport = new Viewport();
                    this.pageUi = null;
                    this.transferObject = null;
                    this.layoutViewCamera = new Camera();
                    this.$scope = $scope;
                    //context is bound to the controller from outside the application
                    if (!this.context) {
                        this.context = {};
                    }
                    this.Notifier = new Notifier($translate);
                    this.merchandiseHierarchyId = null;
                    this.merchandiseHierarchySelectionLabels = [$translate.instant('OFFERS_LIST_ALL_SBUS'), $translate.instant('OFFERS_LIST_ALL_DEPARTMENTS')];
                    this.merchandiseHierarchyLabels = [$translate.instant('OFFERS_LIST_SBU'), $translate.instant('OFFERS_LIST_DEPARTMENT')];
                    this.merchandiseHierarchySelectionLabelFilters = [$translate.instant('OFFERS_LIST_ALL_SBUS_FILTER'), $translate.instant('OFFERS_LIST_ALL_DEPARTMENTS')];
                    var displayDepth = LayoutConsts.DISPLAY_DEPTH;
                    this.mhLabelsByDepth = [$translate.instant('LAYOUT_VIEW_OFFERS_LIST_LEVEL_1'), $translate.instant('LAYOUT_VIEW_OFFERS_LIST_LEVEL_2'), $translate.instant('LAYOUT_VIEW_OFFERS_LIST_LEVEL_3'), $translate.instant('LAYOUT_VIEW_OFFERS_LIST_LEVEL_4')].slice(0, displayDepth);
                    this.close = false;

                    // TODO: Store a spatial partitioning layoutTree containing the WORLD SPACE
                    // location of each block in the current view.
                    //   On Page/Block Spatial Change:
                    //     Added/Move/Resize/Deleted Page
                    //     Added/Resize/Split/Join/Deleted Block  (Add/Delete via Apply/Delete Template)
                    //     Remove object from tree and re-add with new position
                    //   On Market Change (or mass invalidate):
                    //     Just rebuild from scratch when switching between
                    //     markets to simplify state management a bit.

                    this.API = API;
                    this.layoutView = new LayoutView(this.$q, this.API, this.viewport, this.layoutViewCamera, this.context, // this is loaded from outside the application
                    $translate);
                    this.actionsHandler = new ActionsHandler($scope, this.layoutView, this.context, $translate, this.$modal, this.Notifier);
                    this.inputHandler = new InputHandler(this.viewport, this.layoutView, this.layoutViewCamera);

                    this.itemSearch = null;
                    this.itemPreviousSearch = null;
                    this.search = {
                        disabled: false,
                        itemSearch: function itemSearch(value) {
                            if (angular.isDefined(value)) {
                                _this.itemSearch = value;
                                _this.loadItems();
                                return _this.itemSearch;
                            }
                            return _this.itemSearch;
                        }
                    };
                }

                _createClass(LayoutViewController, [{
                    key: 'loadItems',
                    value: function loadItems() {
                        this.Notifier.notify(this.itemSearch, '1 second debounce', 'info');
                        var candidates = this.layoutView.merchandiseHierarchySearch.get(this.itemSearch);
                        console.log(candidates);
                    }
                }, {
                    key: 'openOfferQuickView',
                    value: function openOfferQuickView(pageVersion, block) {
                        if (block && block.offerVersion) {
                            OfferQuickView.open(this.$scope, this.$modal, this.$translate, this.layoutView, pageVersion, block);
                        }
                    }
                }, {
                    key: 'handleInputs',
                    value: function handleInputs($event) {
                        switch ($event.type) {
                            case 'wheel':
                                this.inputHandler.handleWheelEvent($event);break;
                            case 'keydown':
                                this.inputHandler.handleKeyEvent($event);break;
                            case 'mousedown':
                                this.inputHandler.dispatchMouseDown($event);break;
                            case 'mousemove':
                                this.inputHandler.dispatchMouseMove($event);break;
                            case 'mouseup':
                                this.inputHandler.dispatchMouseUp($event);break;
                        }
                        this.transferObject = this.inputHandler.getTransferObject();
                    }
                }, {
                    key: 'getPagesInViewport',
                    value: function getPagesInViewport() {
                        //load root into merchandise hierarchy after data is loaded
                        if (!this.merchandiseHierarchyId) {
                            this.merchandiseHierarchyId = this.layoutView.merchandiseHierarchy.getRootId();
                        }

                        return this.layoutView.getPagesInViewport();
                    }
                }, {
                    key: 'getDynamicStyles',
                    value: function getDynamicStyles() {
                        var yScale = this.layoutViewCamera.getDiagonal()[1];
                        var scaledFontSize = yScale * LayoutConsts.BASELINE_FONT_SIZE;
                        var scaledLineHeight = scaledFontSize * 1.4;

                        this.svg = {
                            gearIconPath: LayoutConsts.GEAR_ICON_PATH,
                            dynamicLineHeight: scaledLineHeight,
                            dynamicGearHeight: scaledLineHeight * 0.7
                        };
                        if (this.context.local) {
                            this.svg.gearIconPath = LayoutConsts.GEAR_ICON_PATH_TEST;
                        }
                        return '\n            .layoutview-body { font-size: ' + scaledFontSize.toFixed(1) + 'px }\n            #LayoutView .grippable { height: ' + scaledLineHeight.toFixed(1) + 'px }\n            .theme-explosive-puppy .svg-gear-icon { margin: ' + (0.15 * scaledLineHeight).toFixed(1) + 'px }\n        ';
                    }
                }, {
                    key: 'updateSelectedVehicleVersion',
                    value: function updateSelectedVehicleVersion(vehicleVersionId) {
                        if (!vehicleVersionId) return;
                        this.layoutView.setVehicleVersion(vehicleVersionId);
                        this.layoutView.localClipboard.updateVehicleVersion(vehicleVersionId);
                    }
                }, {
                    key: 'updateSelectedLayoutVersion',
                    value: function updateSelectedLayoutVersion(layoutVersionId) {
                        if (!layoutVersionId) return;
                        this.layoutView.getNewLayoutVersion(layoutVersionId);
                    }

                    // if the user has selected a filter by a specific MH, then disable non matching
                }, {
                    key: 'isDisabled',
                    value: function isDisabled(obj) {
                        if (!this.merchandiseHierarchyId || this.merchandiseHierarchyId == this.layoutView.merchandiseHierarchy.getRootId()) {
                            return false;
                        }
                        return !this.layoutView.hasHierarchy(obj, this.merchandiseHierarchyId);
                    }
                }, {
                    key: 'merchandiseHierarchyByDepth',
                    value: function merchandiseHierarchyByDepth(block) {
                        return this.layoutView.merchandiseHierarchyByDepth(block);
                    }
                }]);

                return LayoutViewController;
            })();

            _export('default', LayoutViewController);

            LayoutViewController.$inject = ['$scope', '$q', '$translate', 'API', '$uiModal'];
        }
    };
});
System.register('promo-manager/layout-view/main', ['promo-manager/layout-view/styles/layout-styles.css!github:systemjs/plugin-css@0.1.17', 'promo-manager/layout-view/layout-view-controller', 'helpers/toggle-state', 'promo-manager/helpers/merchandise-hierarchy-native-selection-directive', 'api/api-configurator', 'promo-manager/api/promo-manager-api-configurator', 'promo-manager/layout-view/api/layout-view-api-configurator', 'promo-manager/layout-view/layout-view-directive', 'promo-manager/layout-view/layout-view-toolbar-directive', 'promo-manager/layout-view/layout-view-body-directive', 'promo-manager/layout-view/layout-view-dragged-directive', 'promo-manager/layout-view/clipboard/clipboard-directive', 'promo-manager/layout-view/clipboard/clipboard-type-directive', 'promo-manager/layout-view/layout-view-input-directive', 'promo-manager/common/allocation-report/allocation-report-directive', 'promo-manager/common/exception-report/exception-report-directive', 'promo-manager/layout-view/dynamic-styles-directive', 'promo-manager/layout-view/helpers/thumbnail-canvas-renderer', 'promo-manager/common/item-selection/item-selection-directive', 'promo-manager/common/item-selection/item-search-directive', 'promo-manager/common/item-selection/item-selection-indeterminate-checkbox', 'helpers/svg-dynamic-size', 'promo-manager/helpers/merchandise-hierarchy-by-depth'], function (_export) {
	'use strict';

	var LayoutViewController, toggleState, merchandiseHierarchyNativeSelection, CommonApiDecorator, PromoManagerApiDecorator, LayoutViewApiDecorator, layoutView, layoutViewToolbar, layoutViewBody, layoutViewDragged, clipboard, clipboardType, layoutViewInput, allocationReport, exceptionReport, dynamicStyles, thumbnailCanvasRenderer, itemSelection, itemSearch, itemSelectionIndeterminateCheckbox, svgDynamicSize, merchandiseHierarchyByDepth, angularRef, mainModule, legacyModule;
	return {
		setters: [function (_promoManagerLayoutViewStylesLayoutStylesCssGithubSystemjsPluginCss0117) {}, function (_promoManagerLayoutViewLayoutViewController) {
			LayoutViewController = _promoManagerLayoutViewLayoutViewController['default'];
		}, function (_helpersToggleState) {
			toggleState = _helpersToggleState['default'];
		}, function (_promoManagerHelpersMerchandiseHierarchyNativeSelectionDirective) {
			merchandiseHierarchyNativeSelection = _promoManagerHelpersMerchandiseHierarchyNativeSelectionDirective['default'];
		}, function (_apiApiConfigurator) {
			CommonApiDecorator = _apiApiConfigurator['default'];
		}, function (_promoManagerApiPromoManagerApiConfigurator) {
			PromoManagerApiDecorator = _promoManagerApiPromoManagerApiConfigurator['default'];
		}, function (_promoManagerLayoutViewApiLayoutViewApiConfigurator) {
			LayoutViewApiDecorator = _promoManagerLayoutViewApiLayoutViewApiConfigurator['default'];
		}, function (_promoManagerLayoutViewLayoutViewDirective) {
			layoutView = _promoManagerLayoutViewLayoutViewDirective['default'];
		}, function (_promoManagerLayoutViewLayoutViewToolbarDirective) {
			layoutViewToolbar = _promoManagerLayoutViewLayoutViewToolbarDirective['default'];
		}, function (_promoManagerLayoutViewLayoutViewBodyDirective) {
			layoutViewBody = _promoManagerLayoutViewLayoutViewBodyDirective['default'];
		}, function (_promoManagerLayoutViewLayoutViewDraggedDirective) {
			layoutViewDragged = _promoManagerLayoutViewLayoutViewDraggedDirective['default'];
		}, function (_promoManagerLayoutViewClipboardClipboardDirective) {
			clipboard = _promoManagerLayoutViewClipboardClipboardDirective['default'];
		}, function (_promoManagerLayoutViewClipboardClipboardTypeDirective) {
			clipboardType = _promoManagerLayoutViewClipboardClipboardTypeDirective['default'];
		}, function (_promoManagerLayoutViewLayoutViewInputDirective) {
			layoutViewInput = _promoManagerLayoutViewLayoutViewInputDirective['default'];
		}, function (_promoManagerCommonAllocationReportAllocationReportDirective) {
			allocationReport = _promoManagerCommonAllocationReportAllocationReportDirective['default'];
		}, function (_promoManagerCommonExceptionReportExceptionReportDirective) {
			exceptionReport = _promoManagerCommonExceptionReportExceptionReportDirective['default'];
		}, function (_promoManagerLayoutViewDynamicStylesDirective) {
			dynamicStyles = _promoManagerLayoutViewDynamicStylesDirective['default'];
		}, function (_promoManagerLayoutViewHelpersThumbnailCanvasRenderer) {
			thumbnailCanvasRenderer = _promoManagerLayoutViewHelpersThumbnailCanvasRenderer['default'];
		}, function (_promoManagerCommonItemSelectionItemSelectionDirective) {
			itemSelection = _promoManagerCommonItemSelectionItemSelectionDirective['default'];
		}, function (_promoManagerCommonItemSelectionItemSearchDirective) {
			itemSearch = _promoManagerCommonItemSelectionItemSearchDirective['default'];
		}, function (_promoManagerCommonItemSelectionItemSelectionIndeterminateCheckbox) {
			itemSelectionIndeterminateCheckbox = _promoManagerCommonItemSelectionItemSelectionIndeterminateCheckbox['default'];
		}, function (_helpersSvgDynamicSize) {
			svgDynamicSize = _helpersSvgDynamicSize['default'];
		}, function (_promoManagerHelpersMerchandiseHierarchyByDepth) {
			merchandiseHierarchyByDepth = _promoManagerHelpersMerchandiseHierarchyByDepth['default'];
		}],
		execute: function () {
			angularRef = window.angular;
			mainModule = angularRef.module('layout-view', [
			// angular modules
			// third party modules
			'pascalprecht.translate', 'ui.bootstrap']);

			_export('mainModule', mainModule);

			// core modules	
			//component modules
			//state modules	

			mainModule.controller('layoutViewController', LayoutViewController);
			mainModule.directive('layoutView', layoutView);
			mainModule.directive('layoutViewToolbar', layoutViewToolbar);
			mainModule.directive('layoutViewBody', layoutViewBody);
			mainModule.directive('layoutViewDragged', layoutViewDragged);
			mainModule.directive('layoutViewClipboard', clipboard);
			mainModule.directive('clipboardType', clipboardType);
			mainModule.directive('layoutViewInput', layoutViewInput);
			mainModule.directive('allocationReport', allocationReport);
			mainModule.directive('exceptionReport', exceptionReport);
			mainModule.directive('dynamicStyles', dynamicStyles);
			mainModule.directive('toggleState', toggleState);
			mainModule.directive('thumbnailCanvasRenderer', thumbnailCanvasRenderer);
			mainModule.directive('merchandiseHierarchyNativeSelection', merchandiseHierarchyNativeSelection);
			mainModule.directive('itemSelection', itemSelection);
			mainModule.directive('itemSearch', itemSearch);
			mainModule.directive('itemSelectionIndeterminateCheckbox', itemSelectionIndeterminateCheckbox);
			mainModule.directive('svgDynamicSize', svgDynamicSize);
			mainModule.directive('merchandiseHierarchyByDepth', merchandiseHierarchyByDepth);

			legacyModule = angularRef.module('crosscapApp');

			legacyModule.config(CommonApiDecorator);
			legacyModule.config(PromoManagerApiDecorator);
			legacyModule.config(LayoutViewApiDecorator);

			// TODO: When separated from synchronous codem
			//mainModule.service('API', API);
			//mainModule.config(onTranslateConfig)
			//mainModule.factory('apiInterceptor', apiInterceptor)

			console.log("Module prepared: layout-view");
		}
	};
});
System.register('promo-manager/layout-view/styles/layout-styles.css!github:systemjs/plugin-css@0.1.17', [], false, function() {});
(function(c){if (typeof document == 'undefined') return; var d=document,a='appendChild',i='styleSheet',s=d.createElement('style');s.type='text/css';d.getElementsByTagName('head')[0][a](s);s[i]?s[i].cssText=c:s[a](d.createTextNode(c));})
("@import url(https://fonts.googleapis.com/css?family=Lato:300,400,700,900,300italic,400italic,700italic,900italic);@import url(https://fonts.googleapis.com/css?family=Lato:300,400);.theme-explosive-puppy{clear:both}.theme-explosive-puppy,.theme-explosive-puppy *{font-family:Lato}.theme-explosive-puppy [ng-cloak]{display:none}.theme-explosive-puppy [multi-checkbox]{display:inline-block;width:14px;height:14px;background-size:14px 14px;vertical-align:middle}.theme-explosive-puppy [multi-checkbox].checked-none{background:url(/emm/crosscap-angular/common/themes/explosive-puppy/images/checkbox_empty.png) 0 0 transparent no-repeat}.theme-explosive-puppy [multi-checkbox].checked-some{background:url(/emm/crosscap-angular/common/themes/explosive-puppy/images/checkbox_somechecked.png) 0 0 transparent no-repeat}.theme-explosive-puppy [multi-checkbox].checked-all{background:url(/emm/crosscap-angular/common/themes/explosive-puppy/images/checkbox_allchecked.png) 0 0 transparent no-repeat}@media only screen and (-webkit-min-device-pixel-ratio:2){.theme-explosive-puppy [multi-checkbox].checked-none{background:url(/emm/crosscap-angular/common/themes/explosive-puppy/images/checkbox_empty@2x.png) 0 0 transparent no-repeat}.theme-explosive-puppy [multi-checkbox].checked-some{background:url(/emm/crosscap-angular/common/themes/explosive-puppy/images/checkbox_somechecked@2x.png) 0 0 transparent no-repeat}.theme-explosive-puppy [multi-checkbox].checked-all{background:url(/emm/crosscap-angular/common/themes/explosive-puppy/images/checkbox_allchecked@2x.png) 0 0 transparent no-repeat}}.theme-explosive-puppy .arrow-up{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-bottom:5px solid #B1B1AE;position:absolute;top:10px;right:2%}.theme-explosive-puppy .arrow-down{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid #B1B1AE;position:absolute;top:10px;right:2%}.theme-explosive-puppy .arrow-right{width:0;height:0;border-top:5px solid transparent;border-bottom:5px solid transparent;border-left:5px solid #B1B1AE;position:absolute;top:10px;right:2%}.theme-explosive-puppy .arrow-left{width:0;height:0;border-top:5px solid transparent;border-bottom:5px solid transparent;border-right:5px solid #B1B1AE;position:absolute;top:10px;right:2%}.theme-explosive-puppy .svg-gear-icon{display:inline-block;margin:0;vertical-align:middle}.theme-explosive-puppy .svg-gear-icon.svg-gray path{fill:gray}.theme-explosive-puppy .svg-gear-icon.svg-white path{fill:#fff}.carousel,.nav,.pagination,.panel-title a{cursor:pointer}body{width:100%;height:100%;padding:0;margin:0}#LayoutView{position:absolute;top:50px;bottom:40px;left:0;right:0;overflow:hidden}#LayoutView *{box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;cursor:default;user-select:none;-ms-user-select:none;-moz-user-select:none;-webkit-user-select:none}#LayoutView .viewport{position:absolute;top:0;bottom:0;left:0;right:0;overflow:hidden;background-color:#444;z-index:0;display:flex;flex-direction:column}#LayoutView .viewport.noclip{overflow:visible}#LayoutView .viewport.layoutview-fullscreen{position:fixed;top:0;left:0;right:0;bottom:0;z-index:99999}#LayoutView [layout-view-dragged] .dragged-object{border:1px solid red;background-color:#505050;position:absolute;width:150px;height:75px;z-index:2147483647}#LayoutView .layoutview-pageversion{position:absolute;background-color:#fff}#LayoutView .layoutview-toolbar{width:100%;padding-right:20px;padding-left:25px;min-height:62px;line-height:62px;background-color:#fff}#LayoutView .layoutview-toolbar .filter-mhList>div{display:inline-block;margin-right:4px}#LayoutView .layoutview-toolbar .filter-mhList>div select{min-width:150px;font:300 .66666667em Lato;height:30px;color:#3E3F36;font-size:14px;background-color:#F6F7F7;border-color:#E6E6E6;border-radius:4px;padding:8px 14px;line-height:0}#LayoutView .layoutview-toolbar .filter-mhList>div select .caret{color:#B1B1AE}#LayoutView .layoutview-toolbar .filter-mhList>div select:hover{background:#EBEBEB;text-decoration:none}#LayoutView .layoutview-body{position:relative;flex-grow:1;z-index:0;overflow:hidden;outline:0}#LayoutView [layout-view-clipboard] .clipboard-caret{position:relative;background:#d50b70}#LayoutView [layout-view-clipboard] .clipboard-caret:after{border:solid transparent;content:\" \";height:0;width:0;position:absolute;pointer-events:none;border-color:rgba(213,11,112,0);border-width:4px}#LayoutView [layout-view-clipboard] .clipboard-caret.up:after{bottom:100%;left:50%;border-bottom-color:#d50b70;margin-left:-4px;margin-top:-4px}#LayoutView [layout-view-clipboard] .clipboard-caret.down:after{top:100%;left:50%;border-top-color:#d50b70;margin-left:-4px;margin-top:-4px}#LayoutView [layout-view-clipboard] .clipboard-caret:left:after{right:100%;top:50%;border-right-color:#d50b70;margin-top:-4px}#LayoutView [layout-view-clipboard] .clipboard-caret.right:after{left:100%;top:50%;border-left-color:#d50b70;margin-top:-4px}#LayoutView [layout-view-clipboard] .generic-clipboard{height:30px;position:relative;transition:height .3s ease-out}#LayoutView [layout-view-clipboard] .generic-clipboard.dragging,#LayoutView [layout-view-clipboard] .generic-clipboard.open{height:150px}#LayoutView [layout-view-clipboard] .generic-clipboard.open .view-global .local,#LayoutView [layout-view-clipboard] .generic-clipboard.open .view-local .global{bottom:30px}#LayoutView [layout-view-clipboard] .generic-clipboard.open .view-global .global,#LayoutView [layout-view-clipboard] .generic-clipboard.open .view-local .local{top:30px}#LayoutView [layout-view-clipboard] .generic-clipboard .clipboard-contents.view-global .global,#LayoutView [layout-view-clipboard] .generic-clipboard .clipboard-contents.view-local .local{z-index:2}#LayoutView [layout-view-clipboard] .generic-clipboard .clipboard-contents .clipboard-type{position:absolute;top:0;bottom:0;left:0;right:0;z-index:1;display:flex;flex-direction:column;transition:all .3s ease-out}#LayoutView [layout-view-clipboard] .generic-clipboard .clipboard-contents .clipboard-type.global{background-color:green}#LayoutView [layout-view-clipboard] .generic-clipboard .clipboard-contents .clipboard-type.local{background-color:#00f}#LayoutView [layout-view-clipboard] .generic-clipboard .clipboard-contents .clipboard-type .clipboard-header{display:flex}#LayoutView [layout-view-clipboard] .generic-clipboard .clipboard-contents .clipboard-type .clipboard-header .clipboard-title,#LayoutView [layout-view-clipboard] .generic-clipboard .clipboard-contents .clipboard-type .clipboard-header .clipboard-toggle{height:30px;line-height:30px;vertical-align:middle}#LayoutView [layout-view-clipboard] .generic-clipboard .clipboard-contents .clipboard-type .clipboard-header .clipboard-title{flex-grow:9}#LayoutView [layout-view-clipboard] .generic-clipboard .clipboard-contents .clipboard-type .clipboard-header .clipboard-toggle{max-width:30px;flex-grow:1}#LayoutView [layout-view-clipboard] .generic-clipboard .clipboard-contents .clipboard-type .clipboard-header .clipboard-toggle .clipboard-caret{text-align:center;width:100%;display:inline-block;vertical-align:middle}#LayoutView [layout-view-clipboard] .generic-clipboard .clipboard-contents .clipboard-type .clipboard-items{display:flex;flex-grow:1}#LayoutView [layout-view-clipboard] .generic-clipboard .clipboard-contents .clipboard-type .clipboard-items .clipboard-item{flex-grow:1;flex-basis:0;margin:auto 20px;background-color:#fff;border-radius:5px;height:70px;padding:5px;cursor:grab;cursor:-moz-grab;cursor:-webkit-grab}#LayoutView [layout-view-clipboard] .generic-clipboard .clipboard-targets{display:flex;height:100%}#LayoutView [layout-view-clipboard] .generic-clipboard .clipboard-targets .clipboard-global-target{background-color:salmon}#LayoutView [layout-view-clipboard] .generic-clipboard .clipboard-targets .clipboard-local-target{background-color:pink}#LayoutView [layout-view-clipboard] .generic-clipboard .clipboard-targets .clipboard-global-target,#LayoutView [layout-view-clipboard] .generic-clipboard .clipboard-targets .clipboard-local-target{display:flex;flex-grow:1}#LayoutView [layout-view-clipboard] .generic-clipboard .clipboard-targets .clipboard-target-label{margin:auto}#LayoutView .pageversion-grip{position:absolute;background-color:#91c949}#LayoutView .pageversion-grip .grip-center{text-align:center}#LayoutView .block-grip{position:relative;background-color:#eee}#LayoutView .offer-grip{position:relative;background-color:#eee}#LayoutView .grippable{width:100%;height:100%;display:flex}#LayoutView .grippable.drag-handle,#LayoutView .grippable.drag-handle *{cursor:grab;cursor:-moz-grab;cursor:-webkit-grab}#LayoutView .grippable.drag-handle:active{cursor:grabbing;cursor:-moz-grabbing;cursor:-webkit-grabbing}#LayoutView .grippable .grip-center{flex-grow:1;height:100%;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}#LayoutView .grippable .grip-right{height:100%;text-align:right}#LayoutView .grippable .grip-right .gear-icon-gray{vertical-align:top}#LayoutView .grippable .grip-right .grip-menu-items{background-color:#fff;position:absolute;top:100%;right:0;box-shadow:-1px 1px 2px rgba(0,0,0,.25);border-radius:2px 2px 2px 2px;border:1px solid #ddd}#LayoutView .grippable .grip-right .grip-menu-items>div{padding:2px 10px;text-align:right;white-space:nowrap}#LayoutView .grippable .grip-right .grip-menu-items>div:hover{background-color:#f6f6f6}#LayoutView .layoutview-block{position:absolute;border:1px dashed #979797;display:flex;flex-direction:column}#LayoutView .layoutview-block .block-content,#LayoutView .layoutview-block .offer-content{flex-grow:1;padding:5px}#LayoutView .layoutview-block .block-content .label,#LayoutView .layoutview-block .offer-content .label{font:300 .66666667em Lato;text-transform:uppercase;color:#9B9B9B}#LayoutView .layoutview-block .block-content .value,#LayoutView .layoutview-block .offer-content .value{font:400 .66666667em Lato;color:#3E3F36}#LayoutView .layoutview-block .block-content .value.bold,#LayoutView .layoutview-block .offer-content .value.bold{font-weight:700}#LayoutView .object-disabled{color:grey;background-color:#333;pointer-events:none}#LayoutView .object-disabled img{filter:gray;-webkit-filter:grayscale(100%);-moz-filter:grayscale(100%);filter:grayscale(100%)}.layout-viewport .btn-group .btn{border-top-left-radius:4px;border-top-right-radius:4px;border-bottom-right-radius:4px;border-bottom-left-radius:4px;text-align:left}.layout-viewport .btn-group .btn:first-child:not(:last-child):not(.dropdown-toggle){border-top-right-radius:4px;border-bottom-right-radius:4px}.layout-viewport .btn-group .btn.btn-layout-dropdown{font:300 .66666667em Lato;height:30px;min-width:150px;color:#3E3F36;font-size:14px;background-color:#F6F7F7;border-color:#E6E6E6;padding:10px 14px 10px 14px;line-height:0;margin-top:0}.layout-viewport .btn-group .btn.btn-layout-dropdown:hover{background:#EBEBEB;text-decoration:none}.layout-viewport .btn-group .dropdown-menu{font:400 .66666667em Lato;color:#3E3F36;background-color:#FFF;border:1px solid #E6E6E6;border-radius:4px;box-shadow:0 6px 12px rgba(0,0,0,.175)}.layout-viewport .btn-group .dropdown-menu .menuitem{font-size:14px;line-height:16px;padding:8px 14px}.layout-viewport .btn-group .dropdown-menu .menuitem:hover{background:#DDF0F0;text-decoration:none}.layout-viewport .btn-group .dropdown-menu .menuitem:disabled{color:#9B9B9B}.layout-viewport .button-spacing .layout-btn{margin-top:48px;margin-left:16px;margin-bottom:32px}.layout-viewport .button-spacing .layout-btn:last-of-type{margin-right:48px}.layout-viewport .layout-btn{font:400 .66666667em Lato;background:#91C949;border-radius:4px;color:#fff;display:inline-block;font-size:14px;padding:10px 28px 10px 28px;text-decoration:none;text-align:center;min-width:60px;position:relative;cursor:pointer}.layout-viewport .layout-btn:hover{text-decoration:none;background:#78AC35}.layout-viewport .layout-btn.layout-btn-big{font-size:18px;padding:15px 20px;min-width:100px}.layout-viewport .layout-btn.layout-btn-cancel{background:#B1B1AE}.layout-viewport .layout-btn.layout-btn-cancel:hover{background:#BE8E8A}.layout-viewport .layout-input-header-top{font:300 .66666667em Lato;font-size:14px;color:#3E3F36;padding-bottom:5px;display:block}.layout-viewport .layout-input-header-top input,.layout-viewport .layout-input-header-top label{display:block}.layout-viewport .layout-input-header-side{font:300 .66666667em Lato;font-size:14px;color:#3E3F36;padding-right:5px}.layout-viewport .layout-input input[type=text]{font:300 .66666667em Lato;font-size:14px;line-height:18px;color:#bbb;background-color:#fff;border-color:#fff;border:1px solid;border-radius:4px;padding:8px 14px;transition:box-shadow .3s,border .3s}.layout-viewport .layout-input input[type=text].search-query{padding:5px 14px;width:150px;margin-left:5px}.layout-viewport .layout-input input[type=text].search-query:hover{background:#EBEBEB;text-decoration:none}.layout-viewport .layout-input input[type=text].search-query .focus,.layout-viewport .layout-input input[type=text].search-query:focus{border:solid 1px #48AEAF;box-shadow:0 0 5px 1px #48AEAF}.layout-viewport .layout-input input[type=text].search-query:disabled{color:#9B9B9B}.layout-viewport .layout-input input[type=text].focus,.layout-viewport .layout-input input[type=text]:focus{border:solid 1px #48AEAF;box-shadow:0 0 5px 1px #48AEAF}.layout-viewport .layout-input input[type=text]:disabled,.layout-viewport .layout-view-input input[type=text].disabled{background-color:#F6F7F7}.layout-viewport .layout-input input[readonly]{font:400 .66666667em Lato;color:#3E3F36}.layout-viewport .layout-input input[type=checkbox]{height:14px;width:14px;border-radius:2px}.layout-viewport .layout-input input[type=checkbox] label{font:400 .66666667em Lato;font-size:14px;color:#3E3F36}.layout-viewport [item-selection-indeterminate-checkbox]{display:inline-block;width:14px;height:14px;background-size:14px 14px;vertical-align:middle}.layout-viewport [item-selection-indeterminate-checkbox].checked-none{background:url(/emm/crosscap-angular/promo-manager/layout-viewimages/checkbox_empty.png) 0 0 transparent no-repeat}.layout-viewport [item-selection-indeterminate-checkbox].checked-some{background:url(/emm/crosscap-angular/promo-manager/layout-viewimages/checkbox_somechecked.png) 0 0 transparent no-repeat}.layout-viewport [item-selection-indeterminate-checkbox].checked-all{background:url(/emm/crosscap-angular/promo-manager/layout-viewimages/checkbox_allchecked.png) 0 0 transparent no-repeat}@media only screen and (-webkit-min-device-pixel-ratio:2){.layout-viewport [item-selection-indeterminate-checkbox].checked-none{background:url(/emm/crosscap-angular/promo-manager/layout-viewimages/checkbox_empty@2x.png) 0 0 transparent no-repeat}.layout-viewport [item-selection-indeterminate-checkbox].checked-some{background:url(/emm/crosscap-angular/promo-manager/layout-viewimages/checkbox_somechecked@2x.png) 0 0 transparent no-repeat}.layout-viewport [item-selection-indeterminate-checkbox].checked-all{background:url(/emm/crosscap-angular/promo-manager/layout-viewimages/checkbox_allchecked@2x.png) 0 0 transparent no-repeat}}.layout-viewport.backdrop-invisible.modal-backdrop{opacity:0}.layout-viewport .layout-modal{border-radius:10px;outline:0}.layout-viewport .layout-modal .layout-modal-body{padding:20px}.layout-viewport .layout-modal .layout-modal-footer,.layout-viewport .layout-modal .layout-modal-header{padding:10px 20px}.layout-viewport .layout-modal .layout-modal-header{font:300 .66666667em Lato;height:68px;background-color:#8B8C84;position:relative}.layout-viewport .layout-modal .layout-modal-header .layout-modal-title{font-size:24px;color:#FFF;margin:0;position:absolute;top:50%;left:50%;margin-right:-50%;transform:translate(-50%,-50%)}.layout-viewport .layout-modal .layout-modal-footer{border-top:#eee solid 1px;text-align:right;padding:0}.layout-viewport .layout-modal .layout-modal-body .small-input{width:50px}.layout-viewport .layout-modal .layout-modal-body .msg{font:400 .66666667em Lato;color:#3E3F36;font-size:16px;width:200px;word-wrap:break-word}.layout-viewport .layout-modal .layout-modal-body .info-line{font-size:12px}.layout-viewport .hyperlink{color:#00f;text-decoration:underline;cursor:pointer}.layout-viewport .hyperlink:hover{color:#00c}.layout-viewport .clickable{cursor:pointer}.toast-bottom-right{bottom:200px;right:200px}.modal.offer-quickview{width:880px;margin-left:-440px;border-radius:2px}@media (max-width:940px){.modal.offer-quickview{position:fixed;top:20px;left:20px;right:20px;width:auto;margin:0}}.modal.offer-quickview .layout-modal-body{padding:0}.modal.offer-quickview .offerview-link-button{font:400 .66666667em Lato;font-size:14px;color:#64C5C7;cursor:pointer}.modal.offer-quickview .offerview-title{font:700 .66666667em Lato;font-size:36px;color:#4A4A4A;line-height:36px;padding-bottom:16px}.modal.offer-quickview .offerview-date{font:400 .66666667em Lato;font-size:14px;color:#4A4A4A}.modal.offer-quickview .offerview-text{font:400 .66666667em Lato;font-size:14px;color:#4A4A4A;line-height:150%}.modal.offer-quickview .offerview-attributes{margin-top:24px;background-color:#FFF;text-align:left}.modal.offer-quickview .offerview-attributes .label{font:300 .66666667em Lato;font-size:14px;text-transform:uppercase;color:#9B9B9B}.modal.offer-quickview .offerview-attributes .value{font:400 .66666667em Lato;font-size:14px;color:#3E3F36}.modal.offer-quickview .offerview-attributes .value.bold{font-weight:700}.modal.offer-quickview .slider{width:240px;overflow:hidden;position:relative;background:#FFF;margin-top:20px;height:450px}.modal.offer-quickview .slider .carousel-control{display:none}.modal.offer-quickview .slider .carousel-indicators li{background-color:#D0D0D0}.modal.offer-quickview .slider .carousel-indicators li:active{background-color:#91C949}.modal.offer-quickview .slider .carousel-indicators li:hover{background-color:#9B9B9B}.modal.offer-quickview .slider .carousel-indicators .active{background-color:#91C949}.modal.offer-quickview .allocation-panel{width:65%}.modal.offer-quickview .allocation-panel .offerview-details{margin:48px 68px 24px 48px;height:450px}.modal.offer-quickview .allocation-panel .offerview-link-button{margin-left:48px;margin-bottom:24px}.modal.offer-quickview .image-panel{width:35%}.modal.offer-quickview .image-panel .offerview-details{margin:48px 68px 24px 0}.modal.offer-quickview .image-panel .offerview-details .offerview-image{width:240px;height:240px;margin:auto;border:1px,solid,#B1B1AE;background-color:transparent}.modal.item-selection .item-search-ul{list-style:none}.modal.item-selection .item-search-li{margin-left:25px}.modal.item-selection .item-search-list{margin-top:10px;margin-left:-20px}.modal.item-selection .selectedItem{background-color:#b4bdc8;border-radius:6px}.modal.item-selection .searchedItem{background-color:#e1edfa;border-radius:6px}");
});
//# sourceMappingURL=layoutview-dist.min.js.map